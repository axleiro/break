{"version":3,"sources":["images/break.svg","images/solana.svg","components/LoadingModal.tsx","providers/server/http/index.tsx","providers/server/http/request.tsx","providers/server/http/config.ts","providers/game.tsx","providers/transactions/tps.tsx","workers/create-transaction-worker-script.ts","workers/create-transaction-rpc.ts","providers/transactions/create.tsx","providers/transactions/index.tsx","providers/server/index.tsx","pages/SetupPage.tsx","providers/rpc/index.tsx","utils/index.ts","providers/wallet.tsx","providers/slot.tsx","images/graphic.svg","pages/HomePage.tsx","components/PaymentCard.tsx","components/TxSquare.tsx","components/TxTableRow.tsx","components/TxContainer.tsx","components/TxModal.tsx","pages/GamePage.tsx","pages/ResultsPage.tsx","pages/WalletPage.tsx","components/ClusterModal.tsx","app.tsx","index.tsx","utils/bytes.ts","providers/transactions/confirmed.tsx","providers/rpc/balance.tsx","providers/transactions/selected.tsx","providers/server/socket.tsx","providers/rpc/blockhash.tsx","components/ClusterStatusButton.tsx","components/Header.tsx"],"names":["LoadingModal","show","wallet","React","useState","cancel","setCancel","useClusterModal","showModal","setShowModal","useEffect","undefined","timeoutId","window","setTimeout","clearTimeout","className","loadingText","onClick","renderContent","ConfigStatus","configReducer","state","action","status","Ready","Initialized","Failure","Fetching","accounts","StateContext","createContext","RefContext","DispatchContext","HttpProvider","children","useReducer","dispatch","httpUrl","useServer","httpUrlRef","useRef","current","initConfig","config","paymentRequired","refreshAccounts","Provider","value","a","fetchWithRetry","route","paymentAccount","useAccounts","context","useContext","Error","useConfig","useIsFetching","useClusterParam","cluster","useClearAccounts","useCallback","useRefreshAccounts","usePayerState","payer","balance","useBalance","cost","gameCost","SPLIT","split","parseInt","URLSearchParams","location","search","get","isNaN","request","response","fetchAccounts","fetchInit","sleep","body","JSON","stringify","fetch","Request","method","headers","json","data","configFromInit","reportError","postData","paymentKey","Buffer","from","secretKey","toString","text","error","configFromAccounts","str","stringToCluster","rpcUrl","clusterUrl","programId","PublicKey","programAccounts","map","account","accountCapacity","feeAccounts","key","Account","COUNTDOWN_SECS","DEBUG_MODE","GameStateContext","CountdownContext","GameStateProvider","countdown","setCountdown","gameState","setGameState","resultsTimerRef","connection","useConnection","history","useHistory","useLocation","blockhash","useBlockhash","socket","useSocket","isResultsRoute","useRouteMatch","isGameRoute","isFetching","needsPayment","push","pathname","countdownState","useMemo","useGameState","useCountdown","useResetGame","clearAccounts","useDispatch","type","TpsContext","TpsProvider","tps","setTps","createdCount","useCreatedCount","createdCountRef","recentCounts","timerId","setInterval","splice","length","shift","ticksElapsed","oldTxCount","TPS_REFRESH_MS","Math","floor","clearInterval","Worker_fn","Worker","CreateTransactionRPC","worker","callbacks","this","CreateTransactionWorker","onmessage","handleMessages","bind","event","message","trackingId","Promise","resolve","reject","postMessage","workerRPC","CreateTxContext","CreateTxProvider","createTx","idCounter","targetSlotRef","useTargetSlotRef","programDataAccount","toBase58","id","targetSlot","bitId","accountIndex","feeAccount","createTransaction","feeAccountSecretKey","then","signature","serializedTransaction","send","pendingTransaction","encodedSignature","bs58","encode","details","publicKey","programAccount","onTransaction","notification","timestamp","slot","console","log","commitment","enableReceivedNotification","subscribedCommitments","forEach","commitmentName","getCommitmentName","retry","retryId","readyState","WebSocket","OPEN","COMMITMENT_PARAM","reducer","received","pending","timing","transaction","tx","subscribed","index","signatures","findIndex","val","landed","slots","target","timeout","activeIdPartition","ids","partition","partitionCount","has","estimatedSlot","timeElapsed","receivedAt","processed","find","root","TransactionsProvider","stateRef","rootSubscription","onRootChange","intervalId","fetchStatuses","getSignatureStatuses","statuses","i","removeRootChangeListener","useThrottle","throttledState","setThrottledState","sentAt","parseFloat","toFixed","useTransactions","useConfirmedCount","filter","useDroppedCount","useAvgConfirmationTime","slotMetrics","useSlotTiming","confirmedTimes","reduce","slotTiming","confTime","confirmed","count","sum","time","useTps","useCreateTxRef","createTxRef","DEFAULT_SERVER","isLocalHost","SERVERS","DEFAULT_CUSTOM_URL","hostname","process","PORT","serverName","server","ModalContext","ServerContext","ServerProvider","serverParam","query","parseQuery","setServer","customUrl","setCustomUrl","modalState","useHttp","slug","getServerUrl","webSocketUrl","replace","name","useCustomUrl","origin","USE_TORUS_TESTNET","ENABLE_TORUS","VERIFIER","NODE_DETAILS","NodeDetailsManager","network","proxyAddress","Setup","setPayer","googleStatus","setGoogleStatus","googleResponse","setGoogleResponse","nodeDetails","setNodeDetails","setError","responseGoogle","disconnectGoogle","disconnect","useGoogleLogin","clientId","onSuccess","onFailure","err","isSignedIn","signIn","loaded","onSignIn","unmounted","getNodeDetails","catch","torus","Torus","torusNodeEndpoints","torusNodePub","torusIndexes","verifierId","getBasicProfile","getEmail","getPublicAddress","verifier","idToken","getAuthResponse","id_token","reloadAuthResponse","retrieveShares","verifier_id","privKey","torusKey","keyPair","nacl","sign","fromSeed","loadingWallet","showWalletSetup","showLoading","href","height","width","src","alt","PAYMENT_ACCOUNT","Overlay","ConnectionContext","RpcProvider","setRpcUrl","configRpcUrl","url","URL","Connection","useRpcUrlState","ms","Sentry","tags","localStorage","getItem","setItem","WalletProvider","SlotContext","SlotMetricsContext","SlotMetricsCounter","slotRef","ref","SlotProvider","Map","metricsCounter","setCounter","disabledSlotSubscription","slotSubscription","onSlotChange","interval","c","slotUpdateSubscription","onSlotUpdate","removeSlotChangeListener","max","set","firstShred","fullSlot","replayStart","frozen","entryStats","entry_stats","numEntries","numTransactions","maxTpe","maxTxPerEntry","voted","rooted","removeSlotUpdateListener","Home","breakSvg","solanaSvg","to","graphic","lamportsToSolString","lamports","maximumFractionDigits","sol","abs","LAMPORTS_PER_SOL","Intl","NumberFormat","format","PaymentCard","recentBlockhash","gameCostLamports","gameCostSol","address","balanceSufficient","trustWalletDeepLink","amountSol","iOS","test","navigator","userAgent","MSStream","android","getTrustWalletLink","copied","setCopied","showQR","setShowQR","showWithdraw","setShowWithdraw","toPubkey","setToPubkey","withdrawMessage","setWithdrawMessage","withdrawEnabled","withdrawFunds","sendAndConfirmTransaction","Transaction","add","SystemProgram","transfer","fromPubkey","preflightCommitment","clipboard","writeText","qr","includeMargin","bgColor","fgColor","renderAs","style","flex","maxWidth","placeholder","onInput","currentTarget","disabled","rel","Footer","sufficient","TransactionSquare","selectTransaction","useSelectTransaction","statusClass","TxTableRow","landedSlot","landedTime","forkedSlots","r","substr","slice","TransactionContainer","enabled","resetGame","rapidFire","setRapidFire","makeTransaction","performance","now","testInterval","document","addEventListener","removeEventListener","HelpButton","DebugTable","InnerContainer","onContextMenu","e","preventDefault","onPointerDown","onPointerUp","onPointerLeave","onPointerCancel","scrollEl","transactions","scrollTop","scrollHeight","renderTransactions","tabIndex","setShow","onMouseOver","onMouseOut","Legend","TransactionModal","selectedTx","useSelectedTransaction","selectTx","onClose","stopPropagation","aria-hidden","TransactionDetails","clusterParam","explorerLink","path","feeAddress","dataAddress","displayConfTime","Game","showPayment","loading","showStats","Header","Stats","EmptyCard","avgConfTime","activeUsers","useActiveUsers","StatCard","label","icon","Results","Summary","confirmedCount","capacityUsed","solana","bitcoin","ethereum","droppedCount","processingCount","txData","labels","datasets","borderColor","backgroundColor","hasCapacityData","roundCapacityUsed","capacityData","hasConfData","confData","Array","fill","StatCircle","title","STAT_LEGEND","display","STAT_OPTIONS","showLines","cutoutPercentage","maintainAspectRatio","legend","options","Wallet","CustomRpcInput","prefix","editing","setEditing","active","onUrlInput","useDebounceCallback","defaultValue","inputTextClass","onFocus","onBlur","CustomClusterInput","ClusterToggle","next","btnClass","params","delete","ClusterModal","App","isHomePage","isExact","isSetupPage","showClusterModal","showLoadingModal","exact","component","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","getElementById","pow","ConfirmedHelper","commitments","accountSubscriptions","onAccountChange","accountInfo","Set","bytes","byte","j","Bytes","listeners","listener","removeAccountChangeListener","BalanceProvider","setBalance","refreshBalance","getBalance","onChange","visibilityState","subscription","SelectedContext","SelectedTxProvider","selectSignature","selectedState","SocketContext","ActiveUsersContext","SWITCH_URL_CODE","socketCounter","SocketProvider","setSocket","setActiveUsers","newSocket","onopen","serverSocket","close","parse","onclose","code","onerror","ActionType","Stop","Update","Object","assign","BlockhashProvider","connectionRef","refreshingRef","refresh","reported","getRecentBlockhash","ClusterStatusButton","setRefresh","secondsRemaining","cta"],"mappings":"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","file":"static/js/main.2fd330d3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/break.1f05981c.svg\";","export default __webpack_public_path__ + \"static/media/solana.7b25ef17.svg\";","import React from \"react\";\nimport { useClusterModal } from \"providers/server\";\n\nexport function LoadingModal({\n  show,\n  wallet,\n}: {\n  show: boolean;\n  wallet?: boolean;\n}) {\n  const [cancel, setCancel] = React.useState(false);\n  const [showModal, setShowModal] = useClusterModal();\n\n  if (cancel && (!show || showModal)) {\n    setCancel(false);\n  }\n\n  React.useEffect(() => {\n    if (wallet !== undefined || !show || showModal) return;\n\n    const timeoutId = window.setTimeout(() => {\n      setCancel(true);\n    }, 10000);\n\n    return () => clearTimeout(timeoutId);\n  });\n\n  const renderContent = () => {\n    if (!show) return null;\n    const loadingText = wallet ? \"Fetching wallet\" : \"Loading\";\n    return (\n      <div className=\"modal-dialog modal-dialog-centered lift justify-content-center\">\n        <div className=\"modal-content w-auto\">\n          <div className=\"py-4 pl-4 pr-5\">\n            <div className=\"d-flex align-items-center justify-content-center\">\n              <span className=\"spinner-grow spinner-grow-sm mr-3\"></span>\n              <h2 className=\"mb-0\">{!cancel ? loadingText : \"Retrying\"}...</h2>\n            </div>\n          </div>\n          {cancel && (\n            <div className=\"p-4 border-top-dark\">\n              <span onClick={() => setShowModal(true)} className=\"btn btn-info\">\n                Try another cluster\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className={`modal fade${show ? \" show\" : \"\"}`}>{renderContent()}</div>\n  );\n}\n","import React from \"react\";\nimport { Config, AccountsConfig } from \"./config\";\nimport { useServer } from \"providers/server\";\nimport { useBalance } from \"providers/rpc/balance\";\nimport { fetchWithRetry } from \"./request\";\nimport { Account, Connection } from \"@solana/web3.js\";\nimport { usePayerState } from \"providers/wallet\";\n\nexport enum ConfigStatus {\n  Initialized,\n  Fetching,\n  Ready,\n  Failure,\n}\n\ninterface State {\n  status: ConfigStatus;\n  config?: Config;\n  connection?: Connection;\n  accounts?: AccountsConfig;\n}\n\ninterface Initialized {\n  status: ConfigStatus.Initialized;\n  config: Config;\n}\n\ninterface Fetching {\n  status: ConfigStatus.Fetching;\n}\n\ninterface Ready {\n  status: ConfigStatus.Ready;\n  accounts: AccountsConfig;\n}\n\ninterface Failure {\n  status: ConfigStatus.Failure;\n  config?: undefined;\n  accounts?: undefined;\n}\n\nexport type Action = Initialized | Fetching | Ready | Failure;\nexport type Dispatch = (action: Action) => void;\n\nfunction configReducer(state: State, action: Action): State {\n  switch (action.status) {\n    case ConfigStatus.Ready:\n    case ConfigStatus.Initialized: {\n      return { ...state, ...action };\n    }\n    case ConfigStatus.Failure: {\n      if (state.status === ConfigStatus.Fetching) {\n        return { ...state, ...action };\n      } else {\n        return state;\n      }\n    }\n    case ConfigStatus.Fetching: {\n      return {\n        ...state,\n        ...action,\n        accounts: undefined,\n      };\n    }\n  }\n}\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst RefContext = React.createContext<\n  React.MutableRefObject<string> | undefined\n>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ApiProviderProps = { children: React.ReactNode };\nexport function HttpProvider({ children }: ApiProviderProps) {\n  const [state, dispatch] = React.useReducer(configReducer, {\n    status: ConfigStatus.Fetching,\n  });\n\n  const { httpUrl } = useServer();\n  const httpUrlRef = React.useRef(httpUrl);\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    initConfig(dispatch, httpUrlRef);\n  }, [httpUrl]);\n\n  const config = state.config;\n  const paymentRequired = config?.paymentRequired;\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    if (paymentRequired !== false) return;\n    refreshAccounts(dispatch, httpUrlRef, undefined);\n  }, [httpUrl, paymentRequired]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <RefContext.Provider value={httpUrlRef}>{children}</RefContext.Provider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function initConfig(\n  dispatch: Dispatch,\n  httpUrlRef: React.MutableRefObject<string>\n): Promise<void> {\n  return fetchWithRetry(dispatch, httpUrlRef, { route: \"init\" });\n}\n\nasync function refreshAccounts(\n  dispatch: Dispatch,\n  httpUrlRef: React.MutableRefObject<string>,\n  paymentAccount: Account | undefined\n): Promise<void> {\n  return fetchWithRetry(dispatch, httpUrlRef, {\n    route: \"accounts\",\n    paymentAccount,\n  });\n}\n\nexport function useAccounts() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useAccounts must be used within a ApiProvider`);\n  }\n  return context.accounts;\n}\n\nexport function useConfig() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useConfig must be used within a ApiProvider`);\n  }\n  return context.config;\n}\n\nexport function useIsFetching() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useIsFetching must be used within a ApiProvider`);\n  }\n  return context.status === ConfigStatus.Fetching;\n}\n\nexport function useClusterParam(): string {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useClusterParam must be used within a ApiProvider`);\n  }\n  const cluster = context?.config?.cluster;\n  if (cluster && cluster !== \"mainnet-beta\") {\n    return `cluster=${cluster}`;\n  } else {\n    return \"\";\n  }\n}\n\nexport function useClearAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useClearAccounts must be used within a ApiProvider`);\n  }\n\n  return React.useCallback(() => {\n    dispatch({ status: ConfigStatus.Fetching });\n    dispatch({ status: ConfigStatus.Failure });\n  }, [dispatch]);\n}\n\nexport function useRefreshAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n  const httpUrlRef = React.useContext(RefContext);\n  if (!httpUrlRef) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n  const config = useConfig();\n  const [payer] = usePayerState();\n  const paymentRequired = config?.paymentRequired;\n  const balance = useBalance();\n  const cost = config?.gameCost;\n  return React.useCallback(() => {\n    if (paymentRequired === undefined || cost === undefined) return;\n    if (paymentRequired) {\n      if (!payer || balance === \"loading\" || balance < cost) {\n        dispatch({ status: ConfigStatus.Fetching });\n        dispatch({ status: ConfigStatus.Failure });\n        return;\n      }\n      refreshAccounts(dispatch, httpUrlRef, payer);\n    } else {\n      refreshAccounts(dispatch, httpUrlRef, undefined);\n    }\n  }, [httpUrlRef, dispatch, payer, paymentRequired, balance, cost]);\n}\n","import { configFromInit, configFromAccounts } from \"./config\";\nimport { sleep, reportError } from \"utils\";\nimport { Action, Dispatch, ConfigStatus } from \"./index\";\nimport { Account } from \"@solana/web3.js\";\n\nconst SPLIT = ((): number | undefined => {\n  const split = parseInt(\n    new URLSearchParams(window.location.search).get(\"split\") || \"\"\n  );\n  if (!isNaN(split)) {\n    return split;\n  }\n})();\n\ntype InitRequest = {\n  route: \"init\";\n};\n\ntype AccountsRequest = {\n  route: \"accounts\";\n  paymentAccount: Account | undefined;\n};\n\ntype Request = AccountsRequest | InitRequest;\n\nexport async function fetchWithRetry(\n  dispatch: Dispatch,\n  httpUrlRef: React.MutableRefObject<string>,\n  request: Request\n) {\n  dispatch({\n    status: ConfigStatus.Fetching,\n  });\n\n  const httpUrl = httpUrlRef.current;\n  while (httpUrl === httpUrlRef.current) {\n    let response: Action | \"retry\";\n    switch (request.route) {\n      case \"accounts\": {\n        response = await fetchAccounts(httpUrl, request.paymentAccount);\n        break;\n      }\n      case \"init\": {\n        response = await fetchInit(httpUrl);\n      }\n    }\n\n    if (httpUrl !== httpUrlRef.current) break;\n    if (response === \"retry\") {\n      await sleep(2000);\n    } else {\n      dispatch(response);\n      break;\n    }\n  }\n}\n\nasync function fetchInit(httpUrl: string): Promise<Action | \"retry\"> {\n  try {\n    const body = JSON.stringify({ split: SPLIT });\n    const response = await fetch(\n      new Request(httpUrl + \"/init\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body,\n      })\n    );\n    const data = await response.json();\n    if (!(\"clusterUrl\" in data) || !(\"programId\" in data)) {\n      throw new Error(\"Received invalid response\");\n    }\n\n    return {\n      status: ConfigStatus.Initialized,\n      config: configFromInit(data),\n    };\n  } catch (err) {\n    reportError(err, \"/init failed\");\n    return \"retry\";\n  }\n}\n\nasync function fetchAccounts(\n  httpUrl: string,\n  paymentAccount: Account | undefined\n): Promise<Action | \"retry\"> {\n  type RefreshData = {\n    split?: number;\n    paymentKey?: string;\n  };\n\n  const postData: RefreshData = {};\n  if (SPLIT) {\n    postData.split = SPLIT;\n  }\n  if (paymentAccount) {\n    postData.paymentKey = Buffer.from(paymentAccount.secretKey).toString(\n      \"base64\"\n    );\n  }\n\n  try {\n    const body = JSON.stringify(postData);\n    const response = await fetch(\n      new Request(httpUrl + \"/accounts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body,\n      })\n    );\n\n    if (response.status === 400) {\n      return { status: ConfigStatus.Failure, accounts: undefined };\n    } else if (response.status === 500) {\n      const error = await response.text();\n      throw new Error(error);\n    } else {\n      const data = await response.json();\n      if (\n        !(\"programAccounts\" in data) ||\n        !(\"feeAccounts\" in data) ||\n        !(\"accountCapacity\" in data)\n      ) {\n        throw new Error(\"Received invalid response\");\n      }\n\n      return { status: ConfigStatus.Ready, accounts: configFromAccounts(data) };\n    }\n  } catch (err) {\n    reportError(err, \"/accounts failed\");\n    return \"retry\";\n  }\n}\n","import { Account, PublicKey, Cluster } from \"@solana/web3.js\";\n\nexport interface Config {\n  cluster: Cluster | undefined;\n  rpcUrl: string;\n  programId: PublicKey;\n  gameCost: number;\n  paymentRequired: boolean;\n}\n\nexport interface AccountsConfig {\n  programAccounts: PublicKey[];\n  feeAccounts: Account[];\n  accountCapacity: number;\n}\n\nfunction stringToCluster(str: string | undefined): Cluster | undefined {\n  switch (str) {\n    case \"devnet\":\n    case \"testnet\":\n    case \"mainnet-beta\": {\n      return str;\n    }\n    default:\n      return undefined;\n  }\n}\n\nexport function configFromInit(response: any): Config {\n  const cluster = stringToCluster(response.cluster);\n  return {\n    cluster,\n    rpcUrl: response.clusterUrl,\n    programId: new PublicKey(response.programId),\n    // Add 1 lamport because if the account is left with 0 lamports,\n    // we won't get a notification for it\n    gameCost: response.gameCost + 1,\n    paymentRequired: response.paymentRequired,\n  };\n}\n\nexport function configFromAccounts(response: any): AccountsConfig {\n  return {\n    programAccounts: response.programAccounts.map(\n      (account: string) => new PublicKey(account)\n    ),\n    accountCapacity: response.accountCapacity,\n    feeAccounts: response.feeAccounts.map(\n      (key: string) => new Account(Buffer.from(key, \"base64\"))\n    ),\n  };\n}\n","import React from \"react\";\nimport { useHistory, useRouteMatch, useLocation } from \"react-router-dom\";\nimport {\n  useConfig,\n  useRefreshAccounts,\n  useAccounts,\n  useIsFetching,\n  useClearAccounts,\n} from \"providers/server/http\";\nimport { useSocket } from \"providers/server/socket\";\nimport { useBlockhash } from \"providers/rpc/blockhash\";\nimport { useDispatch } from \"providers/transactions\";\nimport { useConnection } from \"./rpc\";\nimport { DEBUG_MODE } from \"./transactions/confirmed\";\n\nexport const COUNTDOWN_SECS = DEBUG_MODE ? 1500 : 15;\n\ntype GameState = \"loading\" | \"payment\" | \"play\" | \"reset\";\nconst GameStateContext = React.createContext<GameState | undefined>(undefined);\n\ntype SetCountdown = React.Dispatch<React.SetStateAction<number | undefined>>;\ntype CountdownState = [number | undefined, SetCountdown];\nconst CountdownContext = React.createContext<CountdownState | undefined>(\n  undefined\n);\n\ntype Props = { children: React.ReactNode };\nexport function GameStateProvider({ children }: Props) {\n  const [countdown, setCountdown] = React.useState<number>();\n  const [gameState, setGameState] = React.useState<GameState>(\"loading\");\n  const resultsTimerRef = React.useRef<NodeJS.Timer>();\n  const connection = useConnection();\n  const history = useHistory();\n  const location = useLocation();\n  const blockhash = useBlockhash();\n  const config = useConfig();\n  const accounts = useAccounts();\n  const socket = useSocket();\n  const isResultsRoute = !!useRouteMatch(\"/results\");\n  const isGameRoute = !!useRouteMatch(\"/game\");\n  const isFetching = useIsFetching();\n\n  React.useEffect(() => {\n    setCountdown(undefined);\n  }, [isGameRoute, connection]);\n\n  React.useEffect(() => {\n    const paymentRequired = config?.paymentRequired === true;\n    const needsPayment = paymentRequired && !isFetching && !accounts;\n    const doneLoading =\n      blockhash && config && socket && (needsPayment || accounts);\n    if (!doneLoading) {\n      setGameState(\"loading\");\n    } else if (needsPayment) {\n      setGameState(\"payment\");\n    } else {\n      setGameState((gameState) => {\n        if (gameState === \"loading\" || gameState === \"payment\") {\n          return isResultsRoute ? \"reset\" : \"play\";\n        }\n        return gameState;\n      });\n    }\n  }, [isResultsRoute, isFetching, blockhash, config, accounts, socket]);\n\n  React.useEffect(() => {\n    if (countdown !== undefined) {\n      if (!resultsTimerRef.current) {\n        resultsTimerRef.current = setTimeout(() => {\n          setGameState(\"reset\");\n          history.push({ ...location, pathname: \"/results\" });\n        }, COUNTDOWN_SECS * 1000);\n      }\n    } else if (resultsTimerRef.current) {\n      clearTimeout(resultsTimerRef.current);\n      resultsTimerRef.current = undefined;\n    }\n  }, [countdown, history, location]);\n\n  const countdownState: CountdownState = React.useMemo(() => {\n    return [countdown, setCountdown];\n  }, [countdown]);\n\n  return (\n    <GameStateContext.Provider value={gameState}>\n      <CountdownContext.Provider value={countdownState}>\n        {children}\n      </CountdownContext.Provider>\n    </GameStateContext.Provider>\n  );\n}\n\nexport function useGameState() {\n  const context = React.useContext(GameStateContext);\n  if (!context) {\n    throw new Error(`useGameState must be used within a GameStateProvider`);\n  }\n  return context;\n}\n\nexport function useCountdown() {\n  const context = React.useContext(CountdownContext);\n  if (!context) {\n    throw new Error(`useCountdown must be used within a GameStateProvider`);\n  }\n  return context;\n}\n\nexport function useResetGame() {\n  const refreshAccounts = useRefreshAccounts();\n  const paymentRequired = useConfig()?.paymentRequired;\n  const clearAccounts = useClearAccounts();\n  const history = useHistory();\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  return React.useCallback(() => {\n    dispatch({ type: \"reset\" });\n    history.push({ ...location, pathname: \"/game\" });\n    if (paymentRequired) {\n      clearAccounts();\n    } else {\n      refreshAccounts();\n    }\n  }, [\n    refreshAccounts,\n    paymentRequired,\n    clearAccounts,\n    history,\n    location,\n    dispatch,\n  ]);\n}\n","import * as React from \"react\";\nimport { useCreatedCount } from \"./index\";\n\nconst TPS_REFRESH_MS = 100;\nconst TPS_LOOK_BACK = 10;\n\nexport const TpsContext = React.createContext<number | undefined>(undefined);\ntype ProviderProps = { children: React.ReactNode };\nexport function TpsProvider({ children }: ProviderProps) {\n  const [tps, setTps] = React.useState(0);\n  const createdCount = useCreatedCount();\n  const createdCountRef = React.useRef(0);\n  createdCountRef.current = createdCount;\n\n  React.useEffect(() => {\n    const recentCounts: number[] = [];\n    const timerId = setInterval(() => {\n      if (createdCountRef.current === 0) {\n        recentCounts.splice(0);\n        setTps(0);\n        return;\n      }\n\n      recentCounts.push(createdCountRef.current);\n      while (recentCounts.length - 1 > TPS_LOOK_BACK) {\n        recentCounts.shift();\n      }\n\n      const ticksElapsed = recentCounts.length - 1;\n      if (ticksElapsed <= 0) return;\n\n      const oldTxCount = recentCounts[0];\n      const latestTxCount = recentCounts[ticksElapsed];\n      const tps =\n        (latestTxCount - oldTxCount) / ((TPS_REFRESH_MS / 1000) * ticksElapsed);\n      setTps(Math.floor(tps));\n    }, TPS_REFRESH_MS);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  return <TpsContext.Provider value={tps}>{children}</TpsContext.Provider>;\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/create-transaction-worker-script.45dfeaf1.worker.js\");\n}\n","// eslint-disable-next-line import/no-webpack-loader-syntax\nimport CreateTransactionWorker from \"worker-loader!./create-transaction-worker-script\";\n\nimport { Blockhash } from \"@solana/web3.js\";\n\nexport interface CreateTransactionMessage {\n  trackingId: number;\n  blockhash: Blockhash;\n  programId: string;\n  bitId: number;\n  feeAccountSecretKey: Buffer;\n  programDataAccount: string;\n}\n\nexport interface CreateTransactionResponseMessage {\n  trackingId: number;\n  signature: Buffer;\n  serializedTransaction: Buffer;\n}\n\nexport interface CreateTransactionErrorMessage {\n  trackingId: string;\n  error: Error;\n}\n\nexport class CreateTransactionRPC {\n  private worker: CreateTransactionWorker;\n\n  private callbacks: { [trackingId: string]: Function[] } = {};\n\n  constructor() {\n    this.worker = new CreateTransactionWorker();\n    this.worker.onmessage = this.handleMessages.bind(this);\n  }\n\n  handleMessages(event: MessageEvent) {\n    let message = event.data;\n\n    if (message.trackingId in this.callbacks) {\n      let callbacks = this.callbacks[message.trackingId];\n      delete this.callbacks[message.trackingId];\n\n      if (\"error\" in message) {\n        callbacks[1](message.error);\n        return;\n      }\n\n      callbacks[0](message);\n    }\n  }\n\n  createTransaction(\n    message: CreateTransactionMessage\n  ): Promise<CreateTransactionResponseMessage> {\n    return new Promise((resolve, reject) => {\n      this.callbacks[message.trackingId] = [resolve, reject];\n      this.worker.postMessage(message);\n    });\n  }\n}\n","import * as React from \"react\";\nimport { Blockhash, PublicKey, Connection } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport {\n  Dispatch,\n  getCommitmentName,\n  PendingTransaction,\n  TransactionDetails,\n  useDispatch,\n} from \"./index\";\nimport { AccountsConfig } from \"../server/http/config\";\nimport {\n  CreateTransactionRPC,\n  CreateTransactionResponseMessage,\n} from \"../../workers/create-transaction-rpc\";\nimport { useConfig, useAccounts } from \"providers/server/http\";\nimport { useBlockhash } from \"providers/rpc/blockhash\";\nimport { useSocket } from \"providers/server/socket\";\nimport { reportError } from \"utils\";\nimport { useConnection } from \"providers/rpc\";\nimport { DEBUG_MODE, subscribedCommitments } from \"./confirmed\";\nimport { useTargetSlotRef } from \"providers/slot\";\n\nconst SEND_TIMEOUT_MS = 45000;\nconst RETRY_INTERVAL_MS = 500;\n\nconst workerRPC = new CreateTransactionRPC();\nexport const CreateTxContext = React.createContext<\n  React.MutableRefObject<() => void | undefined> | undefined\n>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function CreateTxProvider({ children }: ProviderProps) {\n  const createTx = React.useRef(() => {});\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef<number>(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts?.programAccounts[0].toBase58();\n\n  // Reset counter when program data accounts are refreshed\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n\n  const connection = useConnection();\n  const blockhash = useBlockhash();\n  const dispatch = useDispatch();\n  const socket = useSocket();\n  React.useEffect(() => {\n    createTx.current = () => {\n      if (\n        !connection ||\n        !blockhash ||\n        !socket ||\n        !config ||\n        !accounts ||\n        !targetSlotRef.current\n      )\n        return;\n      const id = idCounter.current;\n      if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n        idCounter.current++;\n        createTransaction(\n          connection,\n          blockhash,\n          targetSlotRef.current,\n          config.programId,\n          accounts,\n          id,\n          dispatch,\n          socket\n        );\n      } else {\n        reportError(\n          new Error(\"Account capacity exceeded\"),\n          \"failed to create transaction\"\n        );\n      }\n    };\n  }, [\n    blockhash,\n    connection,\n    socket,\n    config,\n    accounts,\n    dispatch,\n    targetSlotRef,\n  ]);\n\n  return (\n    <CreateTxContext.Provider value={createTx}>\n      {children}\n    </CreateTxContext.Provider>\n  );\n}\n\nexport function createTransaction(\n  connection: Connection,\n  blockhash: Blockhash,\n  targetSlot: number,\n  programId: PublicKey,\n  accounts: AccountsConfig,\n  trackingId: number,\n  dispatch: Dispatch,\n  socket: WebSocket\n) {\n  const { feeAccounts, programAccounts } = accounts;\n\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n\n  workerRPC\n    .createTransaction({\n      trackingId: trackingId,\n      blockhash: blockhash,\n      programId: programId.toBase58(),\n      programDataAccount: programDataAccount.toBase58(),\n      bitId: bitId,\n      feeAccountSecretKey: feeAccount.secretKey,\n    })\n    .then(\n      (response: CreateTransactionResponseMessage) => {\n        const { signature, serializedTransaction } = response;\n\n        socket.send(serializedTransaction);\n\n        const pendingTransaction: PendingTransaction = { targetSlot };\n        pendingTransaction.timeoutId = window.setTimeout(() => {\n          dispatch({ type: \"timeout\", trackingId });\n        }, SEND_TIMEOUT_MS);\n\n        const encodedSignature = bs58.encode(signature);\n        const details: TransactionDetails = {\n          id: bitId,\n          feeAccount: feeAccount.publicKey,\n          programAccount: programDataAccount,\n          signature: encodedSignature,\n        };\n\n        dispatch({\n          type: \"new\",\n          details,\n          trackingId,\n          pendingTransaction,\n        });\n\n        if (DEBUG_MODE) {\n          (connection as any).onTransaction(\n            encodedSignature,\n            (notification: any, context: any) => {\n              if (notification.type === \"subscribedSignature\") {\n                dispatch({\n                  type: \"subscribed\",\n                  timestamp: notification.timestamp,\n                  trackingId,\n                  slot: context.slot,\n                });\n              } else if (notification.type === \"receivedSignature\") {\n                console.log(encodedSignature, notification, context);\n                dispatch({\n                  type: \"received\",\n                  timestamp: notification.timestamp,\n                  trackingId,\n                  slot: context.slot,\n                });\n              }\n            },\n            {\n              commitment: \"max\",\n              enableReceivedNotification: true,\n            }\n          );\n\n          const commitments = subscribedCommitments();\n          commitments.forEach((commitment) => {\n            (connection as any).onTransaction(\n              encodedSignature,\n              (notification: any, context: any) => {\n                if (notification.type === \"processedSignature\") {\n                  const commitmentName = getCommitmentName(commitment);\n                  dispatch({\n                    type: \"track\",\n                    commitmentName,\n                    trackingId,\n                    slot: context.slot,\n                    timestamp: notification.timestamp,\n                  });\n                }\n              },\n              { commitment }\n            );\n          });\n        }\n\n        const retry = new URLSearchParams(window.location.search).get(\"retry\");\n        if (retry === null || retry !== \"disabled\") {\n          pendingTransaction.retryId = window.setInterval(() => {\n            if (socket.readyState === WebSocket.OPEN) {\n              socket.send(serializedTransaction);\n            }\n          }, RETRY_INTERVAL_MS);\n        }\n      },\n      (error: any) => {\n        console.error(error);\n      }\n    );\n}\n","import * as React from \"react\";\nimport { useThrottle } from \"@react-hook/throttle\";\nimport { TransactionSignature, PublicKey } from \"@solana/web3.js\";\nimport { ConfirmedHelper, DEBUG_MODE } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { CreateTxContext, CreateTxProvider } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useConnection } from \"providers/rpc\";\nimport { useSlotTiming } from \"providers/slot\";\n\nexport type ReceivedRecord = {\n  timestamp: number;\n  slot: number;\n};\n\nexport type PendingTransaction = {\n  targetSlot: number;\n  retryId?: number;\n  timeoutId?: number;\n};\n\nexport type TransactionDetails = {\n  id: number;\n  feeAccount: PublicKey;\n  programAccount: PublicKey;\n  signature: TransactionSignature;\n};\n\ntype Timing = {\n  subscribed?: number;\n  processed?: number;\n  confirmed?: number;\n};\n\ntype TimeoutState = {\n  status: \"timeout\";\n  details: TransactionDetails;\n};\n\ntype PendingState = {\n  status: \"pending\";\n  details: TransactionDetails;\n  received: Array<ReceivedRecord>;\n  pending: PendingTransaction;\n  timing: Timing;\n};\n\ntype SuccessState = {\n  status: \"success\";\n  details: TransactionDetails;\n  received: Array<ReceivedRecord>;\n  slot: {\n    target: number;\n    landed?: number;\n  };\n  timing: Timing;\n  pending?: PendingTransaction;\n};\n\nexport const COMMITMENT_PARAM = ((): TrackedCommitment => {\n  const commitment = new URLSearchParams(window.location.search).get(\n    \"commitment\"\n  );\n  switch (commitment) {\n    case \"recent\": {\n      return commitment;\n    }\n    default: {\n      return \"singleGossip\";\n    }\n  }\n})();\n\nexport const getCommitmentName = (\n  commitment: TrackedCommitment\n): CommitmentName => {\n  if (commitment === \"singleGossip\") {\n    return \"confirmed\";\n  } else {\n    return \"processed\";\n  }\n};\n\nexport type CommitmentName = \"processed\" | \"confirmed\";\n\nexport type TrackedCommitment = \"singleGossip\" | \"recent\";\n\nexport type TransactionStatus = \"success\" | \"timeout\" | \"pending\";\n\nexport type TransactionState = SuccessState | TimeoutState | PendingState;\n\ntype NewTransaction = {\n  type: \"new\";\n  trackingId: number;\n  details: TransactionDetails;\n  pendingTransaction: PendingTransaction;\n};\n\ntype UpdateIds = {\n  type: \"update\";\n  activeIdPartition: {\n    ids: Set<number>;\n    partition: number;\n    partitionCount: number;\n  };\n  commitment: TrackedCommitment;\n  receivedAt: number;\n  estimatedSlot: number;\n};\n\ntype TrackTransaction = {\n  type: \"track\";\n  commitmentName: CommitmentName;\n  trackingId: number;\n  slot: number;\n  timestamp: number;\n};\n\ntype TimeoutTransaction = {\n  type: \"timeout\";\n  trackingId: number;\n};\n\ntype ResetState = {\n  type: \"reset\";\n};\n\ntype RecordRoot = {\n  type: \"root\";\n  root: number;\n};\n\ntype SignatureReceived = {\n  type: \"received\";\n  timestamp: number;\n  trackingId: number;\n  slot: number;\n};\n\ntype SignatureSubscribed = {\n  type: \"subscribed\";\n  timestamp: number;\n  trackingId: number;\n  slot: number;\n};\n\ntype SignatureLanded = {\n  type: \"landed\";\n  signatures: TransactionSignature[];\n  slots: number[];\n};\n\ntype Action =\n  | NewTransaction\n  | UpdateIds\n  | TimeoutTransaction\n  | ResetState\n  | RecordRoot\n  | TrackTransaction\n  | SignatureReceived\n  | SignatureSubscribed\n  | SignatureLanded;\n\ntype State = TransactionState[];\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"new\": {\n      const { details, pendingTransaction } = action;\n      return [\n        ...state,\n        {\n          details,\n          status: \"pending\",\n          received: [],\n          pending: pendingTransaction,\n          timing: {},\n        },\n      ];\n    }\n\n    case \"subscribed\": {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const transaction = state[trackingId];\n      return state.map((tx) => {\n        if (tx.details.signature === transaction.details.signature) {\n          if (tx.status !== \"timeout\") {\n            return {\n              ...tx,\n              timing: {\n                ...tx.timing,\n                subscribed: action.timestamp,\n              },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"received\": {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const transaction = state[trackingId];\n      return state.map((tx) => {\n        if (tx.details.signature === transaction.details.signature) {\n          if (tx.status !== \"timeout\") {\n            return {\n              ...tx,\n              received: [\n                ...tx.received,\n                {\n                  slot: action.slot,\n                  timestamp: action.timestamp,\n                },\n              ],\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"landed\": {\n      return state.map((tx) => {\n        if (tx.status === \"success\") {\n          const index = action.signatures.findIndex(\n            (val) => val === tx.details.signature\n          );\n          if (index >= 0) {\n            return {\n              ...tx,\n              slot: {\n                ...tx.slot,\n                landed: action.slots[index],\n              },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"track\": {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const transaction = state[trackingId];\n\n      return state.map((tx) => {\n        if (tx.details.signature === transaction.details.signature) {\n          if (tx.status === \"pending\") {\n            return {\n              status: \"success\",\n              details: tx.details,\n              received: tx.received,\n              slot: {\n                target: tx.pending.targetSlot,\n              },\n              timing: {\n                ...tx.timing,\n                [action.commitmentName]: action.timestamp,\n              },\n              pending: tx.pending,\n            };\n          } else if (tx.status === \"success\") {\n            return {\n              ...tx,\n              timing: {\n                ...tx.timing,\n                [action.commitmentName]: action.timestamp,\n              },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"timeout\": {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const timeout = state[trackingId];\n      if (timeout.status !== \"pending\") return state;\n      clearInterval(timeout.pending.retryId);\n\n      return state.map((tx) => {\n        if (tx.details.signature === timeout.details.signature) {\n          return {\n            status: \"timeout\",\n            details: tx.details,\n          };\n        } else {\n          return tx;\n        }\n      });\n    }\n\n    case \"update\": {\n      const { ids, partition, partitionCount } = action.activeIdPartition;\n      return state.map((tx, trackingId) => {\n        if (trackingId % partitionCount !== partition) return tx;\n        const id = Math.floor(trackingId / partitionCount);\n        if (tx.status === \"pending\" && ids.has(id)) {\n          // Optimistically confirmed, no need to continue retry\n          if (action.commitment === \"singleGossip\") {\n            clearInterval(tx.pending.retryId);\n            clearTimeout(tx.pending.timeoutId);\n          }\n\n          const commitmentName = getCommitmentName(action.commitment);\n          return {\n            status: \"success\",\n            details: tx.details,\n            received: tx.received,\n            slot: {\n              target: tx.pending.targetSlot,\n              landed: action.estimatedSlot,\n            },\n            timing: {\n              ...tx.timing,\n              [commitmentName]: timeElapsed(\n                tx.timing.subscribed,\n                action.receivedAt\n              ),\n            },\n            pending: tx.pending,\n          };\n        } else if (tx.status === \"success\") {\n          if (ids.has(id)) {\n            const commitmentName = getCommitmentName(action.commitment);\n            // Already recorded conf time\n            if (tx.timing[commitmentName] !== undefined) {\n              return tx;\n            }\n\n            // Optimistically confirmed, no need to continue retry\n            if (tx.pending && action.commitment === \"singleGossip\") {\n              clearInterval(tx.pending.retryId);\n              clearTimeout(tx.pending.timeoutId);\n            }\n\n            return {\n              ...tx,\n              timing: {\n                ...tx.timing,\n                [commitmentName]: timeElapsed(\n                  tx.timing.subscribed,\n                  action.receivedAt\n                ),\n              },\n            };\n          } else if (\n            action.commitment === \"recent\" &&\n            tx.pending &&\n            !ids.has(id)\n          ) {\n            // Don't revert to pending state if we already received timing info for other commitments\n            if (tx.timing[\"confirmed\"] !== undefined) {\n              return {\n                ...tx,\n                timing: {\n                  ...tx.timing,\n                  processed: undefined,\n                },\n              };\n            }\n\n            // Revert to pending state because the previous notification likely came from a fork\n            return {\n              status: \"pending\",\n              details: tx.details,\n              received: tx.received,\n              pending: { ...tx.pending },\n              timing: tx.timing,\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"reset\": {\n      state.forEach((tx) => {\n        if (tx.status === \"pending\") {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        } else if (tx.status === \"success\" && tx.pending) {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        }\n      });\n      return [];\n    }\n\n    case \"root\": {\n      const foundRooted = state.find((tx) => {\n        if (tx.status === \"success\" && tx.pending) {\n          return tx.slot.landed === action.root;\n        } else {\n          return false;\n        }\n      });\n\n      // Avoid re-allocating state map\n      if (!foundRooted) return state;\n\n      return state.map((tx) => {\n        if (tx.status === \"success\" && tx.pending) {\n          if (tx.slot.landed === action.root) {\n            clearInterval(tx.pending.retryId);\n            clearTimeout(tx.pending.timeoutId);\n            return {\n              ...tx,\n              pending: undefined,\n            };\n          }\n        }\n        return tx;\n      });\n    }\n  }\n}\n\nexport type Dispatch = (action: Action) => void;\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function TransactionsProvider({ children }: ProviderProps) {\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n  const stateRef = React.useRef(state);\n\n  React.useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n\n  React.useEffect(() => {\n    dispatch({\n      type: \"reset\",\n    });\n\n    if (connection === undefined) return;\n    const rootSubscription = connection.onRootChange((root) => {\n      dispatch({ type: \"root\", root });\n    });\n\n    // Poll for signature statuses to determine which slot a tx landed in\n    const intervalId = DEBUG_MODE\n      ? setInterval(async () => {\n          const fetchStatuses: string[] = [];\n          stateRef.current.forEach((tx) => {\n            if (tx.status === \"success\" && tx.slot.landed === undefined) {\n              fetchStatuses.push(tx.details.signature);\n            }\n          });\n\n          if (fetchStatuses.length === 0) return;\n\n          const slots: number[] = [];\n          const signatures: TransactionSignature[] = [];\n          const statuses = (\n            await connection.getSignatureStatuses(fetchStatuses)\n          ).value;\n          for (var i = 0; i < statuses.length; i++) {\n            const status = statuses[i];\n            if (status !== null) {\n              slots.push(status.slot);\n              signatures.push(fetchStatuses[i]);\n            }\n          }\n          if (slots.length === 0) return;\n          dispatch({ type: \"landed\", slots, signatures });\n        }, 2000)\n      : undefined;\n\n    return () => {\n      connection.removeRootChangeListener(rootSubscription);\n      intervalId !== undefined && clearInterval(intervalId);\n    };\n  }, [connection]);\n\n  const [throttledState, setThrottledState] = useThrottle(state, 10);\n  React.useEffect(() => {\n    setThrottledState(state);\n  }, [state, setThrottledState]);\n\n  return (\n    <StateContext.Provider value={throttledState}>\n      <DispatchContext.Provider value={dispatch}>\n        <SelectedTxProvider>\n          <CreateTxProvider>\n            <ConfirmedHelper>\n              <TpsProvider>{children}</TpsProvider>\n            </ConfirmedHelper>\n          </CreateTxProvider>\n        </SelectedTxProvider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nfunction timeElapsed(\n  sentAt: number | undefined,\n  receivedAt: number | undefined\n): number | undefined {\n  if (sentAt === undefined || receivedAt === undefined) return;\n  return parseFloat(((receivedAt - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\n\nexport function useTransactions() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useTransactions must be used within a TransactionsProvider`\n    );\n  }\n\n  return state;\n}\n\nexport function useConfirmedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useConfirmedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"success\").length;\n}\n\nexport function useDroppedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useDroppedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"timeout\").length;\n}\n\nexport function useAvgConfirmationTime() {\n  const slotMetrics = useSlotTiming();\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useAvgConfirmationTime must be used within a TransactionsProvider`\n    );\n  }\n\n  const confirmedTimes = state.reduce((confirmedTimes: number[], tx) => {\n    if (tx.status === \"success\") {\n      const subscribed = tx.timing.subscribed;\n      if (subscribed !== undefined && tx.slot.landed !== undefined) {\n        const slotTiming = slotMetrics.current.get(tx.slot.landed);\n        const confirmed = slotTiming?.confirmed;\n        const confTime = timeElapsed(subscribed, confirmed);\n        if (confTime) confirmedTimes.push(confTime);\n      }\n    }\n    return confirmedTimes;\n  }, []);\n\n  const count = confirmedTimes.length;\n  if (count === 0) return 0;\n  const sum = confirmedTimes.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\n\nexport function useCreatedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useCreatedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.length;\n}\n\nexport function useTps() {\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined)\n    throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\n\nexport function useCreateTxRef() {\n  const createTxRef = React.useContext(CreateTxContext);\n  if (createTxRef === undefined)\n    throw new Error(\n      `useCreateTxRef must be used within a TransactionsProvider`\n    );\n  return createTxRef;\n}\n","import React from \"react\";\nimport { Cluster } from \"@solana/web3.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { isLocalHost } from \"../../utils\";\nimport { HttpProvider } from \"./http\";\nimport { SocketProvider } from \"./socket\";\n\ntype Server = Cluster | \"custom\";\nexport const DEFAULT_SERVER = isLocalHost() ? \"custom\" : \"mainnet-beta\";\nexport const SERVERS: Server[] = isLocalHost()\n  ? [\"custom\"]\n  : [\"mainnet-beta\", \"testnet\", \"devnet\", \"custom\"];\n\nconst DEFAULT_CUSTOM_URL = `http://${window.location.hostname}:${\n  process.env.PORT || 8080\n}`;\n\nexport function serverName(server: Server): string {\n  switch (server) {\n    case \"mainnet-beta\":\n      return \"Mainnet Beta\";\n    case \"testnet\":\n      return \"Testnet\";\n    case \"devnet\":\n      return \"Devnet\";\n    case \"custom\":\n      return \"Custom\";\n  }\n}\n\nfunction parseQuery(query: URLSearchParams): Server {\n  const clusterParam = query.get(\"cluster\");\n  switch (clusterParam) {\n    case \"devnet\":\n      return \"devnet\";\n    case \"testnet\":\n      return \"testnet\";\n    case \"mainnet-beta\":\n      return \"mainnet-beta\";\n    case \"custom\":\n      return \"custom\";\n    default:\n      return DEFAULT_SERVER;\n  }\n}\n\ntype SetShowModal = React.Dispatch<React.SetStateAction<boolean>>;\ntype ModalState = [boolean, SetShowModal];\nconst ModalContext = React.createContext<ModalState | undefined>(undefined);\ntype SetCustomUrl = React.Dispatch<React.SetStateAction<string>>;\ntype SetServer = React.Dispatch<React.SetStateAction<Server>>;\ntype ServerState = {\n  server: Server;\n  setServer: SetServer;\n  customUrl: string;\n  setCustomUrl: SetCustomUrl;\n};\nconst ServerContext = React.createContext<ServerState | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function ServerProvider({ children }: ProviderProps) {\n  const query = new URLSearchParams(useLocation().search);\n  const serverParam = parseQuery(query);\n  const [server, setServer] = React.useState<Server>(serverParam);\n  const [customUrl, setCustomUrl] = React.useState<string>(DEFAULT_CUSTOM_URL);\n  const [showModal, setShowModal] = React.useState(false);\n\n  // Update state when query params change\n  React.useEffect(() => {\n    setServer(serverParam);\n  }, [serverParam]);\n\n  const modalState: ModalState = React.useMemo(() => {\n    return [showModal, setShowModal];\n  }, [showModal]);\n\n  return (\n    <ServerContext.Provider\n      value={{ server, setServer, customUrl, setCustomUrl }}\n    >\n      <ModalContext.Provider value={modalState}>\n        <HttpProvider>\n          <SocketProvider>{children}</SocketProvider>\n        </HttpProvider>\n      </ModalContext.Provider>\n    </ServerContext.Provider>\n  );\n}\n\nfunction getServerUrl(server: Server, customUrl: string) {\n  switch (server) {\n    case \"custom\": {\n      return customUrl;\n    }\n    default: {\n      const useHttp = isLocalHost();\n      let slug: string = server;\n      if (server === \"mainnet-beta\") {\n        slug = \"mainnet\";\n      }\n      return `${\n        useHttp ? \"http\" : \"https\"\n      }://break-solana-${slug}.herokuapp.com`;\n    }\n  }\n}\n\nexport function useServer() {\n  const context = React.useContext(ServerContext);\n  if (!context) {\n    throw new Error(`useServer must be used within a ServerProvider`);\n  }\n  const { server, customUrl } = context;\n  const httpUrl = getServerUrl(server, customUrl);\n  const webSocketUrl = httpUrl.replace(\"http\", \"ws\");\n\n  return {\n    server,\n    httpUrl,\n    webSocketUrl,\n    name: serverName(server),\n  };\n}\n\nexport function useCustomUrl(): [string, SetCustomUrl] {\n  const context = React.useContext(ServerContext);\n  if (!context) {\n    throw new Error(`useCustomUrl must be used within a ServerProvider`);\n  }\n  return [context.customUrl, context.setCustomUrl];\n}\n\nexport function useClusterModal() {\n  const context = React.useContext(ModalContext);\n  if (!context) {\n    throw new Error(`useClusterModal must be used within a ServerProvider`);\n  }\n  return context;\n}\n","import * as React from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport nacl from \"tweetnacl\";\nimport NodeDetailsManager from \"@toruslabs/fetch-node-details\";\nimport Torus from \"@toruslabs/torus.js\";\nimport { Account } from \"@solana/web3.js\";\n\nimport { Header } from \"components/Header\";\nimport { LoadingModal } from \"components/LoadingModal\";\nimport { usePayerState } from \"providers/wallet\";\nimport {\n  useGoogleLogin,\n  GoogleLoginResponse,\n  GoogleLoginResponseOffline,\n} from \"react-google-login\";\nimport { PAYMENT_ACCOUNT, reportError } from \"utils\";\nimport { useGameState } from \"providers/game\";\n\nconst origin = window.location.origin;\nconst USE_TORUS_TESTNET = origin === \"http://localhost:3000\";\n\n// Torus is only enabled for authorized domains\nconst ENABLE_TORUS =\n  USE_TORUS_TESTNET ||\n  origin === \"https://break.solana.com\" ||\n  origin === \"https://staging.break.solana.com\";\n\ntype NodeDetails = {\n  torusNodeEndpoints: any;\n  torusIndexes: any;\n  torusNodePub: any;\n};\n\nconst CLIENT_ID =\n  \"785716588020-b5a4fheugq38c23do3p2l73iumfrklnr.apps.googleusercontent.com\";\nconst TEST_CLIENT_ID =\n  \"785716588020-p8kdid1dltqsafcl23g82fb9funikaj7.apps.googleusercontent.com\";\nconst VERIFIER = \"breaksolana-google\";\n\nconst NODE_DETAILS = USE_TORUS_TESTNET\n  ? new NodeDetailsManager({\n      network: \"ropsten\",\n      proxyAddress: \"0x4023d2a0D330bF11426B12C6144Cfb96B7fa6183\",\n    })\n  : (new (NodeDetailsManager as any)() as NodeDetailsManager);\n\ntype GoogleStatus = \"cached\" | \"fresh\";\nexport default function Setup() {\n  const [payer, setPayer] = usePayerState();\n  const gameState = useGameState();\n  const [googleStatus, setGoogleStatus] = React.useState<GoogleStatus>();\n  const [googleResponse, setGoogleResponse] = React.useState<\n    GoogleLoginResponse\n  >();\n  const [nodeDetails, setNodeDetails] = React.useState<NodeDetails>();\n  const history = useHistory();\n  const location = useLocation();\n  const [error, setError] = React.useState(\"\");\n\n  const responseGoogle = React.useCallback(\n    async (response: GoogleLoginResponse | GoogleLoginResponseOffline) => {\n      if (!(\"code\" in response)) {\n        setGoogleResponse(response);\n      }\n    },\n    []\n  );\n\n  const disconnectGoogle = React.useCallback(() => {\n    if (!googleResponse) return;\n    googleResponse.disconnect();\n    setGoogleResponse(undefined);\n  }, [googleResponse]);\n\n  const { signIn, loaded } = useGoogleLogin({\n    clientId: USE_TORUS_TESTNET ? TEST_CLIENT_ID : CLIENT_ID,\n    onSuccess: responseGoogle,\n    onFailure: (err) => {\n      if (!ENABLE_TORUS) return;\n      reportError(err, \"Google login failed\");\n      setGoogleStatus(undefined);\n      setError(\"Failed to login\");\n    },\n    isSignedIn: ENABLE_TORUS,\n  });\n\n  const onSignIn = React.useCallback(\n    (status: GoogleStatus) => {\n      setGoogleStatus(status);\n      if (status === \"fresh\") {\n        disconnectGoogle();\n        signIn();\n      }\n    },\n    [disconnectGoogle, signIn]\n  );\n\n  React.useEffect(() => {\n    if (!ENABLE_TORUS) return;\n\n    let unmounted = false;\n    NODE_DETAILS.getNodeDetails()\n      .then((details) => {\n        !unmounted && setNodeDetails(details);\n      })\n      .catch((err) => {\n        reportError(err, \"Fetching torus node details\");\n      });\n\n    return () => {\n      unmounted = true;\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (!nodeDetails || !googleResponse || !googleStatus) return;\n\n    let unmounted = false;\n    (async () => {\n      const torus = new Torus({});\n      const { torusNodeEndpoints, torusNodePub, torusIndexes } = nodeDetails;\n\n      try {\n        const verifierId = googleResponse.getBasicProfile().getEmail();\n\n        // Creates a new key for the verifierId if it doesn't exist yet\n        await torus.getPublicAddress(\n          torusNodeEndpoints,\n          torusNodePub,\n          { verifier: VERIFIER, verifierId },\n          false\n        );\n\n        let idToken = googleResponse.getAuthResponse().id_token;\n        if (googleStatus === \"cached\") {\n          idToken = (await googleResponse.reloadAuthResponse()).id_token;\n        }\n\n        const { privKey } = await torus.retrieveShares(\n          torusNodeEndpoints,\n          torusIndexes,\n          VERIFIER,\n          { verifier_id: verifierId },\n          idToken\n        );\n        if (unmounted) return;\n        const torusKey = Buffer.from(privKey.toString(), \"hex\");\n        const keyPair = nacl.sign.keyPair.fromSeed(torusKey);\n        setPayer(new Account(keyPair.secretKey));\n      } catch (err) {\n        reportError(err, \"failed to fetch torus key\");\n        setGoogleStatus(undefined);\n        setError(\"Failed to fetch Torus key\");\n      }\n    })();\n\n    return () => {\n      unmounted = true;\n    };\n  }, [nodeDetails, googleResponse, googleStatus, setPayer]);\n\n  React.useEffect(() => {\n    if (gameState !== \"payment\" || payer) {\n      history.push({ ...location, pathname: \"/game\" });\n    }\n  }, [gameState, payer, history, location]);\n\n  const loadingWallet = !!googleResponse;\n  const showWalletSetup = (loaded && !googleStatus) || error || !ENABLE_TORUS;\n  const showLoading = !showWalletSetup;\n  return (\n    <>\n      <div className={`modal z-auto fade${showWalletSetup ? \" show\" : \"\"}`}>\n        <div className=\"modal-dialog modal-dialog-centered\">\n          <div className=\"modal-content\">\n            <div className=\"modal-card card mb-0\">\n              <div className=\"card-header\">\n                <div className=\"flex-shrink-0 flex-basis-auto\">\n                  Select Wallet\n                </div>\n                <div className=\"text-truncate text-warning small ml-5\">\n                  {error}\n                </div>\n              </div>\n\n              <div className=\"card-body\">\n                <ul className=\"list-group list-group-flush list my-n4\">\n                  {googleResponse && (\n                    <li className=\"list-group-item\">\n                      <div className=\"row align-items-center\">\n                        <div className=\"col\">\n                          <h4 className=\"mb-1\">Current wallet</h4>\n                          <p className=\"small mb-0 text-muted\">\n                            Account:{\" \"}\n                            <span className=\"text-primary\">\n                              {googleResponse.getBasicProfile().getEmail()}\n                            </span>\n                          </p>\n                        </div>\n                        <div className=\"col-auto\">\n                          <span\n                            className=\"btn btn-primary\"\n                            onClick={() => onSignIn(\"cached\")}\n                          >\n                            Select\n                          </span>\n                        </div>\n                      </div>\n                    </li>\n                  )}\n\n                  {ENABLE_TORUS && (\n                    <li className=\"list-group-item\">\n                      <div className=\"row align-items-center\">\n                        <div className=\"col\">\n                          <h4 className=\"mb-1\">Recoverable wallet</h4>\n                          <p className=\"small mb-0 text-muted\">\n                            Powered by <a href=\"https://tor.us/\">Torus</a>\n                          </p>\n                        </div>\n                        <div className=\"col-auto\">\n                          <span\n                            className=\"btn btn-white\"\n                            onClick={() => onSignIn(\"fresh\")}\n                          >\n                            <img\n                              height=\"18\"\n                              width=\"18\"\n                              src=\"/google.svg\"\n                              className=\"mt-n1\"\n                              alt=\"Google\"\n                            />\n                          </span>\n                        </div>\n                      </div>\n                    </li>\n                  )}\n\n                  <li className=\"list-group-item\">\n                    <div className=\"row align-items-center\">\n                      <div className=\"col\">\n                        <h4 className=\"mb-1\">Local wallet</h4>\n                        <p className=\"small mb-0 text-muted\">\n                          Saved to browser storage\n                        </p>\n                      </div>\n                      <div className=\"col-auto\">\n                        <span\n                          className=\"btn btn-white\"\n                          onClick={() => {\n                            disconnectGoogle();\n                            setPayer(PAYMENT_ACCOUNT);\n                          }}\n                        >\n                          Select\n                        </span>\n                      </div>\n                    </div>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container min-vh-100 d-flex flex-column\">\n        <Header />\n      </div>\n      <LoadingModal show={showLoading} wallet={loadingWallet} />\n      <Overlay show={showLoading} />\n    </>\n  );\n}\n\nfunction Overlay({ show }: { show: boolean }) {\n  if (show) return <div className=\"modal-backdrop fade show\"></div>;\n  return <div className=\"fade\"></div>;\n}\n","import React from \"react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useConfig } from \"providers/server/http\";\nimport { BlockhashProvider } from \"./blockhash\";\nimport { BalanceProvider } from \"./balance\";\n\ntype SetUrl = (url: string) => void;\ntype State = [string | undefined, SetUrl];\n\ntype ConnectionState = {\n  connection?: Connection;\n};\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst ConnectionContext = React.createContext<ConnectionState | undefined>(\n  undefined\n);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function RpcProvider({ children }: ProviderProps) {\n  const state = React.useState<string>();\n  const [rpcUrl, setRpcUrl] = state;\n\n  // Reset rpc url whenever config is fetched\n  const configRpcUrl = useConfig()?.rpcUrl;\n  React.useEffect(() => {\n    setRpcUrl(configRpcUrl);\n  }, [configRpcUrl, setRpcUrl]);\n\n  const connection: ConnectionState = React.useMemo(() => {\n    if (rpcUrl === undefined) return {};\n    try {\n      const url = new URL(rpcUrl).toString();\n      return { connection: new Connection(url) };\n    } catch (err) {\n      console.error(err);\n      return {};\n    }\n  }, [rpcUrl]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <ConnectionContext.Provider value={connection}>\n        <BlockhashProvider>\n          <BalanceProvider>{children}</BalanceProvider>\n        </BlockhashProvider>\n      </ConnectionContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport function useRpcUrlState(): State {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useRpcUrlState must be used within a RpcProvider`);\n  }\n  return state;\n}\n\nexport function useConnection(): Connection | undefined {\n  const state = React.useContext(ConnectionContext);\n  if (state === undefined) {\n    throw new Error(`useConnection must be used within a RpcProvider`);\n  }\n  return state.connection;\n}\n","import { Account } from \"@solana/web3.js\";\nimport * as Sentry from \"@sentry/react\";\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function reportError(err: Error, context: string) {\n  console.error(context, err);\n  if (process.env.NODE_ENV === \"production\") {\n    const query = new URLSearchParams(window.location.search);\n    if (query.get(\"cluster\") === \"custom\") return;\n    Sentry.captureException(err, {\n      tags: { context },\n    });\n  }\n}\n\nexport function isLocalHost() {\n  return window.location.hostname === \"localhost\";\n}\n\nexport const PAYMENT_ACCOUNT = (() => {\n  const paymentKey = window.localStorage.getItem(\"paymentKey\");\n  if (paymentKey) {\n    return new Account(Buffer.from(paymentKey, \"base64\"));\n  } else {\n    const paymentAccount = new Account();\n    window.localStorage.setItem(\n      \"paymentKey\",\n      Buffer.from(paymentAccount.secretKey).toString(\"base64\")\n    );\n    return paymentAccount;\n  }\n})();\n","import * as React from \"react\";\nimport { Account } from \"@solana/web3.js\";\n\ntype SetAccount = (account: Account | undefined) => void;\ntype State = [Account | undefined, SetAccount];\n\nconst StateContext = React.createContext<State | undefined>(undefined);\n\ntype Props = { children: React.ReactNode };\nexport function WalletProvider({ children }: Props) {\n  const state = React.useState<Account>();\n  return (\n    <StateContext.Provider value={state}>{children}</StateContext.Provider>\n  );\n}\n\nexport function usePayerState(): State {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`usePayerState must be used within a WalletProvider`);\n  }\n  return state;\n}\n","import React from \"react\";\nimport { useConnection } from \"./rpc\";\n\nconst SlotContext = React.createContext<\n  React.MutableRefObject<number | undefined> | undefined\n>(undefined);\n\nconst SlotMetricsContext = React.createContext<\n  React.MutableRefObject<Map<number, SlotTiming>> | undefined\n>(undefined);\n\nconst SlotMetricsCounter = React.createContext<number | undefined>(undefined);\n\nexport type SlotTiming = {\n  firstShred: number;\n  fullSlot?: number;\n  replayStart?: number;\n  frozen?: number;\n  numEntries?: number;\n  numTransactions?: number;\n  maxTpe?: number;\n  voted?: number;\n  confirmed?: number;\n  rooted?: number;\n};\n\nexport function useTargetSlotRef() {\n  const slotRef = React.useContext(SlotContext);\n  if (!slotRef) {\n    throw new Error(`useTargetSlotRef must be used within a SlotProvider`);\n  }\n\n  return slotRef;\n}\n\nexport function useSlotTiming() {\n  React.useContext(SlotMetricsCounter);\n  const ref = React.useContext(SlotMetricsContext);\n  if (!ref) {\n    throw new Error(`useSlotMetricsRef must be used within a SlotProvider`);\n  }\n\n  return ref;\n}\n\ntype ProviderProps = { children: React.ReactNode };\nexport function SlotProvider({ children }: ProviderProps) {\n  const connection = useConnection();\n  const targetSlot = React.useRef<number>();\n  const slotMetrics = React.useRef(new Map<number, SlotTiming>());\n  const [metricsCounter, setCounter] = React.useState(0);\n\n  React.useEffect(() => {\n    if (connection === undefined) return;\n\n    let disabledSlotSubscription = false;\n    const slotSubscription = connection.onSlotChange(({ slot }) => {\n      targetSlot.current = slot;\n    });\n\n    const interval = setInterval(() => {\n      setCounter((c) => c + 1);\n    }, 1000);\n\n    const slotUpdateSubscription = connection.onSlotUpdate((notification) => {\n      // Remove if slot update api is active\n      if (!disabledSlotSubscription) {\n        connection.removeSlotChangeListener(slotSubscription);\n        disabledSlotSubscription = true;\n      }\n\n      const { type, slot, timestamp } = notification;\n      if (type === \"firstShredReceived\") {\n        targetSlot.current = Math.max(slot, targetSlot.current || 0);\n        slotMetrics.current.set(slot, {\n          firstShred: timestamp,\n        });\n        return;\n      }\n\n      const slotTiming = slotMetrics.current.get(slot);\n      if (!slotTiming) {\n        return;\n      }\n\n      switch (type) {\n        case \"allShredsReceived\": {\n          slotTiming.fullSlot = timestamp;\n          break;\n        }\n        case \"startReplay\": {\n          slotTiming.replayStart = timestamp;\n          break;\n        }\n        case \"frozen\": {\n          slotTiming.frozen = timestamp;\n          const entryStats = (notification as any).entry_stats;\n          slotTiming.numEntries = entryStats.numEntries;\n          slotTiming.numTransactions = entryStats.numTransactions;\n          slotTiming.maxTpe = entryStats.maxTxPerEntry;\n          break;\n        }\n        case \"voted\": {\n          slotTiming.voted = timestamp;\n          break;\n        }\n        case \"optimisticConfirmation\": {\n          slotTiming.confirmed = timestamp;\n          break;\n        }\n        case \"root\": {\n          slotTiming.rooted = timestamp;\n          break;\n        }\n      }\n    });\n\n    return () => {\n      clearInterval(interval);\n      if (!disabledSlotSubscription) {\n        connection.removeSlotChangeListener(slotSubscription);\n      }\n      connection.removeSlotUpdateListener(slotUpdateSubscription);\n    };\n  }, [connection]);\n\n  return (\n    <SlotContext.Provider value={targetSlot}>\n      <SlotMetricsContext.Provider value={slotMetrics}>\n        <SlotMetricsCounter.Provider value={metricsCounter}>\n          {children}\n        </SlotMetricsCounter.Provider>\n      </SlotMetricsContext.Provider>\n    </SlotContext.Provider>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/graphic.f8dd2e42.svg\";","import * as React from \"react\";\n\nimport graphic from \"images/graphic.svg\";\nimport breakSvg from \"images/break.svg\";\nimport solanaSvg from \"images/solana.svg\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Home extends React.Component {\n  render() {\n    return (\n      <div className=\"container home-page\">\n        <div className=\"d-flex min-vh-100 align-items-center px-5\">\n          <div className=\"row\">\n            <div className=\"col-12 mt-4\">\n              <img\n                src={breakSvg}\n                alt=\"break\"\n                className=\"img-fluid mr-lg-4 mb-lg-0 mb-4\"\n              />\n              <img src={solanaSvg} alt=\"solana\" className=\"img-fluid\" />\n            </div>\n\n            <div className=\"col-12 col-lg-8\">\n              <p className=\"introduction my-5\">\n                Solana is the world’s most performant blockchain — currently, it\n                can handle <b>50,000</b> transactions per second with 400\n                millisecond block times.\n              </p>\n              <p className=\"introduction\">\n                To see just how fast it is, you're invited to come and Break\n                Solana. During the next fifteen seconds, send as many\n                transactions as you can by mashing your keyboard.\n              </p>\n            </div>\n            <div className=\"col-12\">\n              <Link\n                className=\"btn btn-pink px-6 py-3 mb-5 text-uppercase\"\n                to=\"/game\"\n              >\n                Play the game\n              </Link>\n            </div>\n          </div>\n        </div>\n        <img className=\"graphic\" src={graphic} alt=\"abstract graphic\" />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport QRCode from \"qrcode.react\";\nimport {\n  Account,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  sendAndConfirmTransaction,\n  SystemProgram,\n  Transaction,\n} from \"@solana/web3.js\";\n\nimport { useConfig, useRefreshAccounts } from \"providers/server/http\";\nimport { useBalance } from \"providers/rpc/balance\";\nimport { usePayerState } from \"providers/wallet\";\nimport { useConnection } from \"providers/rpc\";\nimport { useBlockhash } from \"providers/rpc/blockhash\";\n\nexport function lamportsToSolString(\n  lamports: number,\n  maximumFractionDigits: number = 9\n): string {\n  const sol = Math.abs(lamports) / LAMPORTS_PER_SOL;\n  return (\n    \"◎\" + new Intl.NumberFormat(\"en-US\", { maximumFractionDigits }).format(sol)\n  );\n}\n\nexport function getTrustWalletLink(\n  address: string,\n  amountSol: number\n): string | undefined {\n  const iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n  const android = /Android/i.test(navigator.userAgent);\n  if (!iOS && !android) return;\n\n  let trustWalletDeepLink = `https://link.trustwallet.com/send?coin=501&address=${address}`;\n\n  // Only the iOS TW handles amount correctly at the moment\n  if (iOS) {\n    trustWalletDeepLink += \"&amount=\" + amountSol;\n  }\n\n  return trustWalletDeepLink;\n}\n\nexport function PaymentCard({ account }: { account: Account }) {\n  const balance = useBalance();\n  const connection = useConnection();\n  const recentBlockhash = useBlockhash();\n  const [, setPayer] = usePayerState();\n  const gameCostLamports = useConfig()?.gameCost || 0;\n  const gameCostSol = gameCostLamports / LAMPORTS_PER_SOL;\n  const address = account.publicKey.toBase58();\n  const balanceSufficient =\n    balance !== \"loading\" && balance >= gameCostLamports;\n  const trustWalletDeepLink = getTrustWalletLink(address, gameCostSol);\n  const [copied, setCopied] = React.useState(false);\n  const [showQR, setShowQR] = React.useState(!trustWalletDeepLink);\n  const [showWithdraw, setShowWithdraw] = React.useState(false);\n  const [toPubkey, setToPubkey] = React.useState<PublicKey>();\n  const [withdrawMessage, setWithdrawMessage] = React.useState(\"\");\n\n  const copyAddress = () => {\n    navigator.clipboard.writeText(address);\n    setCopied(true);\n  };\n\n  const updateToPubkey = (event: React.FormEvent<HTMLInputElement>) => {\n    setWithdrawMessage(\"\");\n    try {\n      setToPubkey(new PublicKey(event.currentTarget.value));\n    } catch (err) {\n      setToPubkey(undefined);\n    }\n  };\n\n  const withdrawEnabled = React.useMemo(() => {\n    return (\n      connection && recentBlockhash && toPubkey && typeof balance === \"number\"\n    );\n  }, [connection, recentBlockhash, toPubkey, balance]);\n\n  const withdrawFunds = React.useCallback(() => {\n    if (\n      connection &&\n      recentBlockhash &&\n      toPubkey &&\n      typeof balance === \"number\"\n    ) {\n      (async () => {\n        try {\n          await sendAndConfirmTransaction(\n            connection,\n            new Transaction({ recentBlockhash }).add(\n              SystemProgram.transfer({\n                fromPubkey: account.publicKey,\n                toPubkey,\n                lamports: balance - 5000,\n              })\n            ),\n            [account],\n            { commitment: \"singleGossip\", preflightCommitment: \"singleGossip\" }\n          );\n          setWithdrawMessage(\"Withdraw succeeded\");\n        } catch (err) {\n          console.error(err);\n          setWithdrawMessage(\"Withdraw failed\");\n        }\n      })();\n    }\n  }, [account, balance, connection, recentBlockhash, toPubkey]);\n\n  React.useEffect(() => {\n    if (!copied) return;\n    const timeoutId = setTimeout(() => {\n      setCopied(false);\n    }, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [copied]);\n\n  return (\n    <div className=\"card mb-0\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title font-weight-bold\">Wallet</h3>\n        {balance !== \"loading\" && (\n          <span className={`text-${balanceSufficient ? \"primary\" : \"warning\"}`}>\n            {balanceSufficient\n              ? \"Press Play to Start\"\n              : trustWalletDeepLink\n              ? \"Add Funds to Play\"\n              : \"Transfer SOL to Play\"}\n          </span>\n        )}\n      </div>\n\n      <div className=\"card-body\">\n        <div className=\"d-flex align-items-center justify-content-between mb-4\">\n          <div className=\"font-weight-bold\">Address</div>\n          <div>\n            <span className=\"btn btn-sm btn-white\" onClick={copyAddress}>\n              <span className=\"fe fe-clipboard mr-2\"></span>\n              {copied ? \"Copied\" : \"Copy\"}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"d-flex mb-4 pb-4 border-bottom\">\n          <span className=\"badge badge-dark overflow-hidden\">\n            <h4 className=\"mb-0 text-truncate\">{address}</h4>\n          </span>\n        </div>\n\n        <div className=\"d-flex align-items-center justify-content-between mb-4 pb-4 border-bottom\">\n          <div className=\"font-weight-bold\">QR Code</div>\n          <span\n            className=\"btn btn-sm btn-white ml-2\"\n            onClick={() => setShowQR((qr) => !qr)}\n          >\n            {showQR ? \"Hide\" : \"Show\"}\n          </span>\n        </div>\n\n        {showQR && (\n          <div className=\"d-flex justify-content-center align-items-center mb-4 pb-4 border-bottom\">\n            <QRCode\n              value={`solana:${address}?amount=${gameCostSol}`}\n              includeMargin\n              bgColor=\"#000\"\n              fgColor=\"#FFF\"\n              renderAs=\"svg\"\n              className=\"qr-code\"\n            />\n          </div>\n        )}\n\n        <div className=\"d-flex align-items-center justify-content-between mb-4 pb-4 border-bottom\">\n          <div className=\"font-weight-bold\">Live Balance</div>\n          <span className=\"badge badge-dark\">\n            <h4 className=\"mb-0\">\n              {balance === \"loading\" ? (\n                <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n              ) : (\n                lamportsToSolString(balance)\n              )}\n            </h4>\n          </span>\n        </div>\n\n        <div className=\"d-flex align-items-center justify-content-between mb-4 pb-4 border-bottom\">\n          <div className=\"font-weight-bold\">Withdraw Funds</div>\n          <span\n            className=\"btn btn-sm btn-white\"\n            onClick={() => {\n              setShowWithdraw((show) => !show);\n              setWithdrawMessage(\"\");\n            }}\n          >\n            {showWithdraw ? \"Hide\" : \"Withdraw\"}\n          </span>\n        </div>\n\n        {showWithdraw && (\n          <div className=\"mb-4 pb-4 border-bottom\">\n            {withdrawMessage && <p>{withdrawMessage}</p>}\n            <div className=\"d-flex align-items-center justify-content-between\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                style={{ flex: 1, maxWidth: \"500px\" }}\n                placeholder=\"To Address\"\n                onInput={updateToPubkey}\n              />\n              <input\n                className=\"btn btn-sm btn-white ml-2\"\n                type=\"button\"\n                value=\"Withdraw\"\n                disabled={!withdrawEnabled}\n                onClick={() => withdrawFunds()}\n              />\n            </div>\n          </div>\n        )}\n\n        <div className=\"d-flex align-items-center justify-content-between\">\n          <div className=\"font-weight-bold\">Change Wallet</div>\n          <span\n            className=\"btn btn-sm btn-white\"\n            onClick={() => setPayer(undefined)}\n          >\n            <span className=\"fe fe-list mr-2\"></span>\n            List\n          </span>\n        </div>\n\n        {trustWalletDeepLink && (\n          <div className=\"d-flex align-items-center justify-content-between mt-4 pt-4 border-top\">\n            <div className=\"font-weight-bold\">Add Funds</div>\n            <a\n              className=\"btn btn-sm btn-info\"\n              href={trustWalletDeepLink}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <span className=\"fe fe-external-link mr-2\"></span>\n              Open Trust Wallet\n            </a>\n          </div>\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nfunction Footer() {\n  const balance = useBalance();\n  const gameCostLamports = useConfig()?.gameCost || 0;\n  const refreshAccounts = useRefreshAccounts();\n\n  const sufficient = balance >= gameCostLamports;\n  return (\n    <div className=\"card-footer d-flex flex-column align-items-center\">\n      <input\n        type=\"button\"\n        value=\"Play\"\n        disabled={!sufficient}\n        className=\"btn btn-pink w-100 text-uppercase\"\n        onClick={refreshAccounts}\n      />\n      <span className=\"text-muted small mt-2\">\n        One play costs {lamportsToSolString(gameCostLamports)}\n      </span>\n    </div>\n  );\n}\n","import * as React from \"react\";\n\nimport \"styles/animate.scss\";\nimport { TransactionState } from \"providers/transactions\";\nimport { useSelectTransaction } from \"providers/transactions/selected\";\n\ninterface Props {\n  transaction: TransactionState;\n}\n\nexport function TransactionSquare({ transaction }: Props) {\n  const { status, details } = transaction;\n  const selectTransaction = useSelectTransaction();\n\n  let statusClass = \"\";\n  if (transaction.status === \"success\") {\n    statusClass = \"primary\";\n  } else if (status === \"timeout\") {\n    statusClass = \"danger\";\n  } else {\n    statusClass = \"dark\";\n  }\n\n  return (\n    <div\n      onClick={() => selectTransaction(details.signature)}\n      className={`btn d-flex flex-column justify-content-center align-items-center square slideInRight btn-${statusClass}`}\n    ></div>\n  );\n}\n","import * as React from \"react\";\n\nimport \"styles/animate.scss\";\nimport { TransactionState } from \"providers/transactions\";\nimport { useSelectTransaction } from \"providers/transactions/selected\";\nimport { useSlotTiming } from \"providers/slot\";\nimport type { SlotTiming } from \"providers/slot\";\n\ninterface Props {\n  transaction: TransactionState;\n}\n\nexport function timeElapsed(\n  sentAt: number | undefined,\n  receivedAt: number | undefined\n): string | undefined {\n  if (sentAt === undefined || receivedAt === undefined) return;\n  return (Math.max(0, receivedAt - sentAt) / 1000).toFixed(3) + \"s\";\n}\n\nexport function TxTableRow({ transaction }: Props) {\n  const signature = transaction.details.signature;\n  const selectTransaction = useSelectTransaction();\n  const slotMetrics = useSlotTiming();\n\n  let targetSlot;\n  let landedSlot: number | undefined;\n  let timing;\n  let received;\n  if (transaction.status === \"success\") {\n    targetSlot = transaction.slot.target;\n    landedSlot = transaction.slot.landed;\n    timing = transaction.timing;\n    received = transaction.received;\n  } else if (transaction.status === \"timeout\") {\n  } else {\n    targetSlot = transaction.pending.targetSlot;\n    timing = transaction.timing;\n    received = transaction.received;\n  }\n\n  let slotTiming: SlotTiming | undefined;\n  let landedTime: number | undefined;\n  let forkedSlots = [];\n  if (landedSlot !== undefined) {\n    landedTime = received?.find((r) => r.slot === landedSlot)?.timestamp;\n    slotTiming = slotMetrics.current.get(landedSlot);\n    if (targetSlot) {\n      for (let slot = targetSlot; slot < landedSlot; slot++) {\n        if (slotMetrics.current.get(slot)?.confirmed === undefined) {\n          forkedSlots.push(slot.toString().substr(-3));\n        }\n      }\n    }\n  }\n\n  return (\n    <tr\n      className=\"debug-row text-monospace\"\n      onClick={() => selectTransaction(signature)}\n    >\n      <td>{signature.slice(0, 7)}…</td>\n      <td>{targetSlot || \"-\"}</td>\n      <td>{landedSlot || \"-\"}</td>\n      <td>{slotTiming?.numTransactions || \"-\"}</td>\n      <td>{slotTiming?.numEntries || \"-\"}</td>\n      <td>{slotTiming?.maxTpe || \"-\"}</td>\n      <td>{forkedSlots.toString() || \"-\"}</td>\n      <td>{timeElapsed(timing?.subscribed, slotTiming?.firstShred) || \"-\"}</td>\n      <td>{timeElapsed(timing?.subscribed, landedTime) || \"-\"}</td>\n      <td>{timeElapsed(timing?.subscribed, slotTiming?.fullSlot) || \"-\"}</td>\n      <td>{timeElapsed(timing?.subscribed, slotTiming?.replayStart) || \"-\"}</td>\n      <td>{timeElapsed(timing?.subscribed, slotTiming?.frozen) || \"-\"}</td>\n      <td>{timeElapsed(timing?.subscribed, slotTiming?.voted) || \"-\"}</td>\n      <td>{timeElapsed(timing?.subscribed, slotTiming?.confirmed) || \"-\"}</td>\n      <td>{timeElapsed(timing?.subscribed, slotTiming?.rooted) || \"-\"}</td>\n    </tr>\n  );\n}\n","import React, { useRef, useEffect, useCallback } from \"react\";\n\nimport { TransactionSquare } from \"./TxSquare\";\nimport { useCreateTxRef, useTransactions } from \"providers/transactions\";\nimport {\n  useGameState,\n  useResetGame,\n  COUNTDOWN_SECS,\n  useCountdown,\n} from \"providers/game\";\nimport { TxTableRow } from \"./TxTableRow\";\nimport { DEBUG_MODE } from \"providers/transactions/confirmed\";\n\nexport function TransactionContainer({ enabled }: { enabled?: boolean }) {\n  const createTxRef = useCreateTxRef();\n  const gameState = useGameState();\n  const [countdown, setCountdown] = useCountdown();\n  const resetGame = useResetGame();\n  const [rapidFire, setRapidFire] = React.useState(false);\n\n  const makeTransaction = useCallback(() => {\n    if (enabled) {\n      if (countdown !== undefined) {\n        createTxRef.current();\n      } else if (gameState === \"play\") {\n        createTxRef.current();\n        setCountdown(performance.now());\n      }\n    }\n  }, [enabled, createTxRef, gameState, countdown, setCountdown]);\n\n  useEffect(() => {\n    if (rapidFire && !enabled) {\n      setRapidFire(false);\n      return;\n    } else if (!rapidFire) {\n      return;\n    }\n\n    let intervalId: NodeJS.Timeout;\n    const timeoutId = setTimeout(() => {\n      intervalId = setInterval(() => {\n        makeTransaction();\n      }, 30);\n    }, 300);\n\n    return () => {\n      clearTimeout(timeoutId);\n      clearInterval(intervalId);\n    };\n  }, [rapidFire, enabled, makeTransaction]);\n\n  useEffect(() => {\n    const testMode = new URLSearchParams(window.location.search).has(\"test\");\n    if (!testMode) return;\n    makeTransaction();\n    const testInterval = window.setInterval(() => makeTransaction(), 1000);\n    return () => clearInterval(testInterval);\n  }, [makeTransaction]);\n\n  useEffect(() => {\n    document.addEventListener(\"keyup\", makeTransaction);\n    return () => {\n      document.removeEventListener(\"keyup\", makeTransaction);\n    };\n  }, [makeTransaction]);\n\n  return (\n    <div className=\"card h-100 mb-0\">\n      <div className=\"card-header\">\n        <div className=\"d-flex align-items-center\">\n          <HelpButton />\n          <span className=\"text-truncate\">Live Transaction Statuses</span>\n        </div>\n        <div className=\"text-primary d-none d-md-block\">\n          {enabled ? \"Press any key to send a transaction\" : \"Game finished\"}\n        </div>\n      </div>\n      {DEBUG_MODE ? (\n        <DebugTable />\n      ) : (\n        <div className=\"card-body\">\n          <div className=\"tx-wrapper border-1 border-primary h-100 position-relative\">\n            {countdown === undefined && enabled ? (\n              <div className=\"d-flex h-100 justify-content-center align-items-center p-3\">\n                <h2 className=\"text-center\">\n                  Try to break Solana's network by sending as many transactions\n                  as you can in {COUNTDOWN_SECS} seconds!\n                </h2>\n              </div>\n            ) : null}\n            <InnerContainer />\n          </div>\n        </div>\n      )}\n      <div className=\"card-footer\">\n        <span\n          className=\"btn btn-pink w-100 text-uppercase text-truncate touch-action-none\"\n          onContextMenu={(e) => e.preventDefault()}\n          onPointerDown={() => setRapidFire(true)}\n          onPointerUp={() => setRapidFire(false)}\n          onPointerLeave={() => setRapidFire(false)}\n          onPointerCancel={() => setRapidFire(false)}\n          onClick={enabled ? makeTransaction : resetGame}\n        >\n          <span className={`fe fe-${enabled ? \"zap\" : \"repeat\"} mr-2`}></span>\n          {enabled ? \"Send new transactions\" : \"Play again\"}\n        </span>\n      </div>\n    </div>\n  );\n}\n\nfunction DebugTable() {\n  const scrollEl = useRef<HTMLDivElement>(null);\n  const transactions = useTransactions();\n\n  useEffect(() => {\n    const current = scrollEl.current;\n    if (current) {\n      current.scrollTop = current.scrollHeight;\n    }\n  }, [transactions.length]);\n\n  return (\n    <div className=\"main\">\n      <div className=\"content\">\n        <div ref={scrollEl} className=\"debug-wrapper\">\n          <table className=\"table table-sm mb-0\">\n            <thead>\n              <tr>\n                <th className=\"text-muted sticky\">Transaction</th>\n                <th className=\"text-muted sticky\">Target Slot</th>\n                <th className=\"text-muted sticky\">Inclusion Slot</th>\n                <th className=\"text-muted sticky\">Tx Count</th>\n                <th className=\"text-muted sticky\">Entry Count</th>\n                <th className=\"text-muted sticky\">Max Tx Per Entry</th>\n                <th className=\"text-muted sticky\">Forked Slots</th>\n                <th className=\"text-muted sticky\">First Shred</th>\n                <th className=\"text-muted sticky\">Tx Landed</th>\n                <th className=\"text-muted sticky\">All Shreds</th>\n                <th className=\"text-muted sticky\">Replay Start</th>\n                <th className=\"text-muted sticky\">Replay End</th>\n                <th className=\"text-muted sticky\">Voted</th>\n                <th className=\"text-muted sticky\">Confirmed</th>\n                <th className=\"text-muted sticky\">Rooted</th>\n              </tr>\n            </thead>\n            <tbody className=\"list\">\n              {transactions.map((tx) => (\n                <TxTableRow key={tx.details.signature} transaction={tx} />\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction InnerContainer() {\n  const scrollEl = useRef<HTMLDivElement>(null);\n  const transactions = useTransactions();\n\n  useEffect(() => {\n    const current = scrollEl.current;\n    if (current) {\n      current.scrollTop = current.scrollHeight;\n    }\n  }, [transactions.length]);\n\n  const renderTransactions = transactions.map((tx) => (\n    <TransactionSquare key={tx.details.signature} transaction={tx} />\n  ));\n\n  return (\n    <div ref={scrollEl} className=\"square-container\" tabIndex={0}>\n      {renderTransactions}\n    </div>\n  );\n}\n\nfunction HelpButton() {\n  const [show, setShow] = React.useState(false);\n\n  return (\n    <div\n      className=\"popover-container c-pointer mr-3\"\n      onClick={() => setShow(true)}\n      onMouseOver={() => setShow(true)}\n      onMouseOut={() => setShow(false)}\n    >\n      <span className=\"fe fe-help-circle\"></span>\n      <Legend show={show} />\n    </div>\n  );\n}\n\nfunction Legend({ show }: { show: boolean }) {\n  if (!show) return null;\n  return (\n    <div className=\"popover bs-popover-bottom right show\">\n      <div className=\"arrow\" />\n      <div className=\"popover-body\">\n        <div className=\"d-flex flex-column\">\n          <div className=\"d-flex align-items-center mb-3\">\n            <div className=\"btn square legend slideInRight btn-dark mr-2\" />\n            <span>Pending transaction</span>\n          </div>\n\n          <div className=\"d-flex align-items-center mb-3\">\n            <div className=\"btn square legend slideInRight btn-primary mr-2\" />\n            <span>Confirmed transaction</span>\n          </div>\n\n          <div className=\"d-flex align-items-center\">\n            <div className=\"btn square legend slideInRight btn-danger mr-2\" />\n            <span>Failed transaction</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { TransactionState } from \"providers/transactions\";\nimport {\n  useSelectTransaction,\n  useSelectedTransaction,\n} from \"providers/transactions/selected\";\nimport { useClusterParam } from \"providers/server/http\";\nimport { useSlotTiming } from \"providers/slot\";\nimport { timeElapsed } from \"./TxTableRow\";\n\nexport function TransactionModal() {\n  const selectedTx = useSelectedTransaction();\n  const selectTx = useSelectTransaction();\n  const onClose = () => selectTx(undefined);\n  const show = !!selectedTx;\n\n  const renderContent = () => {\n    if (!selectedTx) return null;\n\n    return (\n      <div className=\"modal-dialog modal-dialog-centered\">\n        <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-card card mb-0\">\n            <div className=\"card-header\">\n              <h4 className=\"card-header-title\">Transaction Details</h4>\n\n              <button type=\"button\" className=\"close\" onClick={onClose}>\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </div>\n\n            <div className=\"card-body\">\n              <TransactionDetails transaction={selectedTx} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={`modal fade${show ? \" show\" : \"\"}`} onClick={onClose}>\n        {renderContent()}\n      </div>\n      <Overlay show={show} />\n    </>\n  );\n}\n\nfunction Overlay({ show }: { show: boolean }) {\n  if (show) return <div className=\"modal-backdrop fade show\"></div>;\n  return <div className=\"fade\"></div>;\n}\n\nexport function TransactionDetails({\n  transaction,\n}: {\n  transaction: TransactionState;\n}) {\n  const clusterParam = useClusterParam();\n  const slotMetrics = useSlotTiming();\n  const { signature, feeAccount, programAccount } = transaction.details;\n  const explorerLink = (path: string) =>\n    `https://explorer.solana.com/${path}?${clusterParam}`;\n  const feeAddress = feeAccount.toBase58();\n  const dataAddress = programAccount.toBase58();\n\n  function displaySignature() {\n    return (\n      <>\n        <div className=\"d-flex align-items-center justify-content-between mb-4\">\n          <div className=\"\">Signature</div>\n          <div>\n            <a\n              href={explorerLink(\"tx/\" + signature)}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"btn btn-sm btn-white\"\n            >\n              <span className=\"fe fe-external-link mr-2\"></span>\n              Explorer\n            </a>\n          </div>\n        </div>\n        <div className=\"d-flex mb-4\">\n          <span className=\"badge badge-dark overflow-hidden\">\n            <h4 className=\"mb-0 text-truncate\">{signature}</h4>\n          </span>\n        </div>\n      </>\n    );\n  }\n\n  function displayAccounts() {\n    return (\n      <>\n        <div className=\"d-flex align-items-center justify-content-between mb-4\">\n          <div className=\"\">Fee Account</div>\n          <div>\n            <a\n              href={explorerLink(\"address/\" + feeAddress)}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"btn btn-sm btn-white\"\n            >\n              <span className=\"fe fe-external-link mr-2\"></span>\n              Explorer\n            </a>\n          </div>\n        </div>\n\n        <div className=\"d-flex align-items-center justify-content-between mb-4 pb-4 border-bottom\">\n          <div className=\"\">Break Account</div>\n          <div>\n            <a\n              href={explorerLink(\"address/\" + dataAddress)}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"btn btn-sm btn-white\"\n            >\n              <span className=\"fe fe-external-link mr-2\"></span>\n              Explorer\n            </a>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  function displayFinalized() {\n    if (transaction.status === \"success\") {\n      if (transaction.pending) {\n        return (\n          <div>\n            <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n            Finalizing\n          </div>\n        );\n      } else {\n        return <span className=\"text-success\">Finalized</span>;\n      }\n    } else {\n      return \"N/A\";\n    }\n  }\n\n  function displayConfTime() {\n    if (transaction.status === \"timeout\") {\n      return <span className=\"text-warning\">Timed out</span>;\n    }\n    if (transaction.status === \"success\") {\n      const subscribed = transaction.timing.subscribed;\n      if (subscribed !== undefined && transaction.slot.landed !== undefined) {\n        const slotTiming = slotMetrics.current.get(transaction.slot.landed);\n        const confirmed = slotTiming?.confirmed;\n        const confTime = timeElapsed(subscribed, confirmed);\n        if (confTime) {\n          return <span className=\"text-success\">{confTime} sec</span>;\n        }\n      }\n    }\n    return (\n      <div>\n        <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n        Processing\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {displaySignature()}\n      {displayAccounts()}\n      <div className=\"d-flex justify-content-between mb-4\">\n        <div className=\"\">Confirmation Time</div>\n        {displayConfTime()}\n      </div>\n      {transaction.status === \"success\" && (\n        <div className=\"d-flex justify-content-between mb-4\">\n          <div className=\"\">Confirmed Block</div>\n          {transaction.slot.landed}\n        </div>\n      )}\n      <div className=\"d-flex justify-content-between\">\n        <div className=\"\">Finalization Status</div>\n        {displayFinalized()}\n      </div>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { Redirect, useLocation } from \"react-router-dom\";\n\nimport { Header } from \"components/Header\";\nimport { PaymentCard } from \"components/PaymentCard\";\nimport { TransactionContainer } from \"components/TxContainer\";\nimport { TransactionModal } from \"components/TxModal\";\nimport {\n  useTps,\n  useCreatedCount,\n  useAvgConfirmationTime,\n} from \"providers/transactions\";\nimport { usePayerState } from \"providers/wallet\";\nimport { useActiveUsers } from \"providers/server/socket\";\nimport { useGameState, useCountdown } from \"providers/game\";\n\nexport default function Game() {\n  const gameState = useGameState();\n  const [countdown] = useCountdown();\n  const showPayment = gameState === \"payment\";\n  const loading = gameState === \"loading\";\n  const showStats = gameState === \"play\" || countdown !== undefined;\n  const [payer] = usePayerState();\n  const location = useLocation();\n\n  if (showPayment) {\n    if (!payer) {\n      return <Redirect to={{ ...location, pathname: \"/setup\" }} />;\n    } else {\n      return <Redirect to={{ ...location, pathname: \"/wallet\" }} />;\n    }\n  }\n\n  return (\n    <div className=\"container min-vh-100 d-flex flex-column\">\n      <div>\n        <Header />\n        {showStats && <Stats />}\n      </div>\n      <div className=\"row flex-grow-1 mb-5\">\n        <div className=\"col\">\n          {loading && countdown === undefined ? (\n            <EmptyCard />\n          ) : showPayment && payer ? (\n            <PaymentCard account={payer} />\n          ) : (\n            <TransactionContainer enabled />\n          )}\n        </div>\n      </div>\n      <TransactionModal />\n    </div>\n  );\n}\n\nexport function EmptyCard() {\n  return (\n    <div className=\"card mb-0 h-100\">\n      <div className=\"card-header\"></div>\n      <div className=\"card-body\"></div>\n    </div>\n  );\n}\n\nfunction Stats() {\n  const createdCount = useCreatedCount();\n  const avgConfTime = useAvgConfirmationTime().toFixed(2);\n  const tps = useTps();\n  const activeUsers = useActiveUsers();\n\n  return (\n    <div className=\"row\">\n      <StatCard label=\"Transactions Sent\" value={createdCount} icon=\"send\" />\n      <StatCard\n        label=\"Avg. Confirmation Time\"\n        value={`${avgConfTime}s`}\n        icon=\"clock\"\n      />\n      <StatCard label=\"Players Online\" value={activeUsers} icon=\"user\" />\n      <StatCard label=\"Transactions per Second\" value={tps} icon=\"zap\" />\n    </div>\n  );\n}\n\ntype StatProps = {\n  label: React.ReactNode;\n  value: React.ReactNode;\n  icon: string;\n};\nfunction StatCard({ label, value, icon }: StatProps) {\n  return (\n    <div className=\"stat-card col-6 col-lg-3 d-flex flex-column\">\n      <div className=\"card flex-grow-1\">\n        <div className=\"card-body\">\n          <div className=\"row align-items-center\">\n            <div className=\"col-12 col-md-9\">\n              <h6 className=\"text-uppercase text-truncate mb-2\">{label}</h6>\n              <span className=\"h2 mb-0 text-primary\">{value}</span>\n            </div>\n            <div className=\"col-md-3 d-none d-md-block text-right\">\n              <span className={`h2 fe fe-${icon} text-primary mb-0`}></span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { Doughnut, ChartData } from \"react-chartjs-2\";\nimport { Redirect, useLocation } from \"react-router-dom\";\n\nimport { Header } from \"components/Header\";\nimport { TransactionContainer } from \"components/TxContainer\";\nimport { TransactionModal } from \"components/TxModal\";\nimport {\n  useConfirmedCount,\n  useCreatedCount,\n  useDroppedCount,\n  useAvgConfirmationTime,\n} from \"providers/transactions\";\nimport { COUNTDOWN_SECS } from \"providers/game\";\n\nexport default function Results() {\n  const createdCount = useCreatedCount();\n  const location = useLocation();\n\n  if (createdCount === 0) {\n    return <Redirect to={{ ...location, pathname: \"/game\" }} />;\n  }\n\n  return (\n    <div className=\"container min-vh-100 d-flex flex-column\">\n      <div>\n        <Header />\n        <Stats />\n        <Summary />\n      </div>\n      <div className=\"row flex-grow-1 mb-5\">\n        <div className=\"col\">\n          <TransactionContainer />\n        </div>\n      </div>\n      <TransactionModal />\n    </div>\n  );\n}\n\nfunction Summary() {\n  const confirmedCount = useConfirmedCount();\n  const capacityUsed = {\n    solana: (100 * confirmedCount) / (COUNTDOWN_SECS * 50000),\n    bitcoin: (100 * confirmedCount) / (COUNTDOWN_SECS * 4.6),\n    ethereum: (100 * confirmedCount) / (COUNTDOWN_SECS * 15),\n  };\n\n  return (\n    <div className=\"row justify-content-center mb-5 results-summary px-4\">\n      <div className=\"col-12\">\n        <h3 className=\"text-center\">\n          With{\" \"}\n          <span className=\"text-primary font-weight-bold\">\n            {confirmedCount}\n          </span>{\" \"}\n          transactions in {COUNTDOWN_SECS} seconds you took up{\" \"}\n          <span className=\"text-primary font-weight-bold\">\n            {capacityUsed.solana.toFixed(3)}%\n          </span>{\" \"}\n          of Solana’s capacity.\n        </h3>\n        <h3 className=\"text-center\">\n          Processing the same amount of transactions would have taken up{\" \"}\n          <span className=\"text-primary font-weight-bold\">\n            {capacityUsed.ethereum.toFixed(1)}%\n          </span>{\" \"}\n          of Ethereum’s capacity and{\" \"}\n          <span className=\"text-primary font-weight-bold\">\n            {capacityUsed.bitcoin.toFixed(1)}%\n          </span>{\" \"}\n          of Bitcoin’s capacity.\n        </h3>\n      </div>\n    </div>\n  );\n}\n\nfunction Stats() {\n  const createdCount = useCreatedCount();\n  const confirmedCount = useConfirmedCount();\n  const droppedCount = useDroppedCount();\n  const avgConfTime = useAvgConfirmationTime();\n\n  const hasTxData = createdCount > 0;\n  let processingCount = createdCount - confirmedCount - droppedCount;\n  if (!hasTxData) processingCount = 1;\n  const txData = {\n    labels: [\"Confirmed\", \"Dropped\", \"Processing\"],\n    datasets: [\n      {\n        data: [confirmedCount, droppedCount, processingCount],\n        borderColor: [\"#000\", \"#000\", \"#000\"],\n        backgroundColor: [\"#00ffad\", \"#ea134d\", \"#2A2A2A\"],\n      },\n    ],\n  };\n\n  const hasCapacityData = confirmedCount > 0;\n  const capacityUsed = (100 * confirmedCount) / (COUNTDOWN_SECS * 50000);\n  const roundCapacityUsed = hasCapacityData\n    ? Math.max(0.5, parseFloat(capacityUsed.toFixed(2)))\n    : 0;\n  const capacityData = {\n    datasets: [\n      {\n        data: [roundCapacityUsed, 100 - roundCapacityUsed],\n        borderColor: [\"#000\", \"#000\"],\n        backgroundColor: [\"#00ffad\", \"#2A2A2A\"],\n      },\n    ],\n  };\n\n  const hasConfData = !!avgConfTime;\n  const numSegments = 50;\n  const confData = {\n    datasets: [\n      {\n        data: new Array(numSegments).fill(1),\n        borderColor: new Array(numSegments).fill(\"#000\"),\n        backgroundColor: new Array(numSegments).fill(\n          hasConfData ? \"#00ffad\" : \"#2A2A2A\"\n        ),\n      },\n    ],\n  };\n\n  return (\n    <div className=\"d-flex justify-content-center\">\n      <div className=\"stats d-flex mb-5 justify-content-between w-100\">\n        <StatCircle\n          data={confData}\n          title=\"Average Confirmation\"\n          value={avgConfTime ? avgConfTime.toFixed(2) + \"s\" : \"---\"}\n        />\n        <StatCircle\n          data={txData}\n          title=\"Transactions Processed\"\n          value={`${confirmedCount} of ${createdCount}`}\n        />\n        <StatCircle\n          data={capacityData}\n          title=\"Capacity Used\"\n          value={capacityUsed.toFixed(3) + \"%\"}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst STAT_LEGEND = {\n  display: false,\n};\n\nconst STAT_OPTIONS = {\n  showLines: false,\n  cutoutPercentage: 90,\n  maintainAspectRatio: false,\n};\n\nfunction StatCircle({\n  data,\n  value,\n  title,\n}: {\n  data: ChartData<Chart.ChartData>;\n  value: string;\n  title: string;\n}) {\n  return (\n    <div className=\"px-4\">\n      <div className=\"position-relative stat-circle\">\n        <Doughnut data={data} legend={STAT_LEGEND} options={STAT_OPTIONS} />\n        <div className=\"donut-content\">\n          <h2 className=\"mb-3\">{value}</h2>\n          <h6 className=\"text-muted text-center text-uppercase\">{title}</h6>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { usePayerState } from \"providers/wallet\";\nimport { Redirect, useLocation } from \"react-router-dom\";\nimport { Header } from \"components/Header\";\nimport { PaymentCard } from \"components/PaymentCard\";\nimport { useGameState } from \"providers/game\";\n\nexport default function Wallet() {\n  const [payer] = usePayerState();\n  const gameState = useGameState();\n  const location = useLocation();\n\n  if (!payer) {\n    return <Redirect to={{ ...location, pathname: \"/setup\" }} />;\n  } else if (gameState !== \"payment\") {\n    return <Redirect to={{ ...location, pathname: \"/game\" }} />;\n  }\n\n  return (\n    <div className=\"container min-vh-100 d-flex flex-column\">\n      <div>\n        <Header />\n      </div>\n      <div className=\"row flex-grow-1 mb-5\">\n        <div className=\"col\">\n          <PaymentCard account={payer} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDebounceCallback } from \"@react-hook/debounce\";\nimport { Location } from \"history\";\nimport {\n  useServer,\n  serverName,\n  useClusterModal,\n  SERVERS,\n  DEFAULT_SERVER,\n  useCustomUrl,\n} from \"../providers/server\";\nimport { useRpcUrlState } from \"providers/rpc\";\nimport { useConfig } from \"providers/server/http\";\n\nfunction ClusterModal() {\n  const [show, setShow] = useClusterModal();\n  const onClose = () => setShow(false);\n  const { server } = useServer();\n  return (\n    <>\n      <div\n        className={`modal fade fixed-right${show ? \" show\" : \"\"}`}\n        onClick={onClose}\n      >\n        <div className=\"modal-dialog modal-dialog-vertical\">\n          <div className=\"modal-content\">\n            <div className=\"modal-body\" onClick={(e) => e.stopPropagation()}>\n              <span className=\"c-pointer\" onClick={onClose}>\n                &times;\n              </span>\n\n              <h2 className=\"text-center mb-4 mt-4\">Choose a Cluster</h2>\n\n              <ClusterToggle />\n\n              <h2 className=\"text-center mb-4 mt-5\">\n                Override {serverName(server)} RPC\n              </h2>\n\n              <CustomRpcInput />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction CustomRpcInput() {\n  const [rpcUrl, setRpcUrl] = useRpcUrlState();\n  const [editing, setEditing] = React.useState(false);\n  const configRpcUrl = useConfig()?.rpcUrl;\n  const active = configRpcUrl !== rpcUrl;\n\n  const customClass = (prefix: string) => (active ? `${prefix}-info` : \"\");\n  const onUrlInput = useDebounceCallback((url: string) => {\n    if (url.length > 0) {\n      setRpcUrl(url);\n    } else if (configRpcUrl) {\n      setRpcUrl(configRpcUrl);\n    }\n  }, 500);\n\n  const defaultValue = active ? rpcUrl : \"\";\n  const inputTextClass = editing ? \"\" : \"text-muted\";\n  return (\n    <input\n      type=\"text\"\n      defaultValue={defaultValue}\n      placeholder=\"http://127.0.0.1:8899\"\n      className={`form-control form-control-prepended b-black ${inputTextClass} ${customClass(\n        \"border\"\n      )}`}\n      onFocus={() => setEditing(true)}\n      onBlur={() => setEditing(false)}\n      onInput={(e) => onUrlInput(e.currentTarget.value)}\n    />\n  );\n}\n\nfunction CustomClusterInput() {\n  const [customUrl, setCustomUrl] = useCustomUrl();\n  const [editing, setEditing] = React.useState(false);\n\n  const onUrlInput = useDebounceCallback((url: string) => {\n    setCustomUrl(url);\n  }, 500);\n\n  const inputTextClass = editing ? \"\" : \"text-muted\";\n  return (\n    <input\n      type=\"text\"\n      defaultValue={customUrl}\n      className={`form-control form-control-prepended b-black ${inputTextClass}`}\n      onFocus={() => setEditing(true)}\n      onBlur={() => setEditing(false)}\n      onInput={(e) => onUrlInput(e.currentTarget.value)}\n    />\n  );\n}\n\nfunction ClusterToggle() {\n  const { server } = useServer();\n\n  return (\n    <>\n      <div className=\"btn-group-toggle d-flex flex-wrap mb-4\">\n        {SERVERS.map((next) => {\n          const active = next === server;\n          const btnClass = active\n            ? `active btn-dark border-info text-white`\n            : \"btn-dark\";\n\n          const clusterLocation = (location: Location) => {\n            const params = new URLSearchParams(location.search);\n            if (next !== DEFAULT_SERVER) {\n              params.set(\"cluster\", next);\n            } else {\n              params.delete(\"cluster\");\n            }\n            return {\n              ...location,\n              search: params.toString(),\n            };\n          };\n\n          return (\n            <Link\n              key={next}\n              className={`btn text-center col-12 mb-3 ${btnClass}`}\n              to={clusterLocation}\n            >\n              {serverName(next)}\n            </Link>\n          );\n        })}\n      </div>\n      {server === \"custom\" && (\n        <>\n          <h2 className=\"text-center mb-4 mt-4\">Break Server URL</h2>\n          <CustomClusterInput />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default ClusterModal;\n","import * as React from \"react\";\nimport { Route, Switch, Redirect, useRouteMatch } from \"react-router-dom\";\n\nimport Home from \"pages/HomePage\";\nimport Game from \"pages/GamePage\";\nimport Setup from \"pages/SetupPage\";\nimport Results from \"pages/ResultsPage\";\nimport Wallet from \"pages/WalletPage\";\n\nimport ClusterModal from \"components/ClusterModal\";\nimport { LoadingModal } from \"components/LoadingModal\";\nimport { useGameState } from \"providers/game\";\nimport { useClusterModal } from \"providers/server\";\n\nexport default function App() {\n  const isHomePage = !!useRouteMatch(\"/\")?.isExact;\n  const isSetupPage = !!useRouteMatch(\"/setup\")?.isExact;\n  const gameState = useGameState();\n  const [showClusterModal] = useClusterModal();\n  const showLoadingModal =\n    !isHomePage && !isSetupPage && gameState === \"loading\";\n\n  return (\n    <div className=\"main-content\">\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/game\" exact component={Game} />\n        <Route path=\"/setup\" exact component={Setup} />\n        <Route path=\"/results\" exact component={Results} />\n        <Route path=\"/wallet\" exact component={Wallet} />\n        <Redirect from=\"*\" to=\"/\" exact />\n      </Switch>\n      <LoadingModal show={showLoadingModal} />\n      <ClusterModal />\n      <Overlay show={showLoadingModal || showClusterModal} />\n    </div>\n  );\n}\n\nfunction Overlay({ show }: { show: boolean }) {\n  if (show) return <div className=\"modal-backdrop fade show\"></div>;\n  return <div className=\"fade\"></div>;\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nimport \"styles/index.scss\";\n\nimport App from \"./app\";\nimport { WalletProvider } from \"providers/wallet\";\nimport { TransactionsProvider } from \"providers/transactions\";\nimport { GameStateProvider } from \"providers/game\";\nimport { ServerProvider } from \"providers/server\";\nimport { RpcProvider } from \"providers/rpc\";\nimport { SlotProvider } from \"providers/slot\";\n\nif (process.env.NODE_ENV === \"production\") {\n  Sentry.init({\n    dsn:\n      \"https://727cd3fff6f949449c1ce5030928e667@o434108.ingest.sentry.io/5411826\",\n    integrations: [new Integrations.BrowserTracing()],\n    tracesSampleRate: 1.0,\n  });\n}\n\nReactDOM.render(\n  <BrowserRouter>\n    <WalletProvider>\n      <ServerProvider>\n        <RpcProvider>\n          <SlotProvider>\n            <TransactionsProvider>\n              <GameStateProvider>\n                <App />\n              </GameStateProvider>\n            </TransactionsProvider>\n          </SlotProvider>\n        </RpcProvider>\n      </ServerProvider>\n    </WalletProvider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n","// Program data is stored as little-endian\n// [0x1, 0x0] -> id #0, [0x0, 0x1] -> id #8\nexport function programDataToIds(bytes: Uint8Array): Array<number> {\n  const ids = new Array<number>();\n  bytes.forEach((byte, i) => {\n    for (let j = 7; j >= 0; j--) {\n      if ((byte & (1 << j)) === 1 << j) {\n        ids.push(8 * i + (7 - j));\n      }\n    }\n  });\n  return ids;\n}\n\n// Instruction data uses big-endian\n// id #0 -> [0x0, 0x0], id #256 -> [0x1, 0x0]\nconst MAX_ID = Math.pow(2, 16) - 1;\nexport function instructionDataFromId(id: number): Uint8Array {\n  if (id > MAX_ID || id < 0 || !Number.isInteger(id)) {\n    throw new Error(\"invalid id\");\n  }\n\n  const bytes = new Uint8Array(2);\n  bytes[0] = Math.floor(id / 256);\n  bytes[1] = id % 256;\n  return bytes;\n}\n\nexport function xor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  if (a.length !== b.length) throw new Error(\"bytes are not the same length\");\n  const bytes = new Uint8Array(a);\n  for (let i = 0; i < b.length; i++) {\n    bytes[i] ^= b[i];\n  }\n  return bytes;\n}\n","import * as React from \"react\";\n\nimport { useAccounts } from \"../server/http\";\nimport { useDispatch, TrackedCommitment, COMMITMENT_PARAM } from \"./index\";\nimport { useConnection } from \"providers/rpc\";\nimport * as Bytes from \"utils/bytes\";\nimport { AccountInfo } from \"@solana/web3.js\";\n\nexport const DEBUG_MODE = new URLSearchParams(window.location.search).has(\n  \"debug\"\n);\n\n// Determine commitment levels to subscribe to. \"singleGossip\" is used\n// to stop tx send retries so it must be returned\nexport const subscribedCommitments = (): TrackedCommitment[] => {\n  if (DEBUG_MODE) return [\"singleGossip\"];\n  switch (COMMITMENT_PARAM) {\n    case \"recent\": {\n      return [COMMITMENT_PARAM, \"singleGossip\"];\n    }\n    default: {\n      return [\"singleGossip\"];\n    }\n  }\n};\n\ntype Props = { children: React.ReactNode };\nexport function ConfirmedHelper({ children }: Props) {\n  const dispatch = useDispatch();\n  const connection = useConnection();\n  const accounts = useAccounts();\n\n  React.useEffect(() => {\n    if (connection === undefined || accounts === undefined) return;\n    if (DEBUG_MODE) return;\n\n    const commitments = subscribedCommitments();\n    const partitionCount = accounts.programAccounts.length;\n\n    const accountSubscriptions = accounts.programAccounts.map(\n      (account, partition) =>\n        commitments.map((commitment) =>\n          connection.onAccountChange(\n            account,\n            (accountInfo: AccountInfo<Buffer>, { slot }) => {\n              const ids = new Set(Bytes.programDataToIds(accountInfo.data));\n              const activeIdPartition = {\n                ids,\n                partition,\n                partitionCount,\n              };\n              dispatch({\n                type: \"update\",\n                activeIdPartition,\n                commitment,\n                estimatedSlot: slot,\n                receivedAt: performance.now(),\n              });\n            },\n            commitment\n          )\n        )\n    );\n\n    return () => {\n      accountSubscriptions.forEach((listeners) => {\n        listeners.forEach((listener: any) => {\n          connection.removeAccountChangeListener(listener);\n        });\n      });\n    };\n  }, [dispatch, connection, accounts]);\n\n  return <>{children}</>;\n}\n","import * as React from \"react\";\nimport { AccountInfo } from \"@solana/web3.js\";\nimport { useConfig } from \"../server/http\";\nimport { usePayerState } from \"../wallet\";\nimport { reportError } from \"utils\";\nimport { useConnection } from \".\";\n\ntype Balance = number | \"loading\";\nconst StateContext = React.createContext<Balance | undefined>(undefined);\n\ntype Props = { children: React.ReactNode };\nexport function BalanceProvider({ children }: Props) {\n  const [balance, setBalance] = React.useState<Balance>(\"loading\");\n  const [payer] = usePayerState();\n  const config = useConfig();\n  const connection = useConnection();\n  const paymentRequired = config?.paymentRequired;\n\n  const refreshBalance = React.useCallback(() => {\n    if (\n      payer === undefined ||\n      connection === undefined ||\n      paymentRequired !== true\n    ) {\n      setBalance(\"loading\");\n      return;\n    }\n\n    (async () => {\n      try {\n        const balance = await connection.getBalance(\n          payer.publicKey,\n          \"singleGossip\"\n        );\n        setBalance(balance);\n      } catch (err) {\n        reportError(err, \"Failed to refresh balance\");\n      }\n    })();\n  }, [payer, connection, paymentRequired]);\n\n  React.useEffect(() => {\n    refreshBalance();\n    const onChange = () => {\n      if (document.visibilityState !== \"visible\") return;\n      refreshBalance();\n    };\n\n    document.addEventListener(\"visibilitychange\", onChange);\n    return () => document.removeEventListener(\"visibilitychange\", onChange);\n  }, [refreshBalance]);\n\n  React.useEffect(() => {\n    if (\n      payer === undefined ||\n      connection === undefined ||\n      paymentRequired !== true\n    )\n      return;\n    const subscription = connection.onAccountChange(\n      payer.publicKey,\n      (accountInfo: AccountInfo<Buffer>) => setBalance(accountInfo.lamports),\n      \"singleGossip\"\n    );\n\n    return () => {\n      connection.removeAccountChangeListener(subscription);\n    };\n  }, [payer, connection, paymentRequired]);\n\n  return (\n    <StateContext.Provider value={balance}>{children}</StateContext.Provider>\n  );\n}\n\nexport function useBalance(): Balance {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useBalance must be used within a BalanceProvider`);\n  }\n  return state;\n}\n","import * as React from \"react\";\nimport { useTransactions, TransactionState } from \"./index\";\n\ntype SetSelected = React.Dispatch<React.SetStateAction<string | undefined>>;\ntype SelectedState = [TransactionState | undefined, SetSelected];\nexport const SelectedContext = React.createContext<SelectedState | undefined>(\n  undefined\n);\ntype ProviderProps = { children: React.ReactNode };\nexport function SelectedTxProvider({ children }: ProviderProps) {\n  const transactions = useTransactions();\n  const [signature, selectSignature] = React.useState<string | undefined>(\n    undefined\n  );\n  const [transaction, selectTransaction] = React.useState<\n    TransactionState | undefined\n  >(undefined);\n\n  React.useEffect(() => {\n    selectTransaction(\n      transactions.find((tx) => tx.details.signature === signature)\n    );\n  }, [transactions, signature]);\n\n  const selectedState: SelectedState = React.useMemo(() => {\n    return [transaction, selectSignature];\n  }, [transaction]);\n\n  return (\n    <SelectedContext.Provider value={selectedState}>\n      {children}\n    </SelectedContext.Provider>\n  );\n}\n\nexport function useSelectedTransaction() {\n  const state = React.useContext(SelectedContext);\n  if (!state) {\n    throw new Error(`useSelectedTx must be used within a TransactionsProvider`);\n  }\n  return state[0];\n}\n\nexport function useSelectTransaction() {\n  const state = React.useContext(SelectedContext);\n  if (!state) {\n    throw new Error(`useSelectTx must be used within a TransactionsProvider`);\n  }\n  return state[1];\n}\n","import * as React from \"react\";\nimport { useServer } from \".\";\n\ntype SetSocket = React.Dispatch<React.SetStateAction<ServerSocket | undefined>>;\nconst SocketContext = React.createContext<WebSocket | undefined>(undefined);\n\ntype SetActiveUsers = React.Dispatch<React.SetStateAction<number>>;\nconst ActiveUsersContext = React.createContext<number | undefined>(undefined);\n\nconst SWITCH_URL_CODE = 4444;\n\ntype ServerSocket = {\n  socket: WebSocket;\n  id: number;\n};\n\nlet socketCounter = 0;\n\ntype SocketProviderProps = { children: React.ReactNode };\nexport function SocketProvider({ children }: SocketProviderProps) {\n  let [socket, setSocket] = React.useState<ServerSocket | undefined>(undefined);\n  let [activeUsers, setActiveUsers] = React.useState<number>(1);\n\n  const { webSocketUrl } = useServer();\n  React.useEffect(() => {\n    newSocket(webSocketUrl, setSocket, setActiveUsers);\n  }, [webSocketUrl]);\n\n  return (\n    <SocketContext.Provider value={socket?.socket}>\n      <ActiveUsersContext.Provider value={activeUsers}>\n        {children}\n      </ActiveUsersContext.Provider>\n    </SocketContext.Provider>\n  );\n}\n\nfunction newSocket(\n  webSocketUrl: string,\n  setSocket: SetSocket,\n  setActiveUsers: SetActiveUsers\n): WebSocket | undefined {\n  socketCounter++;\n  const id = socketCounter;\n\n  let socket: WebSocket;\n  try {\n    socket = new WebSocket(webSocketUrl);\n  } catch (err) {\n    return;\n  }\n\n  socket.onopen = () =>\n    setSocket((serverSocket) => {\n      if (!serverSocket || serverSocket.id <= id) {\n        if (serverSocket && serverSocket.socket.readyState === WebSocket.OPEN) {\n          serverSocket.socket.close(SWITCH_URL_CODE);\n        }\n        return { socket, id };\n      } else {\n        socket.close(SWITCH_URL_CODE);\n        return serverSocket;\n      }\n    });\n\n  socket.onmessage = (e) => {\n    const data = JSON.parse(e.data);\n    if (\"activeUsers\" in data) {\n      setActiveUsers(data.activeUsers);\n    }\n  };\n\n  socket.onclose = async (event) => {\n    setSocket((serverSocket) => {\n      // Socket may have been updated already\n      if (!serverSocket || serverSocket.id === id) {\n        // Reconnect if close was not explicit\n        if (event.code !== SWITCH_URL_CODE) {\n          console.error(\"Socket closed, reconnecting...\");\n          // TODO: Re-enable\n          // reportError(new Error(\"Socket was closed\"), \"Socket closed\");\n          setTimeout(() => {\n            newSocket(webSocketUrl, setSocket, setActiveUsers);\n          }, 5000);\n        }\n        return undefined;\n      }\n      return serverSocket;\n    });\n  };\n\n  socket.onerror = async () => {\n    socket.close();\n  };\n\n  return socket;\n}\n\nexport function useSocket() {\n  return React.useContext(SocketContext);\n}\n\nexport function useActiveUsers() {\n  const context = React.useContext(ActiveUsersContext);\n  if (!context) {\n    throw new Error(`useActiveUsers must be used within a SocketProvider`);\n  }\n\n  return context;\n}\n","import * as React from \"react\";\nimport { Blockhash, Connection } from \"@solana/web3.js\";\nimport { sleep, reportError } from \"utils\";\nimport { useConnection } from \".\";\n\nconst POLL_INTERVAL_MS = 20000;\n\nexport enum ActionType {\n  Start,\n  Stop,\n  Update,\n}\n\ninterface Stop {\n  type: ActionType.Stop;\n}\n\ninterface Update {\n  type: ActionType.Update;\n  blockhash: Blockhash;\n}\n\ninterface State {\n  blockhash?: Blockhash;\n}\n\ntype Action = Stop | Update;\ntype Dispatch = (action: Action) => void;\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case ActionType.Stop: {\n      return {};\n    }\n    case ActionType.Update: {\n      return Object.assign({}, state, {\n        blockhash: action.blockhash,\n      });\n    }\n  }\n}\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype BlockhashProviderProps = { children: React.ReactNode };\nexport function BlockhashProvider({ children }: BlockhashProviderProps) {\n  const [state, dispatch] = React.useReducer(reducer, {});\n  const connection = useConnection();\n  const connectionRef = React.useRef(connection);\n  const refreshingRef = React.useRef(false);\n\n  React.useEffect(() => {\n    if (connection === undefined) return;\n\n    connectionRef.current = connection;\n    refresh(dispatch, connectionRef, refreshingRef);\n    const timerId = window.setInterval(\n      () => refresh(dispatch, connectionRef, refreshingRef),\n      POLL_INTERVAL_MS\n    );\n\n    return () => {\n      clearInterval(timerId);\n      dispatch({ type: ActionType.Stop });\n    };\n  }, [connection]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport function useBlockhash() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(`useBlockhash must be used within a BlockhashProvider`);\n  }\n\n  return state.blockhash;\n}\n\nasync function refresh(\n  dispatch: Dispatch,\n  connectionRef: React.MutableRefObject<Connection | undefined>,\n  refreshingRef: React.MutableRefObject<boolean>\n) {\n  let blockhash = undefined;\n  const connection = connectionRef.current;\n  if (connection === undefined) return;\n\n  if (refreshingRef.current) return;\n  refreshingRef.current = true;\n\n  let reported = false;\n  while (blockhash === undefined && connection === connectionRef.current) {\n    try {\n      blockhash = (await connection.getRecentBlockhash(\"max\")).blockhash;\n      dispatch({ type: ActionType.Update, blockhash });\n    } catch (err) {\n      if (!reported) reportError(err, \"Failed to refresh blockhash\");\n      reported = true;\n      await sleep(1000);\n    }\n  }\n\n  refreshingRef.current = false;\n}\n","import React from \"react\";\nimport { useServer, useClusterModal } from \"../providers/server\";\n\nfunction ClusterStatusButton() {\n  const [, setShow] = useClusterModal();\n  const { name } = useServer();\n  return (\n    <span\n      className=\"btn lift d-block btn-info text-white\"\n      onClick={() => setShow(true)}\n    >\n      {name}\n    </span>\n  );\n}\n\nexport default ClusterStatusButton;\n","import * as React from \"react\";\n\nimport breakSvg from \"images/break.svg\";\nimport solanaSvg from \"images/solana.svg\";\nimport {\n  useGameState,\n  useResetGame,\n  COUNTDOWN_SECS,\n  useCountdown,\n} from \"providers/game\";\nimport ClusterStatusButton from \"./ClusterStatusButton\";\nimport { useBalance } from \"providers/rpc/balance\";\nimport { useConfig, useRefreshAccounts } from \"providers/server/http\";\n\nexport function Header() {\n  const gameState = useGameState();\n  const [countdown] = useCountdown();\n  const [, setRefresh] = React.useState<boolean>(false);\n  const resetGame = useResetGame();\n  const balance = useBalance();\n  const gameCostLamports = useConfig()?.gameCost || 0;\n  const refreshAccounts = useRefreshAccounts();\n  const balanceSufficient = balance >= gameCostLamports;\n\n  React.useEffect(() => {\n    if (countdown !== undefined) {\n      const timerId = setInterval(() => {\n        setRefresh((r) => !r);\n      }, 1000);\n      return () => clearTimeout(timerId);\n    }\n  }, [countdown]);\n\n  const cta = () => {\n    if (gameState === \"payment\" && balanceSufficient) {\n      return (\n        <div className=\"btn btn-pink lift\" onClick={refreshAccounts}>\n          Play\n        </div>\n      );\n    }\n\n    if (gameState === \"loading\" || gameState === \"payment\") {\n      return null;\n    }\n\n    if (gameState === \"reset\") {\n      return (\n        <div className=\"btn btn-pink lift\" onClick={resetGame}>\n          Play Again\n        </div>\n      );\n    }\n\n    let secondsRemaining = COUNTDOWN_SECS;\n    if (countdown !== undefined) {\n      secondsRemaining = Math.max(\n        0,\n        COUNTDOWN_SECS - Math.floor((performance.now() - countdown) / 1000)\n      );\n    }\n\n    return (\n      <div className=\"btn-group\">\n        <div className=\"btn btn-pink btn-secondary\">\n          <span className=\"fe fe-clock\" />\n        </div>\n        <div className=\"btn btn-pink btn-secondary gameState text-center\">\n          {secondsRemaining}s\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"header solana-header\">\n      <div className=\"header-body border-dark-purple\">\n        <div className=\"row align-items-center justify-content-between\">\n          <div className=\"col-auto d-flex flex-column d-md-block align-items-center\">\n            <img src={breakSvg} alt=\"break\" className=\"break mr-3\" />\n            <img src={solanaSvg} alt=\"solana\" className=\"solana\" />\n          </div>\n          <div className=\"col-auto\">\n            <div className=\"d-flex flex-row align-items-center\">\n              {cta()}\n              <div className=\"d-md-inline-block d-none ml-3\">\n                <ClusterStatusButton />\n              </div>\n              <a\n                className=\"btn btn-white lift ml-3\"\n                href=\"https://github.com/solana-labs/break\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <span className=\"fe fe-github mr-2\"></span>\n                Source\n              </a>\n            </div>\n          </div>\n        </div>\n        <div className=\"row align-items-center d-md-none mt-4\">\n          <div className=\"col-12\">\n            <ClusterStatusButton />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}