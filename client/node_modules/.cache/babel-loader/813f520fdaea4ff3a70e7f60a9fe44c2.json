{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from\"react\";import{useServer}from\"providers/server\";import{useBalance}from\"providers/balance\";import{fetchWithRetry}from\"./request\";import{useAccountState}from\"providers/account\";export var ConfigStatus;(function(ConfigStatus){ConfigStatus[ConfigStatus[\"Initialized\"]=0]=\"Initialized\";ConfigStatus[ConfigStatus[\"Fetching\"]=1]=\"Fetching\";ConfigStatus[ConfigStatus[\"Ready\"]=2]=\"Ready\";ConfigStatus[ConfigStatus[\"Failure\"]=3]=\"Failure\";})(ConfigStatus||(ConfigStatus={}));function configReducer(state,action){switch(action.status){case ConfigStatus.Ready:case ConfigStatus.Initialized:{return _objectSpread(_objectSpread({},state),action);}case ConfigStatus.Failure:{if(state.status===ConfigStatus.Fetching){return _objectSpread(_objectSpread({},state),action);}else{return state;}}case ConfigStatus.Fetching:{return _objectSpread(_objectSpread(_objectSpread({},state),action),{},{accounts:undefined});}}}var StateContext=React.createContext(undefined);var RefContext=React.createContext(undefined);var DispatchContext=React.createContext(undefined);export function ApiProvider(_ref){var children=_ref.children;var _React$useReducer=React.useReducer(configReducer,{status:ConfigStatus.Fetching}),_React$useReducer2=_slicedToArray(_React$useReducer,2),state=_React$useReducer2[0],dispatch=_React$useReducer2[1];var _useServer=useServer(),httpUrl=_useServer.httpUrl;var httpUrlRef=React.useRef(httpUrl);React.useEffect(function(){httpUrlRef.current=httpUrl;initConfig(dispatch,httpUrlRef);},[httpUrl]);var config=state.config;var paymentRequired=config===null||config===void 0?void 0:config.paymentRequired;React.useEffect(function(){httpUrlRef.current=httpUrl;if(paymentRequired!==false)return;refreshAccounts(dispatch,httpUrlRef,undefined);},[httpUrl,paymentRequired]);return/*#__PURE__*/React.createElement(StateContext.Provider,{value:state},/*#__PURE__*/React.createElement(DispatchContext.Provider,{value:dispatch},/*#__PURE__*/React.createElement(RefContext.Provider,{value:httpUrlRef},children)));}function initConfig(_x,_x2){return _initConfig.apply(this,arguments);}function _initConfig(){_initConfig=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,httpUrlRef){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",fetchWithRetry(dispatch,httpUrlRef,{route:\"init\"}));case 1:case\"end\":return _context.stop();}}},_callee);}));return _initConfig.apply(this,arguments);}function refreshAccounts(_x3,_x4,_x5){return _refreshAccounts.apply(this,arguments);}function _refreshAccounts(){_refreshAccounts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch,httpUrlRef,paymentAccount){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",fetchWithRetry(dispatch,httpUrlRef,{route:\"accounts\",paymentAccount:paymentAccount}));case 1:case\"end\":return _context2.stop();}}},_callee2);}));return _refreshAccounts.apply(this,arguments);}export function useAccounts(){var context=React.useContext(StateContext);if(!context){throw new Error(\"useAccounts must be used within a ApiProvider\");}return context.accounts;}export function useConfig(){var context=React.useContext(StateContext);if(!context){throw new Error(\"useConfig must be used within a ApiProvider\");}return context.config;}export function useConnection(){var config=useConfig();return config===null||config===void 0?void 0:config.connection;}export function useIsFetching(){var context=React.useContext(StateContext);if(!context){throw new Error(\"useIsFetching must be used within a ApiProvider\");}return context.status===ConfigStatus.Fetching;}export function useClusterParam(){var _context$config;var context=React.useContext(StateContext);if(!context){throw new Error(\"useClusterParam must be used within a ApiProvider\");}var cluster=context===null||context===void 0?void 0:(_context$config=context.config)===null||_context$config===void 0?void 0:_context$config.cluster;if(cluster&&cluster!==\"mainnet-beta\"){return\"cluster=\".concat(cluster);}else{return\"\";}}export function useClearAccounts(){var dispatch=React.useContext(DispatchContext);if(!dispatch){throw new Error(\"useClearAccounts must be used within a ApiProvider\");}return React.useCallback(function(){dispatch({status:ConfigStatus.Fetching});dispatch({status:ConfigStatus.Failure});},[dispatch]);}export function useRefreshAccounts(){var dispatch=React.useContext(DispatchContext);if(!dispatch){throw new Error(\"useRefreshAccounts must be used within a ApiProvider\");}var httpUrlRef=React.useContext(RefContext);if(!httpUrlRef){throw new Error(\"useRefreshAccounts must be used within a ApiProvider\");}var config=useConfig();var _useAccountState=useAccountState(),_useAccountState2=_slicedToArray(_useAccountState,1),paymentAccount=_useAccountState2[0];var paymentRequired=config===null||config===void 0?void 0:config.paymentRequired;var balance=useBalance();var cost=config===null||config===void 0?void 0:config.gameCost;return React.useCallback(function(){if(paymentRequired===undefined||cost===undefined)return;if(paymentRequired){if(!paymentAccount||balance===\"loading\"||balance<cost){dispatch({status:ConfigStatus.Fetching});dispatch({status:ConfigStatus.Failure});return;}refreshAccounts(dispatch,httpUrlRef,paymentAccount);}else{refreshAccounts(dispatch,httpUrlRef,undefined);}},[httpUrlRef,dispatch,paymentAccount,paymentRequired,balance,cost]);}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/api/index.tsx"],"names":["React","useServer","useBalance","fetchWithRetry","useAccountState","ConfigStatus","configReducer","state","action","status","Ready","Initialized","Failure","Fetching","accounts","undefined","StateContext","createContext","RefContext","DispatchContext","ApiProvider","children","useReducer","dispatch","httpUrl","httpUrlRef","useRef","useEffect","current","initConfig","config","paymentRequired","refreshAccounts","route","paymentAccount","useAccounts","context","useContext","Error","useConfig","useConnection","connection","useIsFetching","useClusterParam","cluster","useClearAccounts","useCallback","useRefreshAccounts","balance","cost","gameCost"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Config, AccountsConfig } from \"./config\";\nimport { useServer } from \"providers/server\";\nimport { useBalance } from \"providers/balance\";\nimport { fetchWithRetry } from \"./request\";\nimport { Account, Connection } from \"@solana/web3.js\";\nimport { useAccountState } from \"providers/account\";\n\nexport enum ConfigStatus {\n  Initialized,\n  Fetching,\n  Ready,\n  Failure,\n}\n\ninterface State {\n  status: ConfigStatus;\n  config?: Config;\n  connection?: Connection;\n  accounts?: AccountsConfig;\n}\n\ninterface Initialized {\n  status: ConfigStatus.Initialized;\n  config: Config;\n}\n\ninterface Fetching {\n  status: ConfigStatus.Fetching;\n}\n\ninterface Ready {\n  status: ConfigStatus.Ready;\n  accounts: AccountsConfig;\n}\n\ninterface Failure {\n  status: ConfigStatus.Failure;\n  config?: undefined;\n  accounts?: undefined;\n}\n\nexport type Action = Initialized | Fetching | Ready | Failure;\nexport type Dispatch = (action: Action) => void;\n\nfunction configReducer(state: State, action: Action): State {\n  switch (action.status) {\n    case ConfigStatus.Ready:\n    case ConfigStatus.Initialized: {\n      return { ...state, ...action };\n    }\n    case ConfigStatus.Failure: {\n      if (state.status === ConfigStatus.Fetching) {\n        return { ...state, ...action };\n      } else {\n        return state;\n      }\n    }\n    case ConfigStatus.Fetching: {\n      return {\n        ...state,\n        ...action,\n        accounts: undefined,\n      };\n    }\n  }\n}\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst RefContext = React.createContext<\n  React.MutableRefObject<string> | undefined\n>(undefined);\nconst DispatchContext = React.createContext<\n  Dispatch | undefined\n>(undefined);\n\ntype ApiProviderProps = { children: React.ReactNode };\nexport function ApiProvider({ children }: ApiProviderProps) {\n  const [state, dispatch] = React.useReducer(configReducer, {\n    status: ConfigStatus.Fetching,\n  });\n\n  const { httpUrl } = useServer();\n  const httpUrlRef = React.useRef(httpUrl);\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    initConfig(dispatch, httpUrlRef);\n  }, [httpUrl]);\n\n  const config = state.config;\n  const paymentRequired = config?.paymentRequired;\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    if (paymentRequired !== false) return;\n    refreshAccounts(dispatch, httpUrlRef, undefined);\n  }, [httpUrl, paymentRequired]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <RefContext.Provider value={httpUrlRef}>\n          {children}\n        </RefContext.Provider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function initConfig(\n  dispatch: Dispatch,\n  httpUrlRef: React.MutableRefObject<string>\n): Promise<void> {\n  return fetchWithRetry(dispatch, httpUrlRef, { route: \"init\" });\n}\n\nasync function refreshAccounts(\n  dispatch: Dispatch,\n  httpUrlRef: React.MutableRefObject<string>,\n  paymentAccount: Account | undefined\n): Promise<void> {\n  return fetchWithRetry(dispatch, httpUrlRef, {\n    route: \"accounts\",\n    paymentAccount,\n  });\n}\n\nexport function useAccounts() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useAccounts must be used within a ApiProvider`);\n  }\n  return context.accounts;\n}\n\nexport function useConfig() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useConfig must be used within a ApiProvider`);\n  }\n  return context.config;\n}\n\nexport function useConnection() {\n  const config = useConfig();\n  return config?.connection;\n}\n\nexport function useIsFetching() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useIsFetching must be used within a ApiProvider`);\n  }\n  return context.status === ConfigStatus.Fetching;\n}\n\nexport function useClusterParam(): string {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useClusterParam must be used within a ApiProvider`);\n  }\n  const cluster = context?.config?.cluster;\n  if (cluster && cluster !== \"mainnet-beta\") {\n    return `cluster=${cluster}`;\n  } else {\n    return \"\";\n  }\n}\n\nexport function useClearAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useClearAccounts must be used within a ApiProvider`);\n  }\n\n  return React.useCallback(() => {\n    dispatch({ status: ConfigStatus.Fetching });\n    dispatch({ status: ConfigStatus.Failure });\n  }, [dispatch]);\n}\n\nexport function useRefreshAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n  const httpUrlRef = React.useContext(RefContext);\n  if (!httpUrlRef) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n  const config = useConfig();\n  const [paymentAccount] = useAccountState();\n  const paymentRequired = config?.paymentRequired;\n  const balance = useBalance();\n  const cost = config?.gameCost;\n  return React.useCallback(() => {\n    if (paymentRequired === undefined || cost === undefined) return;\n    if (paymentRequired) {\n      if (!paymentAccount || balance === \"loading\" || balance < cost) {\n        dispatch({ status: ConfigStatus.Fetching });\n        dispatch({ status: ConfigStatus.Failure });\n        return;\n      }\n      refreshAccounts(dispatch, httpUrlRef, paymentAccount);\n    } else {\n      refreshAccounts(dispatch, httpUrlRef, undefined);\n    }\n  }, [httpUrlRef, dispatch, paymentAccount, paymentRequired, balance, cost]);\n}\n"]},"metadata":{},"sourceType":"module"}