{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import*as React from\"react\";import{sleep,reportError}from\"utils\";import{useConnection}from\".\";var POLL_INTERVAL_MS=20000;export var ActionType;(function(ActionType){ActionType[ActionType[\"Start\"]=0]=\"Start\";ActionType[ActionType[\"Stop\"]=1]=\"Stop\";ActionType[ActionType[\"Update\"]=2]=\"Update\";})(ActionType||(ActionType={}));function reducer(state,action){switch(action.type){case ActionType.Stop:{return{};}case ActionType.Update:{return Object.assign({},state,{blockhash:action.blockhash});}}}var StateContext=/*#__PURE__*/React.createContext(undefined);var DispatchContext=/*#__PURE__*/React.createContext(undefined);export function BlockhashProvider(_ref){var children=_ref.children;var _React$useReducer=React.useReducer(reducer,{}),_React$useReducer2=_slicedToArray(_React$useReducer,2),state=_React$useReducer2[0],dispatch=_React$useReducer2[1];var connection=useConnection();var connectionRef=React.useRef(connection);var refreshingRef=React.useRef(false);React.useEffect(function(){if(connection===undefined)return;connectionRef.current=connection;refresh(dispatch,connectionRef,refreshingRef);var timerId=window.setInterval(function(){return refresh(dispatch,connectionRef,refreshingRef);},POLL_INTERVAL_MS);return function(){clearInterval(timerId);dispatch({type:ActionType.Stop});};},[connection]);return/*#__PURE__*/_jsx(StateContext.Provider,{value:state,children:/*#__PURE__*/_jsx(DispatchContext.Provider,{value:dispatch,children:children})});}export function useBlockhash(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useBlockhash must be used within a BlockhashProvider\");}return state.blockhash;}function refresh(_x,_x2,_x3){return _refresh.apply(this,arguments);}function _refresh(){_refresh=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,connectionRef,refreshingRef){var blockhash,connection,reported;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:blockhash=undefined;connection=connectionRef.current;if(!(connection===undefined)){_context.next=4;break;}return _context.abrupt(\"return\");case 4:if(!refreshingRef.current){_context.next=6;break;}return _context.abrupt(\"return\");case 6:refreshingRef.current=true;reported=false;case 8:if(!(blockhash===undefined&&connection===connectionRef.current)){_context.next=24;break;}_context.prev=9;_context.next=12;return connection.getRecentBlockhash(\"max\");case 12:blockhash=_context.sent.blockhash;dispatch({type:ActionType.Update,blockhash:blockhash});_context.next=22;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](9);if(!reported)reportError(_context.t0,\"Failed to refresh blockhash\");reported=true;_context.next=22;return sleep(1000);case 22:_context.next=8;break;case 24:refreshingRef.current=false;case 25:case\"end\":return _context.stop();}}},_callee,null,[[9,16]]);}));return _refresh.apply(this,arguments);}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/rpc/blockhash.tsx"],"names":["React","sleep","reportError","useConnection","POLL_INTERVAL_MS","ActionType","reducer","state","action","type","Stop","Update","Object","assign","blockhash","StateContext","createContext","undefined","DispatchContext","BlockhashProvider","children","useReducer","dispatch","connection","connectionRef","useRef","refreshingRef","useEffect","current","refresh","timerId","window","setInterval","clearInterval","useBlockhash","useContext","Error","reported","getRecentBlockhash"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Blockhash, Connection } from \"@solana/web3.js\";\nimport { sleep, reportError } from \"utils\";\nimport { useConnection } from \".\";\n\nconst POLL_INTERVAL_MS = 20000;\n\nexport enum ActionType {\n  Start,\n  Stop,\n  Update,\n}\n\ninterface Stop {\n  type: ActionType.Stop;\n}\n\ninterface Update {\n  type: ActionType.Update;\n  blockhash: Blockhash;\n}\n\ninterface State {\n  blockhash?: Blockhash;\n}\n\ntype Action = Stop | Update;\ntype Dispatch = (action: Action) => void;\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case ActionType.Stop: {\n      return {};\n    }\n    case ActionType.Update: {\n      return Object.assign({}, state, {\n        blockhash: action.blockhash,\n      });\n    }\n  }\n}\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype BlockhashProviderProps = { children: React.ReactNode };\nexport function BlockhashProvider({ children }: BlockhashProviderProps) {\n  const [state, dispatch] = React.useReducer(reducer, {});\n  const connection = useConnection();\n  const connectionRef = React.useRef(connection);\n  const refreshingRef = React.useRef(false);\n\n  React.useEffect(() => {\n    if (connection === undefined) return;\n\n    connectionRef.current = connection;\n    refresh(dispatch, connectionRef, refreshingRef);\n    const timerId = window.setInterval(\n      () => refresh(dispatch, connectionRef, refreshingRef),\n      POLL_INTERVAL_MS\n    );\n\n    return () => {\n      clearInterval(timerId);\n      dispatch({ type: ActionType.Stop });\n    };\n  }, [connection]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport function useBlockhash() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(`useBlockhash must be used within a BlockhashProvider`);\n  }\n\n  return state.blockhash;\n}\n\nasync function refresh(\n  dispatch: Dispatch,\n  connectionRef: React.MutableRefObject<Connection | undefined>,\n  refreshingRef: React.MutableRefObject<boolean>\n) {\n  let blockhash = undefined;\n  const connection = connectionRef.current;\n  if (connection === undefined) return;\n\n  if (refreshingRef.current) return;\n  refreshingRef.current = true;\n\n  let reported = false;\n  while (blockhash === undefined && connection === connectionRef.current) {\n    try {\n      blockhash = (await connection.getRecentBlockhash(\"max\")).blockhash;\n      dispatch({ type: ActionType.Update, blockhash });\n    } catch (err) {\n      if (!reported) reportError(err, \"Failed to refresh blockhash\");\n      reported = true;\n      await sleep(1000);\n    }\n  }\n\n  refreshingRef.current = false;\n}\n"]},"metadata":{},"sourceType":"module"}