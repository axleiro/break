{"ast":null,"code":"import*as React from\"react\";import{useAccounts}from\"../server/http\";import{useDispatch,COMMITMENT_PARAM}from\"./index\";import*as Bytes from\"utils/bytes\";import{useConnection}from\"providers/rpc\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";export var DEBUG_MODE=new URLSearchParams(window.location.search).has(\"debug\");// Determine commitment levels to subscribe to. \"singleGossip\" is used\n// to stop tx send retries so it must be returned\nvar subscribedCommitments=function subscribedCommitments(){if(DEBUG_MODE)return[\"recent\",\"single\",\"singleGossip\"];switch(COMMITMENT_PARAM){case\"recent\":case\"single\":{return[COMMITMENT_PARAM,\"singleGossip\"];}default:{return[\"singleGossip\"];}}};export function ConfirmedHelper(_ref){var children=_ref.children;var dispatch=useDispatch();var connection=useConnection();var accounts=useAccounts();React.useEffect(function(){if(connection===undefined||accounts===undefined)return;var commitments=subscribedCommitments();var partitionCount=accounts.programAccounts.length;var accountSubscriptions=accounts.programAccounts.map(function(account,partition){return commitments.map(function(commitment){return connection.onAccountChange(account,function(accountInfo,_ref2){var slot=_ref2.slot;var ids=new Set(Bytes.programDataToIds(accountInfo.data));var activeIdPartition={ids:ids,partition:partition,partitionCount:partitionCount};dispatch({type:\"update\",activeIdPartition:activeIdPartition,commitment:commitment,estimatedSlot:slot,receivedAt:performance.now()});},commitment);});});return function(){accountSubscriptions.forEach(function(listeners){listeners.forEach(function(listener){connection.removeAccountChangeListener(listener);});});};},[dispatch,connection,accounts]);return/*#__PURE__*/_jsx(_Fragment,{children:children});}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/confirmed.tsx"],"names":["React","useAccounts","useDispatch","COMMITMENT_PARAM","Bytes","useConnection","DEBUG_MODE","URLSearchParams","window","location","search","has","subscribedCommitments","ConfirmedHelper","children","dispatch","connection","accounts","useEffect","undefined","commitments","partitionCount","programAccounts","length","accountSubscriptions","map","account","partition","commitment","onAccountChange","accountInfo","slot","ids","Set","programDataToIds","data","activeIdPartition","type","estimatedSlot","receivedAt","performance","now","forEach","listeners","listener","removeAccountChangeListener"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CAGA,OAASC,WAAT,KAA4B,gBAA5B,CACA,OAASC,WAAT,CAAyCC,gBAAzC,KAAiE,SAAjE,CACA,MAAO,GAAKC,CAAAA,KAAZ,KAAuB,aAAvB,CACA,OAASC,aAAT,KAA8B,eAA9B,C,gGAEA,MAAO,IAAMC,CAAAA,UAAU,CAAG,GAAIC,CAAAA,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,EAA4CC,GAA5C,CACxB,OADwB,CAAnB,CAIP;AACA;AACA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,EAA2B,CACvD,GAAIN,UAAJ,CAAgB,MAAO,CAAC,QAAD,CAAW,QAAX,CAAqB,cAArB,CAAP,CAChB,OAAQH,gBAAR,EACE,IAAK,QAAL,CACA,IAAK,QAAL,CAAe,CACb,MAAO,CAACA,gBAAD,CAAmB,cAAnB,CAAP,CACD,CACD,QAAS,CACP,MAAO,CAAC,cAAD,CAAP,CACD,CAPH,CASD,CAXD,CAcA,MAAO,SAASU,CAAAA,eAAT,MAA8C,IAAnBC,CAAAA,QAAmB,MAAnBA,QAAmB,CACnD,GAAMC,CAAAA,QAAQ,CAAGb,WAAW,EAA5B,CACA,GAAMc,CAAAA,UAAU,CAAGX,aAAa,EAAhC,CACA,GAAMY,CAAAA,QAAQ,CAAGhB,WAAW,EAA5B,CAEAD,KAAK,CAACkB,SAAN,CAAgB,UAAM,CACpB,GAAIF,UAAU,GAAKG,SAAf,EAA4BF,QAAQ,GAAKE,SAA7C,CAAwD,OAExD,GAAMC,CAAAA,WAAW,CAAGR,qBAAqB,EAAzC,CACA,GAAMS,CAAAA,cAAc,CAAGJ,QAAQ,CAACK,eAAT,CAAyBC,MAAhD,CAEA,GAAMC,CAAAA,oBAAoB,CAAGP,QAAQ,CAACK,eAAT,CAAyBG,GAAzB,CAC3B,SAACC,OAAD,CAAUC,SAAV,QACEP,CAAAA,WAAW,CAACK,GAAZ,CAAgB,SAACG,UAAD,QACdZ,CAAAA,UAAU,CAACa,eAAX,CACEH,OADF,CAEE,SAACI,WAAD,OAAgD,IAAXC,CAAAA,IAAW,OAAXA,IAAW,CAC9C,GAAMC,CAAAA,GAAG,CAAG,GAAIC,CAAAA,GAAJ,CAAQ7B,KAAK,CAAC8B,gBAAN,CAAuBJ,WAAW,CAACK,IAAnC,CAAR,CAAZ,CACA,GAAMC,CAAAA,iBAAiB,CAAG,CACxBJ,GAAG,CAAHA,GADwB,CAExBL,SAAS,CAATA,SAFwB,CAGxBN,cAAc,CAAdA,cAHwB,CAA1B,CAKAN,QAAQ,CAAC,CACPsB,IAAI,CAAE,QADC,CAEPD,iBAAiB,CAAjBA,iBAFO,CAGPR,UAAU,CAAVA,UAHO,CAIPU,aAAa,CAAEP,IAJR,CAKPQ,UAAU,CAAEC,WAAW,CAACC,GAAZ,EALL,CAAD,CAAR,CAOD,CAhBH,CAiBEb,UAjBF,CADc,EAAhB,CADF,EAD2B,CAA7B,CAyBA,MAAO,WAAM,CACXJ,oBAAoB,CAACkB,OAArB,CAA6B,SAACC,SAAD,CAAe,CAC1CA,SAAS,CAACD,OAAV,CAAkB,SAACE,QAAD,CAAc,CAC9B5B,UAAU,CAAC6B,2BAAX,CAAuCD,QAAvC,EACD,CAFD,EAGD,CAJD,EAKD,CAND,CAOD,CAtCD,CAsCG,CAAC7B,QAAD,CAAWC,UAAX,CAAuBC,QAAvB,CAtCH,EAwCA,mBAAO,yBAAGH,QAAH,EAAP,CACD","sourcesContent":["import * as React from \"react\";\n\nimport { AccountInfo } from \"@solana/web3.js\";\nimport { useAccounts } from \"../server/http\";\nimport { useDispatch, TrackedCommitment, COMMITMENT_PARAM } from \"./index\";\nimport * as Bytes from \"utils/bytes\";\nimport { useConnection } from \"providers/rpc\";\n\nexport const DEBUG_MODE = new URLSearchParams(window.location.search).has(\n  \"debug\"\n);\n\n// Determine commitment levels to subscribe to. \"singleGossip\" is used\n// to stop tx send retries so it must be returned\nconst subscribedCommitments = (): TrackedCommitment[] => {\n  if (DEBUG_MODE) return [\"recent\", \"single\", \"singleGossip\"];\n  switch (COMMITMENT_PARAM) {\n    case \"recent\":\n    case \"single\": {\n      return [COMMITMENT_PARAM, \"singleGossip\"];\n    }\n    default: {\n      return [\"singleGossip\"];\n    }\n  }\n};\n\ntype Props = { children: React.ReactNode };\nexport function ConfirmedHelper({ children }: Props) {\n  const dispatch = useDispatch();\n  const connection = useConnection();\n  const accounts = useAccounts();\n\n  React.useEffect(() => {\n    if (connection === undefined || accounts === undefined) return;\n\n    const commitments = subscribedCommitments();\n    const partitionCount = accounts.programAccounts.length;\n\n    const accountSubscriptions = accounts.programAccounts.map(\n      (account, partition) =>\n        commitments.map((commitment) =>\n          connection.onAccountChange(\n            account,\n            (accountInfo: AccountInfo<Buffer>, { slot }) => {\n              const ids = new Set(Bytes.programDataToIds(accountInfo.data));\n              const activeIdPartition = {\n                ids,\n                partition,\n                partitionCount,\n              };\n              dispatch({\n                type: \"update\",\n                activeIdPartition,\n                commitment,\n                estimatedSlot: slot,\n                receivedAt: performance.now(),\n              });\n            },\n            commitment\n          )\n        )\n    );\n\n    return () => {\n      accountSubscriptions.forEach((listeners) => {\n        listeners.forEach((listener) => {\n          connection.removeAccountChangeListener(listener);\n        });\n      });\n    };\n  }, [dispatch, connection, accounts]);\n\n  return <>{children}</>;\n}\n"]},"metadata":{},"sourceType":"module"}