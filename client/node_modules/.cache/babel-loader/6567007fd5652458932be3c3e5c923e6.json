{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/tps.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useCreatedCount } from \"./index\";\nconst TPS_REFRESH_MS = 100;\nconst TPS_LOOK_BACK = 10;\nexport const TpsContext = /*#__PURE__*/React.createContext(undefined);\nexport function TpsProvider({\n  children\n}) {\n  _s();\n\n  const [tps, setTps] = React.useState(0);\n  const createdCount = useCreatedCount();\n  const createdCountRef = React.useRef(0);\n  createdCountRef.current = createdCount;\n  React.useEffect(() => {\n    const recentCounts = [];\n    const timerId = setInterval(() => {\n      if (createdCountRef.current === 0) {\n        recentCounts.splice(0);\n        setTps(0);\n        return;\n      }\n\n      recentCounts.push(createdCountRef.current);\n\n      while (recentCounts.length - 1 > TPS_LOOK_BACK) {\n        recentCounts.shift();\n      }\n\n      const ticksElapsed = recentCounts.length - 1;\n      if (ticksElapsed <= 0) return;\n      const oldTxCount = recentCounts[0];\n      const latestTxCount = recentCounts[ticksElapsed];\n      const tps = (latestTxCount - oldTxCount) / (TPS_REFRESH_MS / 1000 * ticksElapsed);\n      setTps(Math.floor(tps));\n    }, TPS_REFRESH_MS);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TpsContext.Provider, {\n    value: tps,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n}\n\n_s(TpsProvider, \"Kw0BacCd/ikXXjdL4nBWftUBbYc=\", false, function () {\n  return [useCreatedCount];\n});\n\n_c = TpsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TpsProvider\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/tps.tsx"],"names":["React","useCreatedCount","TPS_REFRESH_MS","TPS_LOOK_BACK","TpsContext","createContext","undefined","TpsProvider","children","tps","setTps","useState","createdCount","createdCountRef","useRef","current","useEffect","recentCounts","timerId","setInterval","splice","push","length","shift","ticksElapsed","oldTxCount","latestTxCount","Math","floor","clearInterval"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,eAAT,QAAgC,SAAhC;AAEA,MAAMC,cAAc,GAAG,GAAvB;AACA,MAAMC,aAAa,GAAG,EAAtB;AAEA,OAAO,MAAMC,UAAU,gBAAGJ,KAAK,CAACK,aAAN,CAAwCC,SAAxC,CAAnB;AAEP,OAAO,SAASC,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAkD;AAAA;;AACvD,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBV,KAAK,CAACW,QAAN,CAAe,CAAf,CAAtB;AACA,QAAMC,YAAY,GAAGX,eAAe,EAApC;AACA,QAAMY,eAAe,GAAGb,KAAK,CAACc,MAAN,CAAa,CAAb,CAAxB;AACAD,EAAAA,eAAe,CAACE,OAAhB,GAA0BH,YAA1B;AAEAZ,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpB,UAAMC,YAAsB,GAAG,EAA/B;AACA,UAAMC,OAAO,GAAGC,WAAW,CAAC,MAAM;AAChC,UAAIN,eAAe,CAACE,OAAhB,KAA4B,CAAhC,EAAmC;AACjCE,QAAAA,YAAY,CAACG,MAAb,CAAoB,CAApB;AACAV,QAAAA,MAAM,CAAC,CAAD,CAAN;AACA;AACD;;AAEDO,MAAAA,YAAY,CAACI,IAAb,CAAkBR,eAAe,CAACE,OAAlC;;AACA,aAAOE,YAAY,CAACK,MAAb,GAAsB,CAAtB,GAA0BnB,aAAjC,EAAgD;AAC9Cc,QAAAA,YAAY,CAACM,KAAb;AACD;;AAED,YAAMC,YAAY,GAAGP,YAAY,CAACK,MAAb,GAAsB,CAA3C;AACA,UAAIE,YAAY,IAAI,CAApB,EAAuB;AAEvB,YAAMC,UAAU,GAAGR,YAAY,CAAC,CAAD,CAA/B;AACA,YAAMS,aAAa,GAAGT,YAAY,CAACO,YAAD,CAAlC;AACA,YAAMf,GAAG,GACP,CAACiB,aAAa,GAAGD,UAAjB,KAAiCvB,cAAc,GAAG,IAAlB,GAA0BsB,YAA1D,CADF;AAEAd,MAAAA,MAAM,CAACiB,IAAI,CAACC,KAAL,CAAWnB,GAAX,CAAD,CAAN;AACD,KApB0B,EAoBxBP,cApBwB,CAA3B;AAqBA,WAAO,MAAM;AACX2B,MAAAA,aAAa,CAACX,OAAD,CAAb;AACD,KAFD;AAGD,GA1BD,EA0BG,EA1BH;AA4BA,sBAAO,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAET,GAA5B;AAAA,cAAkCD;AAAlC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAnCeD,W;UAEON,e;;;KAFPM,W","sourcesContent":["import * as React from \"react\";\nimport { useCreatedCount } from \"./index\";\n\nconst TPS_REFRESH_MS = 100;\nconst TPS_LOOK_BACK = 10;\n\nexport const TpsContext = React.createContext<number | undefined>(undefined);\ntype ProviderProps = { children: React.ReactNode };\nexport function TpsProvider({ children }: ProviderProps) {\n  const [tps, setTps] = React.useState(0);\n  const createdCount = useCreatedCount();\n  const createdCountRef = React.useRef(0);\n  createdCountRef.current = createdCount;\n\n  React.useEffect(() => {\n    const recentCounts: number[] = [];\n    const timerId = setInterval(() => {\n      if (createdCountRef.current === 0) {\n        recentCounts.splice(0);\n        setTps(0);\n        return;\n      }\n\n      recentCounts.push(createdCountRef.current);\n      while (recentCounts.length - 1 > TPS_LOOK_BACK) {\n        recentCounts.shift();\n      }\n\n      const ticksElapsed = recentCounts.length - 1;\n      if (ticksElapsed <= 0) return;\n\n      const oldTxCount = recentCounts[0];\n      const latestTxCount = recentCounts[ticksElapsed];\n      const tps =\n        (latestTxCount - oldTxCount) / ((TPS_REFRESH_MS / 1000) * ticksElapsed);\n      setTps(Math.floor(tps));\n    }, TPS_REFRESH_MS);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  return <TpsContext.Provider value={tps}>{children}</TpsContext.Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}