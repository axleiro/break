{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useAccounts } from \"../server/http\";\nimport { useDispatch, COMMITMENT_PARAM } from \"./index\";\nimport { useConnection } from \"providers/rpc\";\nexport const DEBUG_MODE = new URLSearchParams(window.location.search).has(\"debug\"); // Determine commitment levels to subscribe to. \"singleGossip\" is used\n// to stop tx send retries so it must be returned\n\nconst subscribedCommitments = () => {\n  if (DEBUG_MODE) return [\"recent\", \"single\", \"singleGossip\"];\n\n  switch (COMMITMENT_PARAM) {\n    case \"recent\":\n    case \"single\":\n      {\n        return [COMMITMENT_PARAM, \"singleGossip\"];\n      }\n\n    default:\n      {\n        return [\"singleGossip\"];\n      }\n  }\n};\n\nexport function ConfirmedHelper({\n  children\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const connection = useConnection();\n  const accounts = useAccounts();\n  React.useEffect(() => {\n    if (connection === undefined || accounts === undefined) return;\n    const commitments = subscribedCommitments();\n    const partitionCount = accounts.programAccounts.length;\n    const accountSubscriptions = []; // const accountSubscriptions = accounts.programAccounts.map(\n    //   (account, partition) =>\n    //     commitments.map((commitment) =>\n    //       connection.onAccountChange(\n    //         account,\n    //         (accountInfo: AccountInfo<Buffer>, { slot }) => {\n    //           const ids = new Set(Bytes.programDataToIds(accountInfo.data));\n    //           const activeIdPartition = {\n    //             ids,\n    //             partition,\n    //             partitionCount,\n    //           };\n    //           dispatch({\n    //             type: \"update\",\n    //             activeIdPartition,\n    //             commitment,\n    //             estimatedSlot: slot,\n    //             receivedAt: performance.now(),\n    //           });\n    //         },\n    //         commitment\n    //       )\n    //     )\n    // );\n\n    return () => {\n      accountSubscriptions.forEach(listeners => {\n        listeners.forEach(listener => {\n          connection.removeAccountChangeListener(listener);\n        });\n      });\n    };\n  }, [dispatch, connection, accounts]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n}\n\n_s(ConfirmedHelper, \"tMnGfpAShAeQRQeDw31IhQeTKrI=\", false, function () {\n  return [useDispatch, useConnection, useAccounts];\n});\n\n_c = ConfirmedHelper;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfirmedHelper\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/confirmed.tsx"],"names":["React","useAccounts","useDispatch","COMMITMENT_PARAM","useConnection","DEBUG_MODE","URLSearchParams","window","location","search","has","subscribedCommitments","ConfirmedHelper","children","dispatch","connection","accounts","useEffect","undefined","commitments","partitionCount","programAccounts","length","accountSubscriptions","forEach","listeners","listener","removeAccountChangeListener"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,WAAT,EAAyCC,gBAAzC,QAAiE,SAAjE;AAEA,SAASC,aAAT,QAA8B,eAA9B;AAEA,OAAO,MAAMC,UAAU,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,EAA4CC,GAA5C,CACxB,OADwB,CAAnB,C,CAIP;AACA;;AACA,MAAMC,qBAAqB,GAAG,MAA2B;AACvD,MAAIN,UAAJ,EAAgB,OAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,cAArB,CAAP;;AAChB,UAAQF,gBAAR;AACE,SAAK,QAAL;AACA,SAAK,QAAL;AAAe;AACb,eAAO,CAACA,gBAAD,EAAmB,cAAnB,CAAP;AACD;;AACD;AAAS;AACP,eAAO,CAAC,cAAD,CAAP;AACD;AAPH;AASD,CAXD;;AAcA,OAAO,SAASS,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAA8C;AAAA;;AACnD,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,UAAU,GAAGX,aAAa,EAAhC;AACA,QAAMY,QAAQ,GAAGf,WAAW,EAA5B;AAEAD,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACpB,QAAIF,UAAU,KAAKG,SAAf,IAA4BF,QAAQ,KAAKE,SAA7C,EAAwD;AAExD,UAAMC,WAAW,GAAGR,qBAAqB,EAAzC;AACA,UAAMS,cAAc,GAAGJ,QAAQ,CAACK,eAAT,CAAyBC,MAAhD;AAEA,UAAMC,oBAA2B,GAAG,EAApC,CANoB,CAOpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAO,MAAM;AACXA,MAAAA,oBAAoB,CAACC,OAArB,CAA8BC,SAAD,IAAe;AAC1CA,QAAAA,SAAS,CAACD,OAAV,CAAmBE,QAAD,IAAc;AAC9BX,UAAAA,UAAU,CAACY,2BAAX,CAAuCD,QAAvC;AACD,SAFD;AAGD,OAJD;AAKD,KAND;AAOD,GAvCD,EAuCG,CAACZ,QAAD,EAAWC,UAAX,EAAuBC,QAAvB,CAvCH;AAyCA,sBAAO;AAAA,cAAGH;AAAH,mBAAP;AACD;;GA/CeD,e;UACGV,W,EACEE,a,EACFH,W;;;KAHHW,e","sourcesContent":["import * as React from \"react\";\n\nimport { AccountInfo } from \"@solana/web3.js\";\nimport { useAccounts } from \"../server/http\";\nimport { useDispatch, TrackedCommitment, COMMITMENT_PARAM } from \"./index\";\nimport * as Bytes from \"utils/bytes\";\nimport { useConnection } from \"providers/rpc\";\n\nexport const DEBUG_MODE = new URLSearchParams(window.location.search).has(\n  \"debug\"\n);\n\n// Determine commitment levels to subscribe to. \"singleGossip\" is used\n// to stop tx send retries so it must be returned\nconst subscribedCommitments = (): TrackedCommitment[] => {\n  if (DEBUG_MODE) return [\"recent\", \"single\", \"singleGossip\"];\n  switch (COMMITMENT_PARAM) {\n    case \"recent\":\n    case \"single\": {\n      return [COMMITMENT_PARAM, \"singleGossip\"];\n    }\n    default: {\n      return [\"singleGossip\"];\n    }\n  }\n};\n\ntype Props = { children: React.ReactNode };\nexport function ConfirmedHelper({ children }: Props) {\n  const dispatch = useDispatch();\n  const connection = useConnection();\n  const accounts = useAccounts();\n\n  React.useEffect(() => {\n    if (connection === undefined || accounts === undefined) return;\n\n    const commitments = subscribedCommitments();\n    const partitionCount = accounts.programAccounts.length;\n\n    const accountSubscriptions: any[] = [];\n    // const accountSubscriptions = accounts.programAccounts.map(\n    //   (account, partition) =>\n    //     commitments.map((commitment) =>\n    //       connection.onAccountChange(\n    //         account,\n    //         (accountInfo: AccountInfo<Buffer>, { slot }) => {\n    //           const ids = new Set(Bytes.programDataToIds(accountInfo.data));\n    //           const activeIdPartition = {\n    //             ids,\n    //             partition,\n    //             partitionCount,\n    //           };\n    //           dispatch({\n    //             type: \"update\",\n    //             activeIdPartition,\n    //             commitment,\n    //             estimatedSlot: slot,\n    //             receivedAt: performance.now(),\n    //           });\n    //         },\n    //         commitment\n    //       )\n    //     )\n    // );\n\n    return () => {\n      accountSubscriptions.forEach((listeners) => {\n        listeners.forEach((listener) => {\n          connection.removeAccountChangeListener(listener);\n        });\n      });\n    };\n  }, [dispatch, connection, accounts]);\n\n  return <>{children}</>;\n}\n"]},"metadata":{},"sourceType":"module"}