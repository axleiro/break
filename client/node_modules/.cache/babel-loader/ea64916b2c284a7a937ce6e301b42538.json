{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useBalance } from \"providers/rpc/balance\";\nimport { usePayerState } from \"providers/wallet\";\nexport let ConfigStatus;\n\n(function (ConfigStatus) {\n  ConfigStatus[ConfigStatus[\"Initialized\"] = 0] = \"Initialized\";\n  ConfigStatus[ConfigStatus[\"Fetching\"] = 1] = \"Fetching\";\n  ConfigStatus[ConfigStatus[\"Ready\"] = 2] = \"Ready\";\n  ConfigStatus[ConfigStatus[\"Failure\"] = 3] = \"Failure\";\n})(ConfigStatus || (ConfigStatus = {}));\n\nfunction configReducer(state, action) {\n  switch (action.status) {\n    case ConfigStatus.Ready:\n    case ConfigStatus.Initialized:\n      {\n        return { ...state,\n          ...action\n        };\n      }\n\n    case ConfigStatus.Failure:\n      {\n        if (state.status === ConfigStatus.Fetching) {\n          return { ...state,\n            ...action\n          };\n        } else {\n          return state;\n        }\n      }\n\n    case ConfigStatus.Fetching:\n      {\n        return { ...state,\n          ...action,\n          accounts: undefined\n        };\n      }\n  }\n}\n\nconst StateContext = /*#__PURE__*/React.createContext(undefined);\nconst RefContext = /*#__PURE__*/React.createContext(undefined);\nconst DispatchContext = /*#__PURE__*/React.createContext(undefined);\nexport function useAccounts() {\n  _s();\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useAccounts must be used within a ApiProvider`);\n  }\n\n  return context.accounts;\n}\n\n_s(useAccounts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useConfig() {\n  _s2();\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useConfig must be used within a ApiProvider`);\n  }\n\n  return context.config;\n}\n\n_s2(useConfig, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useIsFetching() {\n  _s3();\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useIsFetching must be used within a ApiProvider`);\n  }\n\n  return context.status === ConfigStatus.Fetching;\n}\n\n_s3(useIsFetching, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useClusterParam() {\n  _s4();\n\n  var _context$config;\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useClusterParam must be used within a ApiProvider`);\n  }\n\n  const cluster = context === null || context === void 0 ? void 0 : (_context$config = context.config) === null || _context$config === void 0 ? void 0 : _context$config.cluster;\n\n  if (cluster && cluster !== \"mainnet-beta\") {\n    return `cluster=${cluster}`;\n  } else {\n    return \"\";\n  }\n}\n\n_s4(useClusterParam, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useClearAccounts() {\n  _s5();\n\n  const dispatch = React.useContext(DispatchContext);\n\n  if (!dispatch) {\n    throw new Error(`useClearAccounts must be used within a ApiProvider`);\n  }\n\n  return React.useCallback(() => {\n    dispatch({\n      status: ConfigStatus.Fetching\n    });\n    dispatch({\n      status: ConfigStatus.Failure\n    });\n  }, [dispatch]);\n}\n\n_s5(useClearAccounts, \"UnyTRIuCzC/6bSg0+y+qywk6VA4=\");\n\nexport function useRefreshAccounts() {\n  _s6();\n\n  const dispatch = React.useContext(DispatchContext);\n\n  if (!dispatch) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n\n  const httpUrlRef = React.useContext(RefContext);\n\n  if (!httpUrlRef) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n\n  const config = useConfig();\n  const [payer] = usePayerState();\n  const paymentRequired = config === null || config === void 0 ? void 0 : config.paymentRequired;\n  const balance = useBalance();\n  const cost = config === null || config === void 0 ? void 0 : config.gameCost;\n  return React.useCallback(() => {\n    if (paymentRequired === undefined || cost === undefined) return;\n\n    if (paymentRequired) {\n      if (!payer || balance === \"loading\" || balance < cost) {\n        dispatch({\n          status: ConfigStatus.Fetching\n        });\n        dispatch({\n          status: ConfigStatus.Failure\n        });\n        return;\n      }\n\n      refreshAccounts(dispatch, httpUrlRef, payer);\n    } else {\n      refreshAccounts(dispatch, httpUrlRef, undefined);\n    }\n  }, [httpUrlRef, dispatch, payer, paymentRequired, balance, cost]);\n}\n\n_s6(useRefreshAccounts, \"XLDj1e0DZc16h2LjvJWP3oWEjrI=\", false, function () {\n  return [useConfig, usePayerState, useBalance];\n});","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/server/http/index.tsx"],"names":["React","useBalance","usePayerState","ConfigStatus","configReducer","state","action","status","Ready","Initialized","Failure","Fetching","accounts","undefined","StateContext","createContext","RefContext","DispatchContext","useAccounts","context","useContext","Error","useConfig","config","useIsFetching","useClusterParam","cluster","useClearAccounts","dispatch","useCallback","useRefreshAccounts","httpUrlRef","payer","paymentRequired","balance","cost","gameCost","refreshAccounts"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Config, AccountsConfig } from \"./config\";\nimport { useBalance } from \"providers/rpc/balance\";\nimport { Connection } from \"@solana/web3.js\";\nimport { usePayerState } from \"providers/wallet\";\n\nexport enum ConfigStatus {\n  Initialized,\n  Fetching,\n  Ready,\n  Failure,\n}\n\ninterface State {\n  status: ConfigStatus;\n  config?: Config;\n  connection?: Connection;\n  accounts?: AccountsConfig;\n}\n\ninterface Initialized {\n  status: ConfigStatus.Initialized;\n  config: Config;\n}\n\ninterface Fetching {\n  status: ConfigStatus.Fetching;\n}\n\ninterface Ready {\n  status: ConfigStatus.Ready;\n  accounts: AccountsConfig;\n}\n\ninterface Failure {\n  status: ConfigStatus.Failure;\n  config?: undefined;\n  accounts?: undefined;\n}\n\nexport type Action = Initialized | Fetching | Ready | Failure;\nexport type Dispatch = (action: Action) => void;\n\nfunction configReducer(state: State, action: Action): State {\n  switch (action.status) {\n    case ConfigStatus.Ready:\n    case ConfigStatus.Initialized: {\n      return { ...state, ...action };\n    }\n    case ConfigStatus.Failure: {\n      if (state.status === ConfigStatus.Fetching) {\n        return { ...state, ...action };\n      } else {\n        return state;\n      }\n    }\n    case ConfigStatus.Fetching: {\n      return {\n        ...state,\n        ...action,\n        accounts: undefined,\n      };\n    }\n  }\n}\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst RefContext = React.createContext<\n  React.MutableRefObject<string> | undefined\n>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ApiProviderProps = { children: React.ReactNode };\nexport function useAccounts() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useAccounts must be used within a ApiProvider`);\n  }\n  return context.accounts;\n}\n\nexport function useConfig() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useConfig must be used within a ApiProvider`);\n  }\n  return context.config;\n}\n\nexport function useIsFetching() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useIsFetching must be used within a ApiProvider`);\n  }\n  return context.status === ConfigStatus.Fetching;\n}\n\nexport function useClusterParam(): string {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useClusterParam must be used within a ApiProvider`);\n  }\n  const cluster = context?.config?.cluster;\n  if (cluster && cluster !== \"mainnet-beta\") {\n    return `cluster=${cluster}`;\n  } else {\n    return \"\";\n  }\n}\n\nexport function useClearAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useClearAccounts must be used within a ApiProvider`);\n  }\n\n  return React.useCallback(() => {\n    dispatch({ status: ConfigStatus.Fetching });\n    dispatch({ status: ConfigStatus.Failure });\n  }, [dispatch]);\n}\n\nexport function useRefreshAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n  const httpUrlRef = React.useContext(RefContext);\n  if (!httpUrlRef) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n  const config = useConfig();\n  const [payer] = usePayerState();\n  const paymentRequired = config?.paymentRequired;\n  const balance = useBalance();\n  const cost = config?.gameCost;\n  return React.useCallback(() => {\n    if (paymentRequired === undefined || cost === undefined) return;\n    if (paymentRequired) {\n      if (!payer || balance === \"loading\" || balance < cost) {\n        dispatch({ status: ConfigStatus.Fetching });\n        dispatch({ status: ConfigStatus.Failure });\n        return;\n      }\n      refreshAccounts(dispatch, httpUrlRef, payer);\n    } else {\n      refreshAccounts(dispatch, httpUrlRef, undefined);\n    }\n  }, [httpUrlRef, dispatch, payer, paymentRequired, balance, cost]);\n}\n"]},"metadata":{},"sourceType":"module"}