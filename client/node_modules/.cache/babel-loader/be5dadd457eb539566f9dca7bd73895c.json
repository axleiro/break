{"ast":null,"code":"import { Account, PublicKey } from \"@solana/web3.js\";\n\nfunction stringToCluster(str) {\n  switch (str) {\n    case \"devnet\":\n    case \"testnet\":\n    case \"mainnet-beta\":\n      {\n        return str;\n      }\n\n    default:\n      return undefined;\n  }\n}\n\nexport function configFromInit(response) {\n  const cluster = stringToCluster(response.cluster);\n  return {\n    cluster,\n    rpcUrl: response.clusterUrl,\n    programId: new PublicKey(response.programId),\n    // Add 1 lamport because if the account is left with 0 lamports,\n    // we won't get a notification for it\n    gameCost: response.gameCost + 1,\n    paymentRequired: response.paymentRequired\n  };\n}\nexport function configFromAccounts(response) {\n  return {\n    programAccounts: response.programAccounts.map(account => new PublicKey(account)),\n    accountCapacity: response.accountCapacity,\n    feeAccounts: response.feeAccounts.map(key => new Account(Buffer.from(key, \"base64\")))\n  };\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/server/http/config.ts"],"names":["Account","PublicKey","stringToCluster","str","undefined","configFromInit","response","cluster","rpcUrl","clusterUrl","programId","gameCost","paymentRequired","configFromAccounts","programAccounts","map","account","accountCapacity","feeAccounts","key","Buffer","from"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,SAAlB,QAA4C,iBAA5C;;AAgBA,SAASC,eAAT,CAAyBC,GAAzB,EAAuE;AACrE,UAAQA,GAAR;AACE,SAAK,QAAL;AACA,SAAK,SAAL;AACA,SAAK,cAAL;AAAqB;AACnB,eAAOA,GAAP;AACD;;AACD;AACE,aAAOC,SAAP;AAPJ;AASD;;AAED,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAA+C;AACpD,QAAMC,OAAO,GAAGL,eAAe,CAACI,QAAQ,CAACC,OAAV,CAA/B;AACA,SAAO;AACLA,IAAAA,OADK;AAELC,IAAAA,MAAM,EAAEF,QAAQ,CAACG,UAFZ;AAGLC,IAAAA,SAAS,EAAE,IAAIT,SAAJ,CAAcK,QAAQ,CAACI,SAAvB,CAHN;AAIL;AACA;AACAC,IAAAA,QAAQ,EAAEL,QAAQ,CAACK,QAAT,GAAoB,CANzB;AAOLC,IAAAA,eAAe,EAAEN,QAAQ,CAACM;AAPrB,GAAP;AASD;AAED,OAAO,SAASC,kBAAT,CAA4BP,QAA5B,EAA2D;AAChE,SAAO;AACLQ,IAAAA,eAAe,EAAER,QAAQ,CAACQ,eAAT,CAAyBC,GAAzB,CACdC,OAAD,IAAqB,IAAIf,SAAJ,CAAce,OAAd,CADN,CADZ;AAILC,IAAAA,eAAe,EAAEX,QAAQ,CAACW,eAJrB;AAKLC,IAAAA,WAAW,EAAEZ,QAAQ,CAACY,WAAT,CAAqBH,GAArB,CACVI,GAAD,IAAiB,IAAInB,OAAJ,CAAYoB,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiB,QAAjB,CAAZ,CADN;AALR,GAAP;AASD","sourcesContent":["import { Account, PublicKey, Cluster } from \"@solana/web3.js\";\n\nexport interface Config {\n  cluster: Cluster | undefined;\n  rpcUrl: string;\n  programId: PublicKey;\n  gameCost: number;\n  paymentRequired: boolean;\n}\n\nexport interface AccountsConfig {\n  programAccounts: PublicKey[];\n  feeAccounts: Account[];\n  accountCapacity: number;\n}\n\nfunction stringToCluster(str: string | undefined): Cluster | undefined {\n  switch (str) {\n    case \"devnet\":\n    case \"testnet\":\n    case \"mainnet-beta\": {\n      return str;\n    }\n    default:\n      return undefined;\n  }\n}\n\nexport function configFromInit(response: any): Config {\n  const cluster = stringToCluster(response.cluster);\n  return {\n    cluster,\n    rpcUrl: response.clusterUrl,\n    programId: new PublicKey(response.programId),\n    // Add 1 lamport because if the account is left with 0 lamports,\n    // we won't get a notification for it\n    gameCost: response.gameCost + 1,\n    paymentRequired: response.paymentRequired,\n  };\n}\n\nexport function configFromAccounts(response: any): AccountsConfig {\n  return {\n    programAccounts: response.programAccounts.map(\n      (account: string) => new PublicKey(account)\n    ),\n    accountCapacity: response.accountCapacity,\n    feeAccounts: response.feeAccounts.map(\n      (key: string) => new Account(Buffer.from(key, \"base64\"))\n    ),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}