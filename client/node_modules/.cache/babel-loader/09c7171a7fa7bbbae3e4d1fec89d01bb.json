{"ast":null,"code":"import _slicedToArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import*as React from\"react\";import{useThrottle}from\"@react-hook/throttle\";import{ConfirmedHelper}from\"./confirmed\";import{TpsProvider,TpsContext}from\"./tps\";import{CreateTxContext,CreateTxProvider}from\"./create\";import{SelectedTxProvider}from\"./selected\";import{useConnection}from\"providers/rpc\";export var COMMITMENT_PARAM=function(){var commitment=new URLSearchParams(window.location.search).get(\"commitment\");switch(commitment){case\"recent\":{return commitment;}default:{return\"singleGossip\";}}}();export var getCommitmentName=function getCommitmentName(commitment){if(commitment===\"singleGossip\"){return\"confirmed\";}else{return\"processed\";}};function reducer(state,action){switch(action.type){case\"new\":{var details=action.details,pendingTransaction=action.pendingTransaction;return[].concat(_toConsumableArray(state),[{details:details,status:\"pending\",received:[],pending:pendingTransaction}]);}case\"received\":{var trackingId=action.trackingId;if(trackingId>=state.length)return state;var transaction=state[trackingId];return state.map(function(tx){if(tx.details.signature===transaction.details.signature){if(tx.status!==\"timeout\"){return _objectSpread(_objectSpread({},tx),{},{received:[].concat(_toConsumableArray(tx.received),[{slot:action.slot,receivedAt:action.receivedAt}])});}}return tx;});}case\"track\":{var _trackingId=action.trackingId;if(_trackingId>=state.length)return state;var _transaction=state[_trackingId];return state.map(function(tx){if(tx.details.signature===_transaction.details.signature){if(tx.status===\"pending\"){return{status:\"success\",details:tx.details,received:tx.received,slot:{target:tx.pending.targetSlot,landed:action.slot},timing:_defineProperty({sentAt:tx.pending.sentAt},action.commitmentName,timeElapsed(tx.pending.sentAt,action.receivedAt)),pending:tx.pending};}else if(tx.status===\"success\"){return _objectSpread(_objectSpread({},tx),{},{slot:_objectSpread(_objectSpread({},tx.slot),{},{landed:action.slot}),timing:_objectSpread(_objectSpread({},tx.timing),{},_defineProperty({},action.commitmentName,timeElapsed(tx.timing.sentAt,action.receivedAt)))});}}return tx;});}case\"timeout\":{var _trackingId2=action.trackingId;if(_trackingId2>=state.length)return state;var timeout=state[_trackingId2];if(timeout.status!==\"pending\")return state;clearInterval(timeout.pending.retryId);return state.map(function(tx){if(tx.details.signature===timeout.details.signature){return{status:\"timeout\",details:tx.details};}else{return tx;}});}case\"update\":{var _action$activeIdParti=action.activeIdPartition,ids=_action$activeIdParti.ids,partition=_action$activeIdParti.partition,partitionCount=_action$activeIdParti.partitionCount;return state.map(function(tx,trackingId){if(trackingId%partitionCount!==partition)return tx;var id=Math.floor(trackingId/partitionCount);if(tx.status===\"pending\"&&ids.has(id)){// Optimistically confirmed, no need to continue retry\nif(action.commitment===\"singleGossip\"){clearInterval(tx.pending.retryId);clearTimeout(tx.pending.timeoutId);}var commitmentName=getCommitmentName(action.commitment);return{status:\"success\",details:tx.details,received:tx.received,slot:{target:tx.pending.targetSlot,landed:action.estimatedSlot},timing:_defineProperty({sentAt:tx.pending.sentAt},commitmentName,timeElapsed(tx.pending.sentAt,action.receivedAt)),pending:tx.pending};}else if(tx.status===\"success\"){if(ids.has(id)){var _commitmentName=getCommitmentName(action.commitment);// Already recorded conf time\nif(tx.timing[_commitmentName]!==undefined){return tx;}// Optimistically confirmed, no need to continue retry\nif(tx.pending&&action.commitment===\"singleGossip\"){clearInterval(tx.pending.retryId);clearTimeout(tx.pending.timeoutId);}return _objectSpread(_objectSpread({},tx),{},{timing:_objectSpread(_objectSpread({},tx.timing),{},_defineProperty({},_commitmentName,timeElapsed(tx.timing.sentAt,action.receivedAt)))});}else if(action.commitment===\"recent\"&&tx.pending&&!ids.has(id)){// Don't revert to pending state if we already received timing info for other commitments\nif(tx.timing[\"confirmed\"]!==undefined){return _objectSpread(_objectSpread({},tx),{},{timing:_objectSpread(_objectSpread({},tx.timing),{},{processed:undefined})});}// Revert to pending state because the previous notification likely came from a fork\nreturn{status:\"pending\",details:tx.details,received:tx.received,pending:_objectSpread({},tx.pending)};}}return tx;});}case\"reset\":{state.forEach(function(tx){if(tx.status===\"pending\"){clearTimeout(tx.pending.timeoutId);clearInterval(tx.pending.retryId);}else if(tx.status===\"success\"&&tx.pending){clearTimeout(tx.pending.timeoutId);clearInterval(tx.pending.retryId);}});return[];}case\"root\":{var foundRooted=state.find(function(tx){if(tx.status===\"success\"&&tx.pending){return tx.slot.landed===action.root;}else{return false;}});// Avoid re-allocating state map\nif(!foundRooted)return state;return state.map(function(tx){if(tx.status===\"success\"&&tx.pending){if(tx.slot.landed===action.root){clearInterval(tx.pending.retryId);clearTimeout(tx.pending.timeoutId);return _objectSpread(_objectSpread({},tx),{},{pending:undefined});}}return tx;});}}}var StateContext=/*#__PURE__*/React.createContext(undefined);var DispatchContext=/*#__PURE__*/React.createContext(undefined);export function TransactionsProvider(_ref){var children=_ref.children;var _React$useReducer=React.useReducer(reducer,[]),_React$useReducer2=_slicedToArray(_React$useReducer,2),state=_React$useReducer2[0],dispatch=_React$useReducer2[1];var connection=useConnection();var stateRef=React.useRef(state);React.useEffect(function(){stateRef.current=state;},[state]);React.useEffect(function(){dispatch({type:\"reset\"});if(connection===undefined)return;var rootSubscription=connection.onRootChange(function(root){dispatch({type:\"root\",root:root});});return function(){connection.removeRootChangeListener(rootSubscription);};},[connection]);var _useThrottle=useThrottle(state,10),_useThrottle2=_slicedToArray(_useThrottle,2),throttledState=_useThrottle2[0],setThrottledState=_useThrottle2[1];React.useEffect(function(){setThrottledState(state);},[state,setThrottledState]);return/*#__PURE__*/_jsx(StateContext.Provider,{value:throttledState,children:/*#__PURE__*/_jsx(DispatchContext.Provider,{value:dispatch,children:/*#__PURE__*/_jsx(SelectedTxProvider,{children:/*#__PURE__*/_jsx(CreateTxProvider,{children:/*#__PURE__*/_jsx(ConfirmedHelper,{children:/*#__PURE__*/_jsx(TpsProvider,{children:children})})})})})});}function timeElapsed(sentAt){var receivedAt=arguments.length>1&&arguments[1]!==undefined?arguments[1]:performance.now();return parseFloat(((receivedAt-sentAt)/1000).toFixed(3));}export function useDispatch(){var dispatch=React.useContext(DispatchContext);if(!dispatch){throw new Error(\"useDispatch must be used within a TransactionsProvider\");}return dispatch;}export function useTransactions(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useTransactions must be used within a TransactionsProvider\");}return state;}export function useConfirmedCount(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useConfirmedCount must be used within a TransactionsProvider\");}return state.filter(function(_ref2){var status=_ref2.status;return status===\"success\";}).length;}export function useDroppedCount(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useDroppedCount must be used within a TransactionsProvider\");}return state.filter(function(_ref3){var status=_ref3.status;return status===\"timeout\";}).length;}export function useAvgConfirmationTime(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useAvgConfirmationTime must be used within a TransactionsProvider\");}var confirmed=state.reduce(function(confirmed,tx){if(tx.status===\"success\"){var confTime=tx.timing[getCommitmentName(COMMITMENT_PARAM)];if(confTime!==undefined)confirmed.push(confTime);}return confirmed;},[]);var count=confirmed.length;if(count===0)return 0;var sum=confirmed.reduce(function(sum,time){return sum+time;},0);return sum/count;}export function useCreatedCount(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useCreatedCount must be used within a TransactionsProvider\");}return state.length;}export function useTps(){var tps=React.useContext(TpsContext);if(tps===undefined)throw new Error(\"useTps must be used within a TransactionsProvider\");return tps;}export function useCreateTxRef(){var createTxRef=React.useContext(CreateTxContext);if(createTxRef===undefined)throw new Error(\"useCreateTxRef must be used within a TransactionsProvider\");return createTxRef;}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/index.tsx"],"names":["React","useThrottle","ConfirmedHelper","TpsProvider","TpsContext","CreateTxContext","CreateTxProvider","SelectedTxProvider","useConnection","COMMITMENT_PARAM","commitment","URLSearchParams","window","location","search","get","getCommitmentName","reducer","state","action","type","details","pendingTransaction","status","received","pending","trackingId","length","transaction","map","tx","signature","slot","receivedAt","target","targetSlot","landed","timing","sentAt","commitmentName","timeElapsed","timeout","clearInterval","retryId","activeIdPartition","ids","partition","partitionCount","id","Math","floor","has","clearTimeout","timeoutId","estimatedSlot","undefined","processed","forEach","foundRooted","find","root","StateContext","createContext","DispatchContext","TransactionsProvider","children","useReducer","dispatch","connection","stateRef","useRef","useEffect","current","rootSubscription","onRootChange","removeRootChangeListener","throttledState","setThrottledState","performance","now","parseFloat","toFixed","useDispatch","useContext","Error","useTransactions","useConfirmedCount","filter","useDroppedCount","useAvgConfirmationTime","confirmed","reduce","confTime","push","count","sum","time","useCreatedCount","useTps","tps","useCreateTxRef","createTxRef"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { useThrottle } from \"@react-hook/throttle\";\nimport { TransactionSignature, PublicKey } from \"@solana/web3.js\";\nimport { ConfirmedHelper } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { CreateTxContext, CreateTxProvider } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useConnection } from \"providers/rpc\";\n\nexport type ReceivedRecord = {\n  receivedAt: number;\n  slot: number;\n};\n\nexport type PendingTransaction = {\n  sentAt: number;\n  targetSlot: number;\n  retryId?: number;\n  timeoutId?: number;\n};\n\nexport type TransactionDetails = {\n  id: number;\n  feeAccount: PublicKey;\n  programAccount: PublicKey;\n  signature: TransactionSignature;\n};\n\ntype Timing = {\n  sentAt: number;\n  processed?: number;\n  confirmed?: number;\n};\n\ntype TimeoutState = {\n  status: \"timeout\";\n  details: TransactionDetails;\n};\n\ntype PendingState = {\n  status: \"pending\";\n  details: TransactionDetails;\n  received: Array<ReceivedRecord>;\n  pending: PendingTransaction;\n};\n\ntype SuccessState = {\n  status: \"success\";\n  details: TransactionDetails;\n  received: Array<ReceivedRecord>;\n  slot: {\n    target: number;\n    landed: number;\n  };\n  timing: Timing;\n  pending?: PendingTransaction;\n};\n\nexport const COMMITMENT_PARAM = ((): TrackedCommitment => {\n  const commitment = new URLSearchParams(window.location.search).get(\n    \"commitment\"\n  );\n  switch (commitment) {\n    case \"recent\": {\n      return commitment;\n    }\n    default: {\n      return \"singleGossip\";\n    }\n  }\n})();\n\nexport const getCommitmentName = (\n  commitment: TrackedCommitment\n): CommitmentName => {\n  if (commitment === \"singleGossip\") {\n    return \"confirmed\";\n  } else {\n    return \"processed\";\n  }\n};\n\nexport type CommitmentName = \"processed\" | \"confirmed\";\n\nexport type TrackedCommitment = \"singleGossip\" | \"recent\";\n\nexport type TransactionStatus = \"success\" | \"timeout\" | \"pending\";\n\nexport type TransactionState = SuccessState | TimeoutState | PendingState;\n\ntype NewTransaction = {\n  type: \"new\";\n  trackingId: number;\n  details: TransactionDetails;\n  pendingTransaction: PendingTransaction;\n};\n\ntype UpdateIds = {\n  type: \"update\";\n  activeIdPartition: {\n    ids: Set<number>;\n    partition: number;\n    partitionCount: number;\n  };\n  commitment: TrackedCommitment;\n  receivedAt: number;\n  estimatedSlot: number;\n};\n\ntype TrackTransaction = {\n  type: \"track\";\n  commitmentName: CommitmentName;\n  trackingId: number;\n  slot: number;\n  receivedAt: number;\n};\n\ntype TimeoutTransaction = {\n  type: \"timeout\";\n  trackingId: number;\n};\n\ntype ResetState = {\n  type: \"reset\";\n};\n\ntype RecordRoot = {\n  type: \"root\";\n  root: number;\n};\n\ntype SignatureReceived = {\n  type: \"received\";\n  trackingId: number;\n  slot: number;\n  receivedAt: number;\n};\n\ntype Action =\n  | NewTransaction\n  | UpdateIds\n  | TimeoutTransaction\n  | ResetState\n  | RecordRoot\n  | TrackTransaction\n  | SignatureReceived;\n\ntype State = TransactionState[];\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"new\": {\n      const { details, pendingTransaction } = action;\n      return [\n        ...state,\n        {\n          details,\n          status: \"pending\",\n          received: [],\n          pending: pendingTransaction,\n        },\n      ];\n    }\n\n    case \"received\": {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const transaction = state[trackingId];\n      return state.map((tx) => {\n        if (tx.details.signature === transaction.details.signature) {\n          if (tx.status !== \"timeout\") {\n            return {\n              ...tx,\n              received: [\n                ...tx.received,\n                {\n                  slot: action.slot,\n                  receivedAt: action.receivedAt,\n                },\n              ],\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"track\": {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const transaction = state[trackingId];\n\n      return state.map((tx) => {\n        if (tx.details.signature === transaction.details.signature) {\n          if (tx.status === \"pending\") {\n            return {\n              status: \"success\",\n              details: tx.details,\n              received: tx.received,\n              slot: {\n                target: tx.pending.targetSlot,\n                landed: action.slot,\n              },\n              timing: {\n                sentAt: tx.pending.sentAt,\n                [action.commitmentName]: timeElapsed(\n                  tx.pending.sentAt,\n                  action.receivedAt\n                ),\n              },\n              pending: tx.pending,\n            };\n          } else if (tx.status === \"success\") {\n            return {\n              ...tx,\n              slot: {\n                ...tx.slot,\n                landed: action.slot,\n              },\n              timing: {\n                ...tx.timing,\n                [action.commitmentName]: timeElapsed(\n                  tx.timing.sentAt,\n                  action.receivedAt\n                ),\n              },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"timeout\": {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const timeout = state[trackingId];\n      if (timeout.status !== \"pending\") return state;\n      clearInterval(timeout.pending.retryId);\n\n      return state.map((tx) => {\n        if (tx.details.signature === timeout.details.signature) {\n          return {\n            status: \"timeout\",\n            details: tx.details,\n          };\n        } else {\n          return tx;\n        }\n      });\n    }\n\n    case \"update\": {\n      const { ids, partition, partitionCount } = action.activeIdPartition;\n      return state.map((tx, trackingId) => {\n        if (trackingId % partitionCount !== partition) return tx;\n        const id = Math.floor(trackingId / partitionCount);\n        if (tx.status === \"pending\" && ids.has(id)) {\n          // Optimistically confirmed, no need to continue retry\n          if (action.commitment === \"singleGossip\") {\n            clearInterval(tx.pending.retryId);\n            clearTimeout(tx.pending.timeoutId);\n          }\n\n          const commitmentName = getCommitmentName(action.commitment);\n          return {\n            status: \"success\",\n            details: tx.details,\n            received: tx.received,\n            slot: {\n              target: tx.pending.targetSlot,\n              landed: action.estimatedSlot,\n            },\n            timing: {\n              sentAt: tx.pending.sentAt,\n              [commitmentName]: timeElapsed(\n                tx.pending.sentAt,\n                action.receivedAt\n              ),\n            },\n            pending: tx.pending,\n          };\n        } else if (tx.status === \"success\") {\n          if (ids.has(id)) {\n            const commitmentName = getCommitmentName(action.commitment);\n            // Already recorded conf time\n            if (tx.timing[commitmentName] !== undefined) {\n              return tx;\n            }\n\n            // Optimistically confirmed, no need to continue retry\n            if (tx.pending && action.commitment === \"singleGossip\") {\n              clearInterval(tx.pending.retryId);\n              clearTimeout(tx.pending.timeoutId);\n            }\n\n            return {\n              ...tx,\n              timing: {\n                ...tx.timing,\n                [commitmentName]: timeElapsed(\n                  tx.timing.sentAt,\n                  action.receivedAt\n                ),\n              },\n            };\n          } else if (\n            action.commitment === \"recent\" &&\n            tx.pending &&\n            !ids.has(id)\n          ) {\n            // Don't revert to pending state if we already received timing info for other commitments\n            if (tx.timing[\"confirmed\"] !== undefined) {\n              return {\n                ...tx,\n                timing: {\n                  ...tx.timing,\n                  processed: undefined,\n                },\n              };\n            }\n\n            // Revert to pending state because the previous notification likely came from a fork\n            return {\n              status: \"pending\",\n              details: tx.details,\n              received: tx.received,\n              pending: { ...tx.pending },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"reset\": {\n      state.forEach((tx) => {\n        if (tx.status === \"pending\") {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        } else if (tx.status === \"success\" && tx.pending) {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        }\n      });\n      return [];\n    }\n\n    case \"root\": {\n      const foundRooted = state.find((tx) => {\n        if (tx.status === \"success\" && tx.pending) {\n          return tx.slot.landed === action.root;\n        } else {\n          return false;\n        }\n      });\n\n      // Avoid re-allocating state map\n      if (!foundRooted) return state;\n\n      return state.map((tx) => {\n        if (tx.status === \"success\" && tx.pending) {\n          if (tx.slot.landed === action.root) {\n            clearInterval(tx.pending.retryId);\n            clearTimeout(tx.pending.timeoutId);\n            return {\n              ...tx,\n              pending: undefined,\n            };\n          }\n        }\n        return tx;\n      });\n    }\n  }\n}\n\nexport type Dispatch = (action: Action) => void;\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function TransactionsProvider({ children }: ProviderProps) {\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n  const stateRef = React.useRef(state);\n\n  React.useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n\n  React.useEffect(() => {\n    dispatch({\n      type: \"reset\",\n    });\n\n    if (connection === undefined) return;\n    const rootSubscription = connection.onRootChange((root) => {\n      dispatch({ type: \"root\", root });\n    });\n\n    return () => {\n      connection.removeRootChangeListener(rootSubscription);\n    };\n  }, [connection]);\n\n  const [throttledState, setThrottledState] = useThrottle(state, 10);\n  React.useEffect(() => {\n    setThrottledState(state);\n  }, [state, setThrottledState]);\n\n  return (\n    <StateContext.Provider value={throttledState}>\n      <DispatchContext.Provider value={dispatch}>\n        <SelectedTxProvider>\n          <CreateTxProvider>\n            <ConfirmedHelper>\n              <TpsProvider>{children}</TpsProvider>\n            </ConfirmedHelper>\n          </CreateTxProvider>\n        </SelectedTxProvider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nfunction timeElapsed(\n  sentAt: number,\n  receivedAt: number = performance.now()\n): number {\n  return parseFloat(((receivedAt - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\n\nexport function useTransactions() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useTransactions must be used within a TransactionsProvider`\n    );\n  }\n\n  return state;\n}\n\nexport function useConfirmedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useConfirmedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"success\").length;\n}\n\nexport function useDroppedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useDroppedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"timeout\").length;\n}\n\nexport function useAvgConfirmationTime() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useAvgConfirmationTime must be used within a TransactionsProvider`\n    );\n  }\n\n  const confirmed = state.reduce((confirmed: number[], tx) => {\n    if (tx.status === \"success\") {\n      const confTime = tx.timing[getCommitmentName(COMMITMENT_PARAM)];\n      if (confTime !== undefined) confirmed.push(confTime);\n    }\n    return confirmed;\n  }, []);\n\n  const count = confirmed.length;\n  if (count === 0) return 0;\n  const sum = confirmed.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\n\nexport function useCreatedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useCreatedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.length;\n}\n\nexport function useTps() {\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined)\n    throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\n\nexport function useCreateTxRef() {\n  const createTxRef = React.useContext(CreateTxContext);\n  if (createTxRef === undefined)\n    throw new Error(\n      `useCreateTxRef must be used within a TransactionsProvider`\n    );\n  return createTxRef;\n}\n"]},"metadata":{},"sourceType":"module"}