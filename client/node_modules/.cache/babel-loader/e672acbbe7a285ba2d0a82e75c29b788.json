{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/server/index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { isLocalHost } from \"../../utils\";\nexport const DEFAULT_SERVER = isLocalHost() ? \"custom\" : \"mainnet-beta\";\nexport const SERVERS = isLocalHost() ? [\"custom\"] : [\"mainnet-beta\", \"testnet\", \"devnet\", \"custom\"];\nexport function serverName(server) {\n  switch (server) {\n    case \"mainnet-beta\":\n      return \"Mainnet Beta\";\n\n    case \"testnet\":\n      return \"Testnet\";\n\n    case \"devnet\":\n      return \"Devnet\";\n\n    case \"custom\":\n      return \"Custom\";\n  }\n}\n\nfunction parseQuery(query) {\n  const clusterParam = query.get(\"cluster\");\n\n  switch (clusterParam) {\n    case \"devnet\":\n      return \"devnet\";\n\n    case \"testnet\":\n      return \"testnet\";\n\n    case \"mainnet-beta\":\n      return \"mainnet-beta\";\n\n    case \"custom\":\n      return \"custom\";\n\n    default:\n      return DEFAULT_SERVER;\n  }\n}\n\nconst ModalContext = /*#__PURE__*/React.createContext(undefined);\nconst ServerContext = /*#__PURE__*/React.createContext(undefined);\nexport function ServerProvider({\n  children\n}) {\n  _s();\n\n  const query = new URLSearchParams(useLocation().search);\n  const serverParam = parseQuery(query);\n  const [server, setServer] = React.useState(serverParam);\n  const [showModal, setShowModal] = React.useState(false); // Update state when query params change\n\n  React.useEffect(() => {\n    setServer(serverParam);\n  }, [serverParam]);\n  const modalState = React.useMemo(() => {\n    return [showModal, setShowModal];\n  }, [showModal]);\n  return /*#__PURE__*/_jsxDEV(ServerContext.Provider, {\n    value: {\n      server,\n      setServer\n    },\n    children: /*#__PURE__*/_jsxDEV(ModalContext.Provider, {\n      value: modalState,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ServerProvider, \"lNCCDn4wA7bB+cbPvOjV0eqnyy4=\", false, function () {\n  return [useLocation];\n});\n\n_c = ServerProvider;\nexport function useServer() {\n  _s2();\n\n  const context = React.useContext(ServerContext);\n\n  if (!context) {\n    throw new Error(`useServer must be used within a ServerProvider`);\n  }\n\n  const {\n    server\n  } = context;\n  return {\n    server,\n    name: serverName(server)\n  };\n}\n\n_s2(useServer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useClusterModal() {\n  _s3();\n\n  const context = React.useContext(ModalContext);\n\n  if (!context) {\n    throw new Error(`useClusterModal must be used within a ServerProvider`);\n  }\n\n  return context;\n}\n\n_s3(useClusterModal, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ServerProvider\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/server/index.tsx"],"names":["React","useLocation","isLocalHost","DEFAULT_SERVER","SERVERS","serverName","server","parseQuery","query","clusterParam","get","ModalContext","createContext","undefined","ServerContext","ServerProvider","children","URLSearchParams","search","serverParam","setServer","useState","showModal","setShowModal","useEffect","modalState","useMemo","useServer","context","useContext","Error","name","useClusterModal"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Cluster } from \"@solana/web3.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { isLocalHost } from \"../../utils\";\n\ntype Server = Cluster | \"custom\";\nexport const DEFAULT_SERVER = isLocalHost() ? \"custom\" : \"mainnet-beta\";\nexport const SERVERS: Server[] = isLocalHost()\n  ? [\"custom\"]\n  : [\"mainnet-beta\", \"testnet\", \"devnet\", \"custom\"];\n\nexport function serverName(server: Server): string {\n  switch (server) {\n    case \"mainnet-beta\":\n      return \"Mainnet Beta\";\n    case \"testnet\":\n      return \"Testnet\";\n    case \"devnet\":\n      return \"Devnet\";\n    case \"custom\":\n      return \"Custom\";\n  }\n}\n\nfunction parseQuery(query: URLSearchParams): Server {\n  const clusterParam = query.get(\"cluster\");\n  switch (clusterParam) {\n    case \"devnet\":\n      return \"devnet\";\n    case \"testnet\":\n      return \"testnet\";\n    case \"mainnet-beta\":\n      return \"mainnet-beta\";\n    case \"custom\":\n      return \"custom\";\n    default:\n      return DEFAULT_SERVER;\n  }\n}\n\ntype SetShowModal = React.Dispatch<React.SetStateAction<boolean>>;\ntype ModalState = [boolean, SetShowModal];\nconst ModalContext = React.createContext<ModalState | undefined>(undefined);\ntype SetServer = React.Dispatch<React.SetStateAction<Server>>;\ntype ServerState = {\n  server: Server;\n  setServer: SetServer;\n};\nconst ServerContext = React.createContext<ServerState | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function ServerProvider({ children }: ProviderProps) {\n  const query = new URLSearchParams(useLocation().search);\n  const serverParam = parseQuery(query);\n  const [server, setServer] = React.useState<Server>(serverParam);\n  const [showModal, setShowModal] = React.useState(false);\n\n  // Update state when query params change\n  React.useEffect(() => {\n    setServer(serverParam);\n  }, [serverParam]);\n\n  const modalState: ModalState = React.useMemo(() => {\n    return [showModal, setShowModal];\n  }, [showModal]);\n\n  return (\n    <ServerContext.Provider\n      value={{ server, setServer }}\n    >\n      <ModalContext.Provider value={modalState}>\n        {children}\n      </ModalContext.Provider>\n    </ServerContext.Provider>\n  );\n}\n\nexport function useServer() {\n  const context = React.useContext(ServerContext);\n  if (!context) {\n    throw new Error(`useServer must be used within a ServerProvider`);\n  }\n  const { server } = context;\n\n  return {\n    server,\n    name: serverName(server),\n  };\n}\n\nexport function useClusterModal() {\n  const context = React.useContext(ModalContext);\n  if (!context) {\n    throw new Error(`useClusterModal must be used within a ServerProvider`);\n  }\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}