{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import*as React from\"react\";import{useThrottle}from\"@react-hook/throttle\";import{ConfirmedHelper,DEBUG_MODE}from\"./confirmed\";import{TpsProvider,TpsContext}from\"./tps\";import{CreateTxContext,CreateTxProvider}from\"./create\";import{SelectedTxProvider}from\"./selected\";import{useConnection}from\"providers/rpc\";import{jsx as _jsx}from\"react/jsx-runtime\";export var COMMITMENT_PARAM=function(){var commitment=new URLSearchParams(window.location.search).get(\"commitment\");switch(commitment){case\"recent\":case\"single\":{return commitment;}default:{return\"singleGossip\";}}}();function reducer(state,action){switch(action.type){case\"new\":{var details=action.details,pendingTransaction=action.pendingTransaction;return[].concat(_toConsumableArray(state),[{details:details,status:\"pending\",pending:pendingTransaction}]);}case\"timeout\":{var trackingId=action.trackingId;if(trackingId>=state.length)return state;var timeout=state[trackingId];if(timeout.status!==\"pending\")return state;clearInterval(timeout.pending.retryId);return state.map(function(tx){if(tx.details.signature===timeout.details.signature){return{status:\"timeout\",details:tx.details};}else{return tx;}});}case\"update\":{var _action$activeIdParti=action.activeIdPartition,ids=_action$activeIdParti.ids,partition=_action$activeIdParti.partition,partitionCount=_action$activeIdParti.partitionCount;return state.map(function(tx,trackingId){if(trackingId%partitionCount!==partition)return tx;var id=Math.floor(trackingId/partitionCount);if(tx.status===\"pending\"&&ids.has(id)){// Optimistically confirmed, no need to continue retry\nif(action.commitment===\"singleGossip\"||action.commitment===\"single\"){clearInterval(tx.pending.retryId);clearTimeout(tx.pending.timeoutId);}return{status:\"success\",details:tx.details,slot:{target:tx.pending.targetSlot,estimated:action.estimatedSlot},timing:_defineProperty({sentAt:tx.pending.sentAt},action.commitment,timeElapsed(tx.pending.sentAt,action.receivedAt)),pending:tx.pending};}else if(tx.status===\"success\"){if(ids.has(id)){// Already recorded conf time\nif(tx.timing[action.commitment]!==undefined){return tx;}// Optimistically confirmed, no need to continue retry\nif(tx.pending&&(action.commitment===\"singleGossip\"||action.commitment===\"single\")){clearInterval(tx.pending.retryId);clearTimeout(tx.pending.timeoutId);}return _objectSpread(_objectSpread({},tx),{},{timing:_objectSpread(_objectSpread({},tx.timing),{},_defineProperty({},action.commitment,timeElapsed(tx.timing.sentAt,action.receivedAt)))});}else if(action.commitment===\"recent\"&&tx.pending&&!ids.has(id)){// Don't revert to pending state if we already received timing info for other commitments\nif(tx.timing[\"single\"]!==undefined||tx.timing[\"singleGossip\"]!==undefined){return _objectSpread(_objectSpread({},tx),{},{timing:_objectSpread(_objectSpread({},tx.timing),{},{recent:undefined})});}// Revert to pending state because the previous notification likely came from a fork\nreturn{status:\"pending\",details:tx.details,pending:_objectSpread({},tx.pending)};}}return tx;});}case\"reset\":{state.forEach(function(tx){if(tx.status===\"pending\"){clearTimeout(tx.pending.timeoutId);clearInterval(tx.pending.retryId);}else if(tx.status===\"success\"&&tx.pending){clearTimeout(tx.pending.timeoutId);clearInterval(tx.pending.retryId);}});return[];}case\"root\":{var foundRooted=state.find(function(tx){if(tx.status===\"success\"&&tx.pending){var landedSlot=!DEBUG_MODE?tx.slot.estimated:tx.slot.landed;return landedSlot===action.root;}else{return false;}});// Avoid re-allocating state map\nif(!foundRooted)return state;return state.map(function(tx){if(tx.status===\"success\"&&tx.pending){var landedSlot=!DEBUG_MODE?tx.slot.estimated:tx.slot.landed;if(landedSlot===action.root){clearInterval(tx.pending.retryId);clearTimeout(tx.pending.timeoutId);return _objectSpread(_objectSpread({},tx),{},{pending:undefined});}}return tx;});}case\"landed\":{return state.map(function(tx){if(tx.status===\"success\"){var index=action.signatures.findIndex(function(val){return val===tx.details.signature;});if(index>=0){return _objectSpread(_objectSpread({},tx),{},{slot:_objectSpread(_objectSpread({},tx.slot),{},{landed:action.slots[index]})});}}return tx;});}}}var SlotContext=/*#__PURE__*/React.createContext(undefined);var StateContext=/*#__PURE__*/React.createContext(undefined);var DispatchContext=/*#__PURE__*/React.createContext(undefined);export function TransactionsProvider(_ref){var children=_ref.children;var _React$useReducer=React.useReducer(reducer,[]),_React$useReducer2=_slicedToArray(_React$useReducer,2),state=_React$useReducer2[0],dispatch=_React$useReducer2[1];var connection=useConnection();var targetSlot=React.useRef();var stateRef=React.useRef(state);React.useEffect(function(){stateRef.current=state;},[state]);React.useEffect(function(){dispatch({type:\"reset\"});if(connection===undefined)return;var slotSubscription=connection.onSlotChange(function(_ref2){var slot=_ref2.slot;targetSlot.current=slot;});var rootSubscription=connection.onRootChange(function(root){dispatch({type:\"root\",root:root});});// Poll for signature statuses to determine which slot a tx landed in\nvar intervalId=DEBUG_MODE?setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var fetchStatuses,slots,signatures,statuses,i,status;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:fetchStatuses=[];stateRef.current.forEach(function(tx){if(tx.status===\"success\"&&tx.slot.landed===undefined){fetchStatuses.push(tx.details.signature);}});if(!(fetchStatuses.length===0)){_context.next=4;break;}return _context.abrupt(\"return\");case 4:slots=[];signatures=[];_context.next=8;return connection.getSignatureStatuses(fetchStatuses);case 8:statuses=_context.sent.value;for(i=0;i<statuses.length;i++){status=statuses[i];if(status!==null){slots.push(status.slot);signatures.push(fetchStatuses[i]);}}if(!(slots.length===0)){_context.next=12;break;}return _context.abrupt(\"return\");case 12:dispatch({type:\"landed\",slots:slots,signatures:signatures});case 13:case\"end\":return _context.stop();}}},_callee);})),2000):undefined;return function(){connection.removeSlotChangeListener(slotSubscription);connection.removeRootChangeListener(rootSubscription);intervalId!==undefined&&clearInterval(intervalId);};},[connection]);var _useThrottle=useThrottle(state,10),_useThrottle2=_slicedToArray(_useThrottle,2),throttledState=_useThrottle2[0],setThrottledState=_useThrottle2[1];React.useEffect(function(){setThrottledState(state);},[state,setThrottledState]);return/*#__PURE__*/_jsx(StateContext.Provider,{value:throttledState,children:/*#__PURE__*/_jsx(DispatchContext.Provider,{value:dispatch,children:/*#__PURE__*/_jsx(SlotContext.Provider,{value:targetSlot,children:/*#__PURE__*/_jsx(SelectedTxProvider,{children:/*#__PURE__*/_jsx(CreateTxProvider,{children:/*#__PURE__*/_jsx(ConfirmedHelper,{children:/*#__PURE__*/_jsx(TpsProvider,{children:children})})})})})})});}function timeElapsed(sentAt){var receivedAt=arguments.length>1&&arguments[1]!==undefined?arguments[1]:performance.now();return parseFloat(((receivedAt-sentAt)/1000).toFixed(3));}export function useDispatch(){var dispatch=React.useContext(DispatchContext);if(!dispatch){throw new Error(\"useDispatch must be used within a TransactionsProvider\");}return dispatch;}export function useTargetSlotRef(){var dispatch=React.useContext(SlotContext);if(!dispatch){throw new Error(\"useTargetSlotRef must be used within a TransactionsProvider\");}return dispatch;}export function useTransactions(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useTransactions must be used within a TransactionsProvider\");}return state;}export function useConfirmedCount(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useConfirmedCount must be used within a TransactionsProvider\");}return state.filter(function(_ref4){var status=_ref4.status;return status===\"success\";}).length;}export function useDroppedCount(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useDroppedCount must be used within a TransactionsProvider\");}return state.filter(function(_ref5){var status=_ref5.status;return status===\"timeout\";}).length;}export function useAvgConfirmationTime(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useAvgConfirmationTime must be used within a TransactionsProvider\");}var confirmed=state.reduce(function(confirmed,tx){if(tx.status===\"success\"){var confTime=tx.timing[COMMITMENT_PARAM];if(confTime!==undefined)confirmed.push(confTime);}return confirmed;},[]);var count=confirmed.length;if(count===0)return 0;var sum=confirmed.reduce(function(sum,time){return sum+time;},0);return sum/count;}export function useCreatedCount(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useCreatedCount must be used within a TransactionsProvider\");}return state.length;}export function useTps(){var tps=React.useContext(TpsContext);if(tps===undefined)throw new Error(\"useTps must be used within a TransactionsProvider\");return tps;}export function useCreateTxRef(){var createTxRef=React.useContext(CreateTxContext);if(createTxRef===undefined)throw new Error(\"useCreateTxRef must be used within a TransactionsProvider\");return createTxRef;}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/index.tsx"],"names":["React","useThrottle","ConfirmedHelper","DEBUG_MODE","TpsProvider","TpsContext","CreateTxContext","CreateTxProvider","SelectedTxProvider","useConnection","COMMITMENT_PARAM","commitment","URLSearchParams","window","location","search","get","reducer","state","action","type","details","pendingTransaction","status","pending","trackingId","length","timeout","clearInterval","retryId","map","tx","signature","activeIdPartition","ids","partition","partitionCount","id","Math","floor","has","clearTimeout","timeoutId","slot","target","targetSlot","estimated","estimatedSlot","timing","sentAt","timeElapsed","receivedAt","undefined","recent","forEach","foundRooted","find","landedSlot","landed","root","index","signatures","findIndex","val","slots","SlotContext","createContext","StateContext","DispatchContext","TransactionsProvider","children","useReducer","dispatch","connection","useRef","stateRef","useEffect","current","slotSubscription","onSlotChange","rootSubscription","onRootChange","intervalId","setInterval","fetchStatuses","push","getSignatureStatuses","statuses","value","i","removeSlotChangeListener","removeRootChangeListener","throttledState","setThrottledState","performance","now","parseFloat","toFixed","useDispatch","useContext","Error","useTargetSlotRef","useTransactions","useConfirmedCount","filter","useDroppedCount","useAvgConfirmationTime","confirmed","reduce","confTime","count","sum","time","useCreatedCount","useTps","tps","useCreateTxRef","createTxRef"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { useThrottle } from \"@react-hook/throttle\";\nimport { TransactionSignature, PublicKey } from \"@solana/web3.js\";\nimport { ConfirmedHelper, DEBUG_MODE } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { CreateTxContext, CreateTxProvider } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useConnection } from \"providers/rpc\";\n\nexport type PendingTransaction = {\n  sentAt: number;\n  targetSlot: number;\n  retryId?: number;\n  timeoutId?: number;\n};\n\nexport type TransactionDetails = {\n  id: number;\n  feeAccount: PublicKey;\n  programAccount: PublicKey;\n  signature: TransactionSignature;\n};\n\ntype Timing = {\n  sentAt: number;\n  recent?: number;\n  single?: number;\n  singleGossip?: number;\n};\n\ntype SuccessState = {\n  status: \"success\";\n  details: TransactionDetails;\n  slot: {\n    target: number;\n    landed?: number;\n    estimated: number;\n  };\n  timing: Timing;\n  pending?: PendingTransaction;\n};\n\nexport const COMMITMENT_PARAM = ((): TrackedCommitment => {\n  const commitment = new URLSearchParams(window.location.search).get(\n    \"commitment\"\n  );\n  switch (commitment) {\n    case \"recent\":\n    case \"single\": {\n      return commitment;\n    }\n    default: {\n      return \"singleGossip\";\n    }\n  }\n})();\n\nexport type TrackedCommitment = \"single\" | \"singleGossip\" | \"recent\";\n\ntype TimeoutState = {\n  status: \"timeout\";\n  details: TransactionDetails;\n};\n\ntype PendingState = {\n  status: \"pending\";\n  pending: PendingTransaction;\n  details: TransactionDetails;\n};\n\nexport type TransactionStatus = \"success\" | \"timeout\" | \"pending\";\n\nexport type TransactionState = SuccessState | TimeoutState | PendingState;\n\nexport type ActionType =\n  | \"new\"\n  | \"update\"\n  | \"timeout\"\n  | \"reset\"\n  | \"root\"\n  | \"landed\";\n\ntype UpdateIds = {\n  type: \"update\";\n  activeIdPartition: {\n    ids: Set<number>;\n    partition: number;\n    partitionCount: number;\n  };\n  commitment: TrackedCommitment;\n  receivedAt: number;\n  estimatedSlot: number;\n};\n\ntype LandedTxs = {\n  type: \"landed\";\n  signatures: TransactionSignature[];\n  slots: number[];\n};\n\ntype NewTransaction = {\n  type: \"new\";\n  trackingId: number;\n  details: TransactionDetails;\n  pendingTransaction: PendingTransaction;\n};\n\ntype TimeoutTransaction = {\n  type: \"timeout\";\n  trackingId: number;\n};\n\ntype ResetState = {\n  type: \"reset\";\n};\n\ntype RecordRoot = {\n  type: \"root\";\n  root: number;\n};\n\ntype Action =\n  | NewTransaction\n  | UpdateIds\n  | TimeoutTransaction\n  | ResetState\n  | RecordRoot\n  | LandedTxs;\n\ntype State = TransactionState[];\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"new\": {\n      const { details, pendingTransaction } = action;\n      return [\n        ...state,\n        {\n          details,\n          status: \"pending\",\n          pending: pendingTransaction,\n        },\n      ];\n    }\n\n    case \"timeout\": {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const timeout = state[trackingId];\n      if (timeout.status !== \"pending\") return state;\n      clearInterval(timeout.pending.retryId);\n\n      return state.map((tx) => {\n        if (tx.details.signature === timeout.details.signature) {\n          return {\n            status: \"timeout\",\n            details: tx.details,\n          };\n        } else {\n          return tx;\n        }\n      });\n    }\n\n    case \"update\": {\n      const { ids, partition, partitionCount } = action.activeIdPartition;\n      return state.map((tx, trackingId) => {\n        if (trackingId % partitionCount !== partition) return tx;\n        const id = Math.floor(trackingId / partitionCount);\n        if (tx.status === \"pending\" && ids.has(id)) {\n          // Optimistically confirmed, no need to continue retry\n          if (\n            action.commitment === \"singleGossip\" ||\n            action.commitment === \"single\"\n          ) {\n            clearInterval(tx.pending.retryId);\n            clearTimeout(tx.pending.timeoutId);\n          }\n\n          return {\n            status: \"success\",\n            details: tx.details,\n            slot: {\n              target: tx.pending.targetSlot,\n              estimated: action.estimatedSlot,\n            },\n            timing: {\n              sentAt: tx.pending.sentAt,\n              [action.commitment]: timeElapsed(\n                tx.pending.sentAt,\n                action.receivedAt\n              ),\n            },\n            pending: tx.pending,\n          };\n        } else if (tx.status === \"success\") {\n          if (ids.has(id)) {\n            // Already recorded conf time\n            if (tx.timing[action.commitment] !== undefined) {\n              return tx;\n            }\n\n            // Optimistically confirmed, no need to continue retry\n            if (\n              tx.pending &&\n              (action.commitment === \"singleGossip\" ||\n                action.commitment === \"single\")\n            ) {\n              clearInterval(tx.pending.retryId);\n              clearTimeout(tx.pending.timeoutId);\n            }\n\n            return {\n              ...tx,\n              timing: {\n                ...tx.timing,\n                [action.commitment]: timeElapsed(\n                  tx.timing.sentAt,\n                  action.receivedAt\n                ),\n              },\n            };\n          } else if (\n            action.commitment === \"recent\" &&\n            tx.pending &&\n            !ids.has(id)\n          ) {\n            // Don't revert to pending state if we already received timing info for other commitments\n            if (\n              tx.timing[\"single\"] !== undefined ||\n              tx.timing[\"singleGossip\"] !== undefined\n            ) {\n              return {\n                ...tx,\n                timing: {\n                  ...tx.timing,\n                  recent: undefined,\n                },\n              };\n            }\n\n            // Revert to pending state because the previous notification likely came from a fork\n            return {\n              status: \"pending\",\n              details: tx.details,\n              pending: { ...tx.pending },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"reset\": {\n      state.forEach((tx) => {\n        if (tx.status === \"pending\") {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        } else if (tx.status === \"success\" && tx.pending) {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        }\n      });\n      return [];\n    }\n\n    case \"root\": {\n      const foundRooted = state.find((tx) => {\n        if (tx.status === \"success\" && tx.pending) {\n          const landedSlot = !DEBUG_MODE ? tx.slot.estimated : tx.slot.landed;\n          return landedSlot === action.root;\n        } else {\n          return false;\n        }\n      });\n\n      // Avoid re-allocating state map\n      if (!foundRooted) return state;\n\n      return state.map((tx) => {\n        if (tx.status === \"success\" && tx.pending) {\n          const landedSlot = !DEBUG_MODE ? tx.slot.estimated : tx.slot.landed;\n          if (landedSlot === action.root) {\n            clearInterval(tx.pending.retryId);\n            clearTimeout(tx.pending.timeoutId);\n            return {\n              ...tx,\n              pending: undefined,\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"landed\": {\n      return state.map((tx) => {\n        if (tx.status === \"success\") {\n          const index = action.signatures.findIndex(\n            (val) => val === tx.details.signature\n          );\n          if (index >= 0) {\n            return {\n              ...tx,\n              slot: {\n                ...tx.slot,\n                landed: action.slots[index],\n              },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n  }\n}\n\nexport type Dispatch = (action: Action) => void;\nconst SlotContext = React.createContext<\n  React.MutableRefObject<number | undefined> | undefined\n>(undefined);\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function TransactionsProvider({ children }: ProviderProps) {\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n  const targetSlot = React.useRef<number>();\n  const stateRef = React.useRef(state);\n\n  React.useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n\n  React.useEffect(() => {\n    dispatch({\n      type: \"reset\",\n    });\n\n    if (connection === undefined) return;\n    const slotSubscription = connection.onSlotChange(({ slot }) => {\n      targetSlot.current = slot;\n    });\n    const rootSubscription = connection.onRootChange((root) => {\n      dispatch({ type: \"root\", root });\n    });\n\n    // Poll for signature statuses to determine which slot a tx landed in\n    const intervalId = DEBUG_MODE\n      ? setInterval(async () => {\n          const fetchStatuses: string[] = [];\n          stateRef.current.forEach((tx) => {\n            if (tx.status === \"success\" && tx.slot.landed === undefined) {\n              fetchStatuses.push(tx.details.signature);\n            }\n          });\n\n          if (fetchStatuses.length === 0) return;\n\n          const slots: number[] = [];\n          const signatures: TransactionSignature[] = [];\n          const statuses = (\n            await connection.getSignatureStatuses(fetchStatuses)\n          ).value;\n          for (var i = 0; i < statuses.length; i++) {\n            const status = statuses[i];\n            if (status !== null) {\n              slots.push(status.slot);\n              signatures.push(fetchStatuses[i]);\n            }\n          }\n          if (slots.length === 0) return;\n          dispatch({ type: \"landed\", slots, signatures });\n        }, 2000)\n      : undefined;\n\n    return () => {\n      connection.removeSlotChangeListener(slotSubscription);\n      connection.removeRootChangeListener(rootSubscription);\n      intervalId !== undefined && clearInterval(intervalId);\n    };\n  }, [connection]);\n\n  const [throttledState, setThrottledState] = useThrottle(state, 10);\n  React.useEffect(() => {\n    setThrottledState(state);\n  }, [state, setThrottledState]);\n\n  return (\n    <StateContext.Provider value={throttledState}>\n      <DispatchContext.Provider value={dispatch}>\n        <SlotContext.Provider value={targetSlot}>\n          <SelectedTxProvider>\n            <CreateTxProvider>\n              <ConfirmedHelper>\n                <TpsProvider>{children}</TpsProvider>\n              </ConfirmedHelper>\n            </CreateTxProvider>\n          </SelectedTxProvider>\n        </SlotContext.Provider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nfunction timeElapsed(\n  sentAt: number,\n  receivedAt: number = performance.now()\n): number {\n  return parseFloat(((receivedAt - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\n\nexport function useTargetSlotRef() {\n  const dispatch = React.useContext(SlotContext);\n  if (!dispatch) {\n    throw new Error(\n      `useTargetSlotRef must be used within a TransactionsProvider`\n    );\n  }\n\n  return dispatch;\n}\n\nexport function useTransactions() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useTransactions must be used within a TransactionsProvider`\n    );\n  }\n\n  return state;\n}\n\nexport function useConfirmedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useConfirmedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"success\").length;\n}\n\nexport function useDroppedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useDroppedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"timeout\").length;\n}\n\nexport function useAvgConfirmationTime() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useAvgConfirmationTime must be used within a TransactionsProvider`\n    );\n  }\n\n  const confirmed = state.reduce((confirmed: number[], tx) => {\n    if (tx.status === \"success\") {\n      const confTime = tx.timing[COMMITMENT_PARAM];\n      if (confTime !== undefined) confirmed.push(confTime);\n    }\n    return confirmed;\n  }, []);\n\n  const count = confirmed.length;\n  if (count === 0) return 0;\n  const sum = confirmed.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\n\nexport function useCreatedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useCreatedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.length;\n}\n\nexport function useTps() {\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined)\n    throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\n\nexport function useCreateTxRef() {\n  const createTxRef = React.useContext(CreateTxContext);\n  if (createTxRef === undefined)\n    throw new Error(\n      `useCreateTxRef must be used within a TransactionsProvider`\n    );\n  return createTxRef;\n}\n"]},"metadata":{},"sourceType":"module"}