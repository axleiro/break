{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/rpc/balance.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useConfig } from \"../server/http\";\nimport { usePayerState } from \"../wallet\";\nimport { reportError } from \"utils\";\nimport { useConnection } from \".\";\nconst StateContext = /*#__PURE__*/React.createContext(undefined);\nexport function BalanceProvider({\n  children\n}) {\n  _s();\n\n  const [balance, setBalance] = React.useState(\"loading\");\n  const [payer] = usePayerState();\n  const config = useConfig();\n  const connection = useConnection();\n  const paymentRequired = config === null || config === void 0 ? void 0 : config.paymentRequired;\n  const refreshBalance = React.useCallback(() => {\n    if (payer === undefined || connection === undefined || paymentRequired !== true) {\n      setBalance(\"loading\");\n      return;\n    }\n\n    (async () => {\n      try {\n        const balance = await connection.getBalance(payer.publicKey, \"singleGossip\");\n        setBalance(balance);\n      } catch (err) {\n        reportError(err, \"Failed to refresh balance\");\n      }\n    })();\n  }, [payer, connection, paymentRequired]);\n  React.useEffect(() => {\n    refreshBalance();\n\n    const onChange = () => {\n      if (document.visibilityState !== \"visible\") return;\n      refreshBalance();\n    };\n\n    document.addEventListener(\"visibilitychange\", onChange);\n    return () => document.removeEventListener(\"visibilitychange\", onChange);\n  }, [refreshBalance]);\n  React.useEffect(() => {\n    if (payer === undefined || connection === undefined || paymentRequired !== true) return;\n    const subscription = connection.onAccountChange(payer.publicKey, accountInfo => setBalance(accountInfo.lamports), \"singleGossip\");\n    return () => {\n      connection.removeAccountChangeListener(subscription);\n    };\n  }, [payer, connection, paymentRequired]);\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: balance,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BalanceProvider, \"61OuEcjhQAcX7bhHC8qA8UqIcpA=\", false, function () {\n  return [usePayerState, useConfig, useConnection];\n});\n\n_c = BalanceProvider;\nexport function useBalance() {\n  _s2();\n\n  const state = React.useContext(StateContext);\n\n  if (state === undefined) {\n    throw new Error(`useBalance must be used within a BalanceProvider`);\n  }\n\n  return state;\n}\n\n_s2(useBalance, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"BalanceProvider\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/rpc/balance.tsx"],"names":["React","useConfig","usePayerState","reportError","useConnection","StateContext","createContext","undefined","BalanceProvider","children","balance","setBalance","useState","payer","config","connection","paymentRequired","refreshBalance","useCallback","getBalance","publicKey","err","useEffect","onChange","document","visibilityState","addEventListener","removeEventListener","subscription","onAccountChange","accountInfo","lamports","removeAccountChangeListener","useBalance","state","useContext","Error"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { AccountInfo } from \"@solana/web3.js\";\nimport { useConfig } from \"../server/http\";\nimport { usePayerState } from \"../wallet\";\nimport { reportError } from \"utils\";\nimport { useConnection } from \".\";\n\ntype Balance = number | \"loading\";\nconst StateContext = React.createContext<Balance | undefined>(undefined);\n\ntype Props = { children: React.ReactNode };\nexport function BalanceProvider({ children }: Props) {\n  const [balance, setBalance] = React.useState<Balance>(\"loading\");\n  const [payer] = usePayerState();\n  const config = useConfig();\n  const connection = useConnection();\n  const paymentRequired = config?.paymentRequired;\n\n  const refreshBalance = React.useCallback(() => {\n    if (\n      payer === undefined ||\n      connection === undefined ||\n      paymentRequired !== true\n    ) {\n      setBalance(\"loading\");\n      return;\n    }\n\n    (async () => {\n      try {\n        const balance = await connection.getBalance(\n          payer.publicKey,\n          \"singleGossip\"\n        );\n        setBalance(balance);\n      } catch (err) {\n        reportError(err, \"Failed to refresh balance\");\n      }\n    })();\n  }, [payer, connection, paymentRequired]);\n\n  React.useEffect(() => {\n    refreshBalance();\n    const onChange = () => {\n      if (document.visibilityState !== \"visible\") return;\n      refreshBalance();\n    };\n\n    document.addEventListener(\"visibilitychange\", onChange);\n    return () => document.removeEventListener(\"visibilitychange\", onChange);\n  }, [refreshBalance]);\n\n  React.useEffect(() => {\n    if (\n      payer === undefined ||\n      connection === undefined ||\n      paymentRequired !== true\n    )\n      return;\n    const subscription = connection.onAccountChange(\n      payer.publicKey,\n      (accountInfo: AccountInfo<Buffer>) => setBalance(accountInfo.lamports),\n      \"singleGossip\"\n    );\n\n    return () => {\n      connection.removeAccountChangeListener(subscription);\n    };\n  }, [payer, connection, paymentRequired]);\n\n  return (\n    <StateContext.Provider value={balance}>{children}</StateContext.Provider>\n  );\n}\n\nexport function useBalance(): Balance {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useBalance must be used within a BalanceProvider`);\n  }\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}