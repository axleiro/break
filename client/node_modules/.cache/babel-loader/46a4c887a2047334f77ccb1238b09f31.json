{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/server/socket.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useServer } from \".\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/React.createContext(undefined);\nconst ActiveUsersContext = /*#__PURE__*/React.createContext(undefined);\nconst SWITCH_URL_CODE = 4444;\nlet socketCounter = 0;\nexport function SocketProvider({\n  children\n}) {\n  _s();\n\n  let [socket, setSocket] = React.useState(undefined);\n  let [activeUsers, setActiveUsers] = React.useState(1);\n  const {\n    webSocketUrl\n  } = useServer();\n  React.useEffect(() => {\n    newSocket(webSocketUrl, setSocket, setActiveUsers);\n  }, [webSocketUrl]);\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: socket === null || socket === void 0 ? void 0 : socket.socket,\n    children: /*#__PURE__*/_jsxDEV(ActiveUsersContext.Provider, {\n      value: activeUsers,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SocketProvider, \"GtQXlB6Gt48NaFbby8erxd5my+s=\", false, function () {\n  return [useServer];\n});\n\n_c = SocketProvider;\n\nfunction newSocket(webSocketUrl, setSocket, setActiveUsers) {\n  socketCounter++;\n  const id = socketCounter;\n  let socket;\n\n  try {\n    socket = new WebSocket(webSocketUrl);\n  } catch (err) {\n    return;\n  }\n\n  socket.onopen = () => setSocket(serverSocket => {\n    if (!serverSocket || serverSocket.id <= id) {\n      if (serverSocket && serverSocket.socket.readyState === WebSocket.OPEN) {\n        serverSocket.socket.close(SWITCH_URL_CODE);\n      }\n\n      return {\n        socket,\n        id\n      };\n    } else {\n      socket.close(SWITCH_URL_CODE);\n      return serverSocket;\n    }\n  });\n\n  socket.onmessage = e => {\n    const data = JSON.parse(e.data);\n\n    if (\"activeUsers\" in data) {\n      setActiveUsers(data.activeUsers);\n    }\n  };\n\n  socket.onclose = async event => {\n    setSocket(serverSocket => {\n      // Socket may have been updated already\n      if (!serverSocket || serverSocket.id === id) {\n        // Reconnect if close was not explicit\n        if (event.code !== SWITCH_URL_CODE) {\n          console.error(\"Socket closed, reconnecting...\"); // TODO: Re-enable\n          // reportError(new Error(\"Socket was closed\"), \"Socket closed\");\n\n          setTimeout(() => {\n            newSocket(webSocketUrl, setSocket, setActiveUsers);\n          }, 5000);\n        }\n\n        return undefined;\n      }\n\n      return serverSocket;\n    });\n  };\n\n  socket.onerror = async () => {\n    socket.close();\n  };\n\n  return socket;\n}\n\nexport function useSocket() {\n  _s2();\n\n  return React.useContext(SocketContext);\n}\n\n_s2(useSocket, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function useActiveUsers() {\n  _s3();\n\n  const context = React.useContext(ActiveUsersContext);\n\n  if (!context) {\n    throw new Error(`useActiveUsers must be used within a SocketProvider`);\n  }\n\n  return context;\n}\n\n_s3(useActiveUsers, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/server/socket.tsx"],"names":["React","useServer","SocketContext","createContext","undefined","ActiveUsersContext","SWITCH_URL_CODE","socketCounter","SocketProvider","children","socket","setSocket","useState","activeUsers","setActiveUsers","webSocketUrl","useEffect","newSocket","id","WebSocket","err","onopen","serverSocket","readyState","OPEN","close","onmessage","e","data","JSON","parse","onclose","event","code","console","error","setTimeout","onerror","useSocket","useContext","useActiveUsers","context","Error"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,GAA1B;;AAGA,MAAMC,aAAa,gBAAGF,KAAK,CAACG,aAAN,CAA2CC,SAA3C,CAAtB;AAGA,MAAMC,kBAAkB,gBAAGL,KAAK,CAACG,aAAN,CAAwCC,SAAxC,CAA3B;AAEA,MAAME,eAAe,GAAG,IAAxB;AAOA,IAAIC,aAAa,GAAG,CAApB;AAGA,OAAO,SAASC,cAAT,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAA2D;AAAA;;AAChE,MAAI,CAACC,MAAD,EAASC,SAAT,IAAsBX,KAAK,CAACY,QAAN,CAAyCR,SAAzC,CAA1B;AACA,MAAI,CAACS,WAAD,EAAcC,cAAd,IAAgCd,KAAK,CAACY,QAAN,CAAuB,CAAvB,CAApC;AAEA,QAAM;AAAEG,IAAAA;AAAF,MAAmBd,SAAS,EAAlC;AACAD,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpBC,IAAAA,SAAS,CAACF,YAAD,EAAeJ,SAAf,EAA0BG,cAA1B,CAAT;AACD,GAFD,EAEG,CAACC,YAAD,CAFH;AAIA,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEL,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEA,MAAvC;AAAA,2BACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,MAAA,KAAK,EAAEG,WAApC;AAAA,gBACGJ;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAhBeD,c;UAIWP,S;;;KAJXO,c;;AAkBhB,SAASS,SAAT,CACEF,YADF,EAEEJ,SAFF,EAGEG,cAHF,EAIyB;AACvBP,EAAAA,aAAa;AACb,QAAMW,EAAE,GAAGX,aAAX;AAEA,MAAIG,MAAJ;;AACA,MAAI;AACFA,IAAAA,MAAM,GAAG,IAAIS,SAAJ,CAAcJ,YAAd,CAAT;AACD,GAFD,CAEE,OAAOK,GAAP,EAAY;AACZ;AACD;;AAEDV,EAAAA,MAAM,CAACW,MAAP,GAAgB,MACdV,SAAS,CAAEW,YAAD,IAAkB;AAC1B,QAAI,CAACA,YAAD,IAAiBA,YAAY,CAACJ,EAAb,IAAmBA,EAAxC,EAA4C;AAC1C,UAAII,YAAY,IAAIA,YAAY,CAACZ,MAAb,CAAoBa,UAApB,KAAmCJ,SAAS,CAACK,IAAjE,EAAuE;AACrEF,QAAAA,YAAY,CAACZ,MAAb,CAAoBe,KAApB,CAA0BnB,eAA1B;AACD;;AACD,aAAO;AAAEI,QAAAA,MAAF;AAAUQ,QAAAA;AAAV,OAAP;AACD,KALD,MAKO;AACLR,MAAAA,MAAM,CAACe,KAAP,CAAanB,eAAb;AACA,aAAOgB,YAAP;AACD;AACF,GAVQ,CADX;;AAaAZ,EAAAA,MAAM,CAACgB,SAAP,GAAoBC,CAAD,IAAO;AACxB,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACC,IAAb,CAAb;;AACA,QAAI,iBAAiBA,IAArB,EAA2B;AACzBd,MAAAA,cAAc,CAACc,IAAI,CAACf,WAAN,CAAd;AACD;AACF,GALD;;AAOAH,EAAAA,MAAM,CAACqB,OAAP,GAAiB,MAAOC,KAAP,IAAiB;AAChCrB,IAAAA,SAAS,CAAEW,YAAD,IAAkB;AAC1B;AACA,UAAI,CAACA,YAAD,IAAiBA,YAAY,CAACJ,EAAb,KAAoBA,EAAzC,EAA6C;AAC3C;AACA,YAAIc,KAAK,CAACC,IAAN,KAAe3B,eAAnB,EAAoC;AAClC4B,UAAAA,OAAO,CAACC,KAAR,CAAc,gCAAd,EADkC,CAElC;AACA;;AACAC,UAAAA,UAAU,CAAC,MAAM;AACfnB,YAAAA,SAAS,CAACF,YAAD,EAAeJ,SAAf,EAA0BG,cAA1B,CAAT;AACD,WAFS,EAEP,IAFO,CAAV;AAGD;;AACD,eAAOV,SAAP;AACD;;AACD,aAAOkB,YAAP;AACD,KAfQ,CAAT;AAgBD,GAjBD;;AAmBAZ,EAAAA,MAAM,CAAC2B,OAAP,GAAiB,YAAY;AAC3B3B,IAAAA,MAAM,CAACe,KAAP;AACD,GAFD;;AAIA,SAAOf,MAAP;AACD;;AAED,OAAO,SAAS4B,SAAT,GAAqB;AAAA;;AAC1B,SAAOtC,KAAK,CAACuC,UAAN,CAAiBrC,aAAjB,CAAP;AACD;;IAFeoC,S;;AAIhB,OAAO,SAASE,cAAT,GAA0B;AAAA;;AAC/B,QAAMC,OAAO,GAAGzC,KAAK,CAACuC,UAAN,CAAiBlC,kBAAjB,CAAhB;;AACA,MAAI,CAACoC,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAW,qDAAX,CAAN;AACD;;AAED,SAAOD,OAAP;AACD;;IAPeD,c","sourcesContent":["import * as React from \"react\";\nimport { useServer } from \".\";\n\ntype SetSocket = React.Dispatch<React.SetStateAction<ServerSocket | undefined>>;\nconst SocketContext = React.createContext<WebSocket | undefined>(undefined);\n\ntype SetActiveUsers = React.Dispatch<React.SetStateAction<number>>;\nconst ActiveUsersContext = React.createContext<number | undefined>(undefined);\n\nconst SWITCH_URL_CODE = 4444;\n\ntype ServerSocket = {\n  socket: WebSocket;\n  id: number;\n};\n\nlet socketCounter = 0;\n\ntype SocketProviderProps = { children: React.ReactNode };\nexport function SocketProvider({ children }: SocketProviderProps) {\n  let [socket, setSocket] = React.useState<ServerSocket | undefined>(undefined);\n  let [activeUsers, setActiveUsers] = React.useState<number>(1);\n\n  const { webSocketUrl } = useServer();\n  React.useEffect(() => {\n    newSocket(webSocketUrl, setSocket, setActiveUsers);\n  }, [webSocketUrl]);\n\n  return (\n    <SocketContext.Provider value={socket?.socket}>\n      <ActiveUsersContext.Provider value={activeUsers}>\n        {children}\n      </ActiveUsersContext.Provider>\n    </SocketContext.Provider>\n  );\n}\n\nfunction newSocket(\n  webSocketUrl: string,\n  setSocket: SetSocket,\n  setActiveUsers: SetActiveUsers\n): WebSocket | undefined {\n  socketCounter++;\n  const id = socketCounter;\n\n  let socket: WebSocket;\n  try {\n    socket = new WebSocket(webSocketUrl);\n  } catch (err) {\n    return;\n  }\n\n  socket.onopen = () =>\n    setSocket((serverSocket) => {\n      if (!serverSocket || serverSocket.id <= id) {\n        if (serverSocket && serverSocket.socket.readyState === WebSocket.OPEN) {\n          serverSocket.socket.close(SWITCH_URL_CODE);\n        }\n        return { socket, id };\n      } else {\n        socket.close(SWITCH_URL_CODE);\n        return serverSocket;\n      }\n    });\n\n  socket.onmessage = (e) => {\n    const data = JSON.parse(e.data);\n    if (\"activeUsers\" in data) {\n      setActiveUsers(data.activeUsers);\n    }\n  };\n\n  socket.onclose = async (event) => {\n    setSocket((serverSocket) => {\n      // Socket may have been updated already\n      if (!serverSocket || serverSocket.id === id) {\n        // Reconnect if close was not explicit\n        if (event.code !== SWITCH_URL_CODE) {\n          console.error(\"Socket closed, reconnecting...\");\n          // TODO: Re-enable\n          // reportError(new Error(\"Socket was closed\"), \"Socket closed\");\n          setTimeout(() => {\n            newSocket(webSocketUrl, setSocket, setActiveUsers);\n          }, 5000);\n        }\n        return undefined;\n      }\n      return serverSocket;\n    });\n  };\n\n  socket.onerror = async () => {\n    socket.close();\n  };\n\n  return socket;\n}\n\nexport function useSocket() {\n  return React.useContext(SocketContext);\n}\n\nexport function useActiveUsers() {\n  const context = React.useContext(ActiveUsersContext);\n  if (!context) {\n    throw new Error(`useActiveUsers must be used within a SocketProvider`);\n  }\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}