{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/rpc/index.tsx\";\nimport React from \"react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useConfig } from \"providers/server/http\";\nimport { BlockhashProvider } from \"./blockhash\";\nimport { BalanceProvider } from \"./balance\";\nconst StateContext = React.createContext(undefined);\nconst ConnectionContext = React.createContext(undefined);\nexport function RpcProvider({\n  children\n}) {\n  var _useConfig;\n\n  const state = React.useState();\n  const [rpcUrl, setRpcUrl] = state; // Reset rpc url whenever config is fetched\n\n  const configRpcUrl = (_useConfig = useConfig()) === null || _useConfig === void 0 ? void 0 : _useConfig.rpcUrl;\n  React.useEffect(() => {\n    setRpcUrl(configRpcUrl);\n  }, [configRpcUrl, setRpcUrl]);\n  const connection = React.useMemo(() => {\n    if (rpcUrl === undefined) {\n      if (configRpcUrl === undefined) {\n        return {};\n      } else {\n        return {\n          connection: new Connection(configRpcUrl)\n        };\n      }\n    }\n\n    return {\n      connection: new Connection(rpcUrl)\n    };\n  }, [rpcUrl]);\n  return /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ConnectionContext.Provider, {\n    value: connection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BlockhashProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BalanceProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, children))));\n}\nexport function useRpcUrlState() {\n  const state = React.useContext(StateContext);\n\n  if (state === undefined) {\n    throw new Error(`useRpcUrlState must be used within a RpcProvider`);\n  }\n\n  return state;\n}\nexport function useConnection() {\n  const state = React.useContext(ConnectionContext);\n\n  if (state === undefined) {\n    throw new Error(`useConnection must be used within a RpcProvider`);\n  }\n\n  return state.connection;\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/rpc/index.tsx"],"names":["React","Connection","useConfig","BlockhashProvider","BalanceProvider","StateContext","createContext","undefined","ConnectionContext","RpcProvider","children","state","useState","rpcUrl","setRpcUrl","configRpcUrl","useEffect","connection","useMemo","useRpcUrlState","useContext","Error","useConnection"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,iBAAT,QAAkC,aAAlC;AACA,SAASC,eAAT,QAAgC,WAAhC;AASA,MAAMC,YAAY,GAAGL,KAAK,CAACM,aAAN,CAAuCC,SAAvC,CAArB;AACA,MAAMC,iBAAiB,GAAGR,KAAK,CAACM,aAAN,CACxBC,SADwB,CAA1B;AAKA,OAAO,SAASE,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAkD;AAAA;;AACvD,QAAMC,KAAK,GAAGX,KAAK,CAACY,QAAN,EAAd;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,KAA5B,CAFuD,CAIvD;;AACA,QAAMI,YAAY,iBAAGb,SAAS,EAAZ,+CAAG,WAAaW,MAAlC;AACAb,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpBF,IAAAA,SAAS,CAACC,YAAD,CAAT;AACD,GAFD,EAEG,CAACA,YAAD,EAAeD,SAAf,CAFH;AAIA,QAAMG,UAA2B,GAAGjB,KAAK,CAACkB,OAAN,CAAc,MAAM;AACtD,QAAIL,MAAM,KAAKN,SAAf,EAA0B;AACxB,UAAIQ,YAAY,KAAKR,SAArB,EAAgC;AAC9B,eAAO,EAAP;AACD,OAFD,MAEO;AACL,eAAO;AAAEU,UAAAA,UAAU,EAAE,IAAIhB,UAAJ,CAAec,YAAf;AAAd,SAAP;AACD;AACF;;AACD,WAAO;AAAEE,MAAAA,UAAU,EAAE,IAAIhB,UAAJ,CAAeY,MAAf;AAAd,KAAP;AACD,GATmC,EASjC,CAACA,MAAD,CATiC,CAApC;AAWA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEF,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEM,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkBP,QAAlB,CADF,CADF,CADF,CADF;AASD;AAED,OAAO,SAASS,cAAT,GAAiC;AACtC,QAAMR,KAAK,GAAGX,KAAK,CAACoB,UAAN,CAAiBf,YAAjB,CAAd;;AACA,MAAIM,KAAK,KAAKJ,SAAd,EAAyB;AACvB,UAAM,IAAIc,KAAJ,CAAW,kDAAX,CAAN;AACD;;AACD,SAAOV,KAAP;AACD;AAED,OAAO,SAASW,aAAT,GAAiD;AACtD,QAAMX,KAAK,GAAGX,KAAK,CAACoB,UAAN,CAAiBZ,iBAAjB,CAAd;;AACA,MAAIG,KAAK,KAAKJ,SAAd,EAAyB;AACvB,UAAM,IAAIc,KAAJ,CAAW,iDAAX,CAAN;AACD;;AACD,SAAOV,KAAK,CAACM,UAAb;AACD","sourcesContent":["import React from \"react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useConfig } from \"providers/server/http\";\nimport { BlockhashProvider } from \"./blockhash\";\nimport { BalanceProvider } from \"./balance\";\n\ntype SetUrl = (url: string | undefined) => void;\ntype State = [string | undefined, SetUrl];\n\ntype ConnectionState = {\n  connection?: Connection;\n};\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst ConnectionContext = React.createContext<ConnectionState | undefined>(\n  undefined\n);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function RpcProvider({ children }: ProviderProps) {\n  const state = React.useState<string>();\n  const [rpcUrl, setRpcUrl] = state;\n\n  // Reset rpc url whenever config is fetched\n  const configRpcUrl = useConfig()?.rpcUrl;\n  React.useEffect(() => {\n    setRpcUrl(configRpcUrl);\n  }, [configRpcUrl, setRpcUrl]);\n\n  const connection: ConnectionState = React.useMemo(() => {\n    if (rpcUrl === undefined) {\n      if (configRpcUrl === undefined) {\n        return {};\n      } else {\n        return { connection: new Connection(configRpcUrl) };\n      }\n    }\n    return { connection: new Connection(rpcUrl) };\n  }, [rpcUrl]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <ConnectionContext.Provider value={connection}>\n        <BlockhashProvider>\n          <BalanceProvider>{children}</BalanceProvider>\n        </BlockhashProvider>\n      </ConnectionContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport function useRpcUrlState(): State {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useRpcUrlState must be used within a RpcProvider`);\n  }\n  return state;\n}\n\nexport function useConnection(): Connection | undefined {\n  const state = React.useContext(ConnectionContext);\n  if (state === undefined) {\n    throw new Error(`useConnection must be used within a RpcProvider`);\n  }\n  return state.connection;\n}\n"]},"metadata":{},"sourceType":"module"}