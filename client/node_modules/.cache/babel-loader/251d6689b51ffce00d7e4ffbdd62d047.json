{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useThrottle } from \"@react-hook/throttle\";\nimport { ConfirmedHelper } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { CreateTxContext, CreateTxProvider } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useConnection } from \"providers/rpc\";\nexport const COMMITMENT_PARAM = (() => {\n  const commitment = new URLSearchParams(window.location.search).get(\"commitment\");\n\n  switch (commitment) {\n    case \"recent\":\n      {\n        return commitment;\n      }\n\n    default:\n      {\n        return \"singleGossip\";\n      }\n  }\n})();\nexport const getCommitmentName = commitment => {\n  if (commitment === \"singleGossip\") {\n    return \"confirmed\";\n  } else {\n    return \"processed\";\n  }\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"new\":\n      {\n        const {\n          details,\n          pendingTransaction\n        } = action;\n        return [...state, {\n          details,\n          status: \"pending\",\n          received: [],\n          pending: pendingTransaction\n        }];\n      }\n\n    case \"received\":\n      {\n        const trackingId = action.trackingId;\n        if (trackingId >= state.length) return state;\n        const transaction = state[trackingId];\n        return state.map(tx => {\n          if (tx.details.signature === transaction.details.signature) {\n            if (tx.status !== \"timeout\") {\n              return { ...tx,\n                received: [...tx.received, {\n                  slot: action.slot,\n                  receivedAt: action.receivedAt\n                }]\n              };\n            }\n          }\n\n          return tx;\n        });\n      }\n\n    case \"track\":\n      {\n        const trackingId = action.trackingId;\n        if (trackingId >= state.length) return state;\n        const transaction = state[trackingId];\n        return state.map(tx => {\n          if (tx.details.signature === transaction.details.signature) {\n            if (tx.status === \"pending\") {\n              return {\n                status: \"success\",\n                details: tx.details,\n                received: tx.received,\n                slot: {\n                  target: tx.pending.targetSlot,\n                  landed: action.commitmentName === \"confirmed\" ? action.slot : undefined\n                },\n                timing: {\n                  sentAt: tx.pending.sentAt,\n                  [action.commitmentName]: timeElapsed(tx.pending.sentAt, action.receivedAt)\n                },\n                pending: tx.pending\n              };\n            } else if (tx.status === \"success\") {\n              return { ...tx,\n                slot: { ...tx.slot,\n                  landed: action.commitmentName === \"confirmed\" ? action.slot : tx.slot.landed\n                },\n                timing: { ...tx.timing,\n                  [action.commitmentName]: timeElapsed(tx.timing.sentAt, action.receivedAt)\n                }\n              };\n            }\n          }\n\n          return tx;\n        });\n      }\n\n    case \"timeout\":\n      {\n        const trackingId = action.trackingId;\n        if (trackingId >= state.length) return state;\n        const timeout = state[trackingId];\n        if (timeout.status !== \"pending\") return state;\n        clearInterval(timeout.pending.retryId);\n        return state.map(tx => {\n          if (tx.details.signature === timeout.details.signature) {\n            return {\n              status: \"timeout\",\n              details: tx.details\n            };\n          } else {\n            return tx;\n          }\n        });\n      }\n\n    case \"update\":\n      {\n        const {\n          ids,\n          partition,\n          partitionCount\n        } = action.activeIdPartition;\n        return state.map((tx, trackingId) => {\n          if (trackingId % partitionCount !== partition) return tx;\n          const id = Math.floor(trackingId / partitionCount);\n\n          if (tx.status === \"pending\" && ids.has(id)) {\n            // Optimistically confirmed, no need to continue retry\n            if (action.commitment === \"singleGossip\") {\n              clearInterval(tx.pending.retryId);\n              clearTimeout(tx.pending.timeoutId);\n            }\n\n            const commitmentName = getCommitmentName(action.commitment);\n            return {\n              status: \"success\",\n              details: tx.details,\n              received: tx.received,\n              slot: {\n                target: tx.pending.targetSlot,\n                landed: action.estimatedSlot\n              },\n              timing: {\n                sentAt: tx.pending.sentAt,\n                [commitmentName]: timeElapsed(tx.pending.sentAt, action.receivedAt)\n              },\n              pending: tx.pending\n            };\n          } else if (tx.status === \"success\") {\n            if (ids.has(id)) {\n              const commitmentName = getCommitmentName(action.commitment); // Already recorded conf time\n\n              if (tx.timing[commitmentName] !== undefined) {\n                return tx;\n              } // Optimistically confirmed, no need to continue retry\n\n\n              if (tx.pending && action.commitment === \"singleGossip\") {\n                clearInterval(tx.pending.retryId);\n                clearTimeout(tx.pending.timeoutId);\n              }\n\n              return { ...tx,\n                timing: { ...tx.timing,\n                  [commitmentName]: timeElapsed(tx.timing.sentAt, action.receivedAt)\n                }\n              };\n            } else if (action.commitment === \"recent\" && tx.pending && !ids.has(id)) {\n              // Don't revert to pending state if we already received timing info for other commitments\n              if (tx.timing[\"confirmed\"] !== undefined) {\n                return { ...tx,\n                  timing: { ...tx.timing,\n                    processed: undefined\n                  }\n                };\n              } // Revert to pending state because the previous notification likely came from a fork\n\n\n              return {\n                status: \"pending\",\n                details: tx.details,\n                received: tx.received,\n                pending: { ...tx.pending\n                }\n              };\n            }\n          }\n\n          return tx;\n        });\n      }\n\n    case \"reset\":\n      {\n        state.forEach(tx => {\n          if (tx.status === \"pending\") {\n            clearTimeout(tx.pending.timeoutId);\n            clearInterval(tx.pending.retryId);\n          } else if (tx.status === \"success\" && tx.pending) {\n            clearTimeout(tx.pending.timeoutId);\n            clearInterval(tx.pending.retryId);\n          }\n        });\n        return [];\n      }\n\n    case \"root\":\n      {\n        const foundRooted = state.find(tx => {\n          if (tx.status === \"success\" && tx.pending) {\n            return tx.slot.landed === action.root;\n          } else {\n            return false;\n          }\n        }); // Avoid re-allocating state map\n\n        if (!foundRooted) return state;\n        return state.map(tx => {\n          if (tx.status === \"success\" && tx.pending) {\n            if (tx.slot.landed === action.root) {\n              clearInterval(tx.pending.retryId);\n              clearTimeout(tx.pending.timeoutId);\n              return { ...tx,\n                pending: undefined\n              };\n            }\n          }\n\n          return tx;\n        });\n      }\n  }\n}\n\nconst StateContext = /*#__PURE__*/React.createContext(undefined);\nconst DispatchContext = /*#__PURE__*/React.createContext(undefined);\nexport function TransactionsProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n  const stateRef = React.useRef(state);\n  React.useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n  React.useEffect(() => {\n    dispatch({\n      type: \"reset\"\n    });\n    if (connection === undefined) return;\n    const rootSubscription = connection.onRootChange(root => {\n      dispatch({\n        type: \"root\",\n        root\n      });\n    });\n    return () => {\n      connection.removeRootChangeListener(rootSubscription);\n    };\n  }, [connection]);\n  const [throttledState, setThrottledState] = useThrottle(state, 10);\n  React.useEffect(() => {\n    setThrottledState(state);\n  }, [state, setThrottledState]);\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: throttledState,\n    children: /*#__PURE__*/_jsxDEV(DispatchContext.Provider, {\n      value: dispatch,\n      children: /*#__PURE__*/_jsxDEV(SelectedTxProvider, {\n        children: /*#__PURE__*/_jsxDEV(CreateTxProvider, {\n          children: /*#__PURE__*/_jsxDEV(ConfirmedHelper, {\n            children: /*#__PURE__*/_jsxDEV(TpsProvider, {\n              children: children\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 418,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TransactionsProvider, \"CTftcQzjO65qV/w75vMO6HqqFto=\", false, function () {\n  return [useConnection, useThrottle];\n});\n\n_c = TransactionsProvider;\n\nfunction timeElapsed(sentAt, receivedAt = performance.now()) {\n  return parseFloat(((receivedAt - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  _s2();\n\n  const dispatch = React.useContext(DispatchContext);\n\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\n\n_s2(useDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nexport function useTransactions() {\n  _s3();\n\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useTransactions must be used within a TransactionsProvider`);\n  }\n\n  return state;\n}\n\n_s3(useTransactions, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useConfirmedCount() {\n  _s4();\n\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useConfirmedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.filter(({\n    status\n  }) => status === \"success\").length;\n}\n\n_s4(useConfirmedCount, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useDroppedCount() {\n  _s5();\n\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useDroppedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.filter(({\n    status\n  }) => status === \"timeout\").length;\n}\n\n_s5(useDroppedCount, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useAvgConfirmationTime() {\n  _s6();\n\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useAvgConfirmationTime must be used within a TransactionsProvider`);\n  }\n\n  const confirmed = state.reduce((confirmed, tx) => {\n    if (tx.status === \"success\") {\n      const confTime = tx.timing[getCommitmentName(COMMITMENT_PARAM)];\n      if (confTime !== undefined) confirmed.push(confTime);\n    }\n\n    return confirmed;\n  }, []);\n  const count = confirmed.length;\n  if (count === 0) return 0;\n  const sum = confirmed.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\n\n_s6(useAvgConfirmationTime, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useCreatedCount() {\n  _s7();\n\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useCreatedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.length;\n}\n\n_s7(useCreatedCount, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useTps() {\n  _s8();\n\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined) throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\n\n_s8(useTps, \"um4YmFADYRtDWh7h95z2iPyy8yY=\");\n\nexport function useCreateTxRef() {\n  _s9();\n\n  const createTxRef = React.useContext(CreateTxContext);\n  if (createTxRef === undefined) throw new Error(`useCreateTxRef must be used within a TransactionsProvider`);\n  return createTxRef;\n}\n\n_s9(useCreateTxRef, \"Rf9hHOrtp3nEo8/2nyrvk4Uhlv8=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/index.tsx"],"names":["React","useThrottle","ConfirmedHelper","TpsProvider","TpsContext","CreateTxContext","CreateTxProvider","SelectedTxProvider","useConnection","COMMITMENT_PARAM","commitment","URLSearchParams","window","location","search","get","getCommitmentName","reducer","state","action","type","details","pendingTransaction","status","received","pending","trackingId","length","transaction","map","tx","signature","slot","receivedAt","target","targetSlot","landed","commitmentName","undefined","timing","sentAt","timeElapsed","timeout","clearInterval","retryId","ids","partition","partitionCount","activeIdPartition","id","Math","floor","has","clearTimeout","timeoutId","estimatedSlot","processed","forEach","foundRooted","find","root","StateContext","createContext","DispatchContext","TransactionsProvider","children","dispatch","useReducer","connection","stateRef","useRef","useEffect","current","rootSubscription","onRootChange","removeRootChangeListener","throttledState","setThrottledState","performance","now","parseFloat","toFixed","useDispatch","useContext","Error","useTransactions","useConfirmedCount","filter","useDroppedCount","useAvgConfirmationTime","confirmed","reduce","confTime","push","count","sum","time","useCreatedCount","useTps","tps","useCreateTxRef","createTxRef"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { useThrottle } from \"@react-hook/throttle\";\nimport { TransactionSignature, PublicKey } from \"@solana/web3.js\";\nimport { ConfirmedHelper } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { CreateTxContext, CreateTxProvider } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useConnection } from \"providers/rpc\";\n\nexport type ReceivedRecord = {\n  receivedAt: number;\n  slot: number;\n};\n\nexport type PendingTransaction = {\n  sentAt: number;\n  targetSlot: number;\n  retryId?: number;\n  timeoutId?: number;\n};\n\nexport type TransactionDetails = {\n  id: number;\n  feeAccount: PublicKey;\n  programAccount: PublicKey;\n  signature: TransactionSignature;\n};\n\ntype Timing = {\n  sentAt: number;\n  processed?: number;\n  confirmed?: number;\n};\n\ntype TimeoutState = {\n  status: \"timeout\";\n  details: TransactionDetails;\n};\n\ntype PendingState = {\n  status: \"pending\";\n  details: TransactionDetails;\n  received: Array<ReceivedRecord>;\n  pending: PendingTransaction;\n};\n\ntype SuccessState = {\n  status: \"success\";\n  details: TransactionDetails;\n  received: Array<ReceivedRecord>;\n  slot: {\n    target: number;\n    landed?: number;\n  };\n  timing: Timing;\n  pending?: PendingTransaction;\n};\n\nexport const COMMITMENT_PARAM = ((): TrackedCommitment => {\n  const commitment = new URLSearchParams(window.location.search).get(\n    \"commitment\"\n  );\n  switch (commitment) {\n    case \"recent\": {\n      return commitment;\n    }\n    default: {\n      return \"singleGossip\";\n    }\n  }\n})();\n\nexport const getCommitmentName = (\n  commitment: TrackedCommitment\n): CommitmentName => {\n  if (commitment === \"singleGossip\") {\n    return \"confirmed\";\n  } else {\n    return \"processed\";\n  }\n};\n\nexport type CommitmentName = \"processed\" | \"confirmed\";\n\nexport type TrackedCommitment = \"singleGossip\" | \"recent\";\n\nexport type TransactionStatus = \"success\" | \"timeout\" | \"pending\";\n\nexport type TransactionState = SuccessState | TimeoutState | PendingState;\n\ntype NewTransaction = {\n  type: \"new\";\n  trackingId: number;\n  details: TransactionDetails;\n  pendingTransaction: PendingTransaction;\n};\n\ntype UpdateIds = {\n  type: \"update\";\n  activeIdPartition: {\n    ids: Set<number>;\n    partition: number;\n    partitionCount: number;\n  };\n  commitment: TrackedCommitment;\n  receivedAt: number;\n  estimatedSlot: number;\n};\n\ntype TrackTransaction = {\n  type: \"track\";\n  commitmentName: CommitmentName;\n  trackingId: number;\n  slot: number;\n  receivedAt: number;\n};\n\ntype TimeoutTransaction = {\n  type: \"timeout\";\n  trackingId: number;\n};\n\ntype ResetState = {\n  type: \"reset\";\n};\n\ntype RecordRoot = {\n  type: \"root\";\n  root: number;\n};\n\ntype SignatureReceived = {\n  type: \"received\";\n  trackingId: number;\n  slot: number;\n  receivedAt: number;\n};\n\ntype Action =\n  | NewTransaction\n  | UpdateIds\n  | TimeoutTransaction\n  | ResetState\n  | RecordRoot\n  | TrackTransaction\n  | SignatureReceived;\n\ntype State = TransactionState[];\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"new\": {\n      const { details, pendingTransaction } = action;\n      return [\n        ...state,\n        {\n          details,\n          status: \"pending\",\n          received: [],\n          pending: pendingTransaction,\n        },\n      ];\n    }\n\n    case \"received\": {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const transaction = state[trackingId];\n      return state.map((tx) => {\n        if (tx.details.signature === transaction.details.signature) {\n          if (tx.status !== \"timeout\") {\n            return {\n              ...tx,\n              received: [\n                ...tx.received,\n                {\n                  slot: action.slot,\n                  receivedAt: action.receivedAt,\n                },\n              ],\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"track\": {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const transaction = state[trackingId];\n\n      return state.map((tx) => {\n        if (tx.details.signature === transaction.details.signature) {\n          if (tx.status === \"pending\") {\n            return {\n              status: \"success\",\n              details: tx.details,\n              received: tx.received,\n              slot: {\n                target: tx.pending.targetSlot,\n                landed:\n                  action.commitmentName === \"confirmed\"\n                    ? action.slot\n                    : undefined,\n              },\n              timing: {\n                sentAt: tx.pending.sentAt,\n                [action.commitmentName]: timeElapsed(\n                  tx.pending.sentAt,\n                  action.receivedAt\n                ),\n              },\n              pending: tx.pending,\n            };\n          } else if (tx.status === \"success\") {\n            return {\n              ...tx,\n              slot: {\n                ...tx.slot,\n                landed:\n                  action.commitmentName === \"confirmed\"\n                    ? action.slot\n                    : tx.slot.landed,\n              },\n              timing: {\n                ...tx.timing,\n                [action.commitmentName]: timeElapsed(\n                  tx.timing.sentAt,\n                  action.receivedAt\n                ),\n              },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"timeout\": {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const timeout = state[trackingId];\n      if (timeout.status !== \"pending\") return state;\n      clearInterval(timeout.pending.retryId);\n\n      return state.map((tx) => {\n        if (tx.details.signature === timeout.details.signature) {\n          return {\n            status: \"timeout\",\n            details: tx.details,\n          };\n        } else {\n          return tx;\n        }\n      });\n    }\n\n    case \"update\": {\n      const { ids, partition, partitionCount } = action.activeIdPartition;\n      return state.map((tx, trackingId) => {\n        if (trackingId % partitionCount !== partition) return tx;\n        const id = Math.floor(trackingId / partitionCount);\n        if (tx.status === \"pending\" && ids.has(id)) {\n          // Optimistically confirmed, no need to continue retry\n          if (action.commitment === \"singleGossip\") {\n            clearInterval(tx.pending.retryId);\n            clearTimeout(tx.pending.timeoutId);\n          }\n\n          const commitmentName = getCommitmentName(action.commitment);\n          return {\n            status: \"success\",\n            details: tx.details,\n            received: tx.received,\n            slot: {\n              target: tx.pending.targetSlot,\n              landed: action.estimatedSlot,\n            },\n            timing: {\n              sentAt: tx.pending.sentAt,\n              [commitmentName]: timeElapsed(\n                tx.pending.sentAt,\n                action.receivedAt\n              ),\n            },\n            pending: tx.pending,\n          };\n        } else if (tx.status === \"success\") {\n          if (ids.has(id)) {\n            const commitmentName = getCommitmentName(action.commitment);\n            // Already recorded conf time\n            if (tx.timing[commitmentName] !== undefined) {\n              return tx;\n            }\n\n            // Optimistically confirmed, no need to continue retry\n            if (tx.pending && action.commitment === \"singleGossip\") {\n              clearInterval(tx.pending.retryId);\n              clearTimeout(tx.pending.timeoutId);\n            }\n\n            return {\n              ...tx,\n              timing: {\n                ...tx.timing,\n                [commitmentName]: timeElapsed(\n                  tx.timing.sentAt,\n                  action.receivedAt\n                ),\n              },\n            };\n          } else if (\n            action.commitment === \"recent\" &&\n            tx.pending &&\n            !ids.has(id)\n          ) {\n            // Don't revert to pending state if we already received timing info for other commitments\n            if (tx.timing[\"confirmed\"] !== undefined) {\n              return {\n                ...tx,\n                timing: {\n                  ...tx.timing,\n                  processed: undefined,\n                },\n              };\n            }\n\n            // Revert to pending state because the previous notification likely came from a fork\n            return {\n              status: \"pending\",\n              details: tx.details,\n              received: tx.received,\n              pending: { ...tx.pending },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"reset\": {\n      state.forEach((tx) => {\n        if (tx.status === \"pending\") {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        } else if (tx.status === \"success\" && tx.pending) {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        }\n      });\n      return [];\n    }\n\n    case \"root\": {\n      const foundRooted = state.find((tx) => {\n        if (tx.status === \"success\" && tx.pending) {\n          return tx.slot.landed === action.root;\n        } else {\n          return false;\n        }\n      });\n\n      // Avoid re-allocating state map\n      if (!foundRooted) return state;\n\n      return state.map((tx) => {\n        if (tx.status === \"success\" && tx.pending) {\n          if (tx.slot.landed === action.root) {\n            clearInterval(tx.pending.retryId);\n            clearTimeout(tx.pending.timeoutId);\n            return {\n              ...tx,\n              pending: undefined,\n            };\n          }\n        }\n        return tx;\n      });\n    }\n  }\n}\n\nexport type Dispatch = (action: Action) => void;\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function TransactionsProvider({ children }: ProviderProps) {\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n  const stateRef = React.useRef(state);\n\n  React.useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n\n  React.useEffect(() => {\n    dispatch({\n      type: \"reset\",\n    });\n\n    if (connection === undefined) return;\n    const rootSubscription = connection.onRootChange((root) => {\n      dispatch({ type: \"root\", root });\n    });\n\n    return () => {\n      connection.removeRootChangeListener(rootSubscription);\n    };\n  }, [connection]);\n\n  const [throttledState, setThrottledState] = useThrottle(state, 10);\n  React.useEffect(() => {\n    setThrottledState(state);\n  }, [state, setThrottledState]);\n\n  return (\n    <StateContext.Provider value={throttledState}>\n      <DispatchContext.Provider value={dispatch}>\n        <SelectedTxProvider>\n          <CreateTxProvider>\n            <ConfirmedHelper>\n              <TpsProvider>{children}</TpsProvider>\n            </ConfirmedHelper>\n          </CreateTxProvider>\n        </SelectedTxProvider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nfunction timeElapsed(\n  sentAt: number,\n  receivedAt: number = performance.now()\n): number {\n  return parseFloat(((receivedAt - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\n\nexport function useTransactions() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useTransactions must be used within a TransactionsProvider`\n    );\n  }\n\n  return state;\n}\n\nexport function useConfirmedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useConfirmedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"success\").length;\n}\n\nexport function useDroppedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useDroppedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"timeout\").length;\n}\n\nexport function useAvgConfirmationTime() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useAvgConfirmationTime must be used within a TransactionsProvider`\n    );\n  }\n\n  const confirmed = state.reduce((confirmed: number[], tx) => {\n    if (tx.status === \"success\") {\n      const confTime = tx.timing[getCommitmentName(COMMITMENT_PARAM)];\n      if (confTime !== undefined) confirmed.push(confTime);\n    }\n    return confirmed;\n  }, []);\n\n  const count = confirmed.length;\n  if (count === 0) return 0;\n  const sum = confirmed.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\n\nexport function useCreatedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useCreatedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.length;\n}\n\nexport function useTps() {\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined)\n    throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\n\nexport function useCreateTxRef() {\n  const createTxRef = React.useContext(CreateTxContext);\n  if (createTxRef === undefined)\n    throw new Error(\n      `useCreateTxRef must be used within a TransactionsProvider`\n    );\n  return createTxRef;\n}\n"]},"metadata":{},"sourceType":"module"}