{"ast":null,"code":"import{Account,PublicKey,Connection}from\"@solana/web3.js\";function stringToCluster(str){switch(str){case\"devnet\":case\"testnet\":case\"mainnet-beta\":{return str;}default:return undefined;}}export function configFromInit(response){var cluster=stringToCluster(response.cluster);return{cluster:cluster,connection:new Connection(response.clusterUrl),programId:new PublicKey(response.programId),// Add 1 lamport because if the account is left with 0 lamports,\n// we won't get a notification for it\ngameCost:response.gameCost+1,paymentRequired:response.paymentRequired};}export function configFromAccounts(response){return{programAccounts:response.programAccounts.map(function(account){return new PublicKey(account);}),accountCapacity:response.accountCapacity,feeAccounts:response.feeAccounts.map(function(key){return new Account(Buffer.from(key,\"base64\"));})};}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/api/config.ts"],"names":["Account","PublicKey","Connection","stringToCluster","str","undefined","configFromInit","response","cluster","connection","clusterUrl","programId","gameCost","paymentRequired","configFromAccounts","programAccounts","map","account","accountCapacity","feeAccounts","key","Buffer","from"],"mappings":"AAAA,OAASA,OAAT,CAAkBC,SAAlB,CAAsCC,UAAtC,KAAwD,iBAAxD,CAgBA,QAASC,CAAAA,eAAT,CAAyBC,GAAzB,CAAuE,CACrE,OAAQA,GAAR,EACE,IAAK,QAAL,CACA,IAAK,SAAL,CACA,IAAK,cAAL,CAAqB,CACnB,MAAOA,CAAAA,GAAP,CACD,CACD,QACE,MAAOC,CAAAA,SAAP,CAPJ,CASD,CAED,MAAO,SAASC,CAAAA,cAAT,CAAwBC,QAAxB,CAA+C,CACpD,GAAMC,CAAAA,OAAO,CAAGL,eAAe,CAACI,QAAQ,CAACC,OAAV,CAA/B,CACA,MAAO,CACLA,OAAO,CAAPA,OADK,CAELC,UAAU,CAAE,GAAIP,CAAAA,UAAJ,CAAeK,QAAQ,CAACG,UAAxB,CAFP,CAGLC,SAAS,CAAE,GAAIV,CAAAA,SAAJ,CAAcM,QAAQ,CAACI,SAAvB,CAHN,CAIL;AACA;AACAC,QAAQ,CAAEL,QAAQ,CAACK,QAAT,CAAoB,CANzB,CAOLC,eAAe,CAAEN,QAAQ,CAACM,eAPrB,CAAP,CASD,CAED,MAAO,SAASC,CAAAA,kBAAT,CAA4BP,QAA5B,CAA2D,CAChE,MAAO,CACLQ,eAAe,CAAER,QAAQ,CAACQ,eAAT,CAAyBC,GAAzB,CACf,SAACC,OAAD,QAAqB,IAAIhB,CAAAA,SAAJ,CAAcgB,OAAd,CAArB,EADe,CADZ,CAILC,eAAe,CAAEX,QAAQ,CAACW,eAJrB,CAKLC,WAAW,CAAEZ,QAAQ,CAACY,WAAT,CAAqBH,GAArB,CACX,SAACI,GAAD,QAAiB,IAAIpB,CAAAA,OAAJ,CAAYqB,MAAM,CAACC,IAAP,CAAYF,GAAZ,CAAiB,QAAjB,CAAZ,CAAjB,EADW,CALR,CAAP,CASD","sourcesContent":["import { Account, PublicKey, Cluster, Connection } from \"@solana/web3.js\";\n\nexport interface Config {\n  cluster: Cluster | undefined;\n  connection: Connection;\n  programId: PublicKey;\n  gameCost: number;\n  paymentRequired: boolean;\n}\n\nexport interface AccountsConfig {\n  programAccounts: PublicKey[];\n  feeAccounts: Account[];\n  accountCapacity: number;\n}\n\nfunction stringToCluster(str: string | undefined): Cluster | undefined {\n  switch (str) {\n    case \"devnet\":\n    case \"testnet\":\n    case \"mainnet-beta\": {\n      return str;\n    }\n    default:\n      return undefined;\n  }\n}\n\nexport function configFromInit(response: any): Config {\n  const cluster = stringToCluster(response.cluster);\n  return {\n    cluster,\n    connection: new Connection(response.clusterUrl),\n    programId: new PublicKey(response.programId),\n    // Add 1 lamport because if the account is left with 0 lamports,\n    // we won't get a notification for it\n    gameCost: response.gameCost + 1,\n    paymentRequired: response.paymentRequired,\n  };\n}\n\nexport function configFromAccounts(response: any): AccountsConfig {\n  return {\n    programAccounts: response.programAccounts.map(\n      (account: string) => new PublicKey(account)\n    ),\n    accountCapacity: response.accountCapacity,\n    feeAccounts: response.feeAccounts.map(\n      (key: string) => new Account(Buffer.from(key, \"base64\"))\n    ),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}