{"ast":null,"code":"import _slicedToArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import{clusterApiUrl}from\"@solana/web3.js\";import{useLocation}from\"react-router-dom\";import{isLocalHost}from\"utils\";export var DEFAULT_SERVER=isLocalHost()?\"local\":\"mainnet-beta\";export var SERVERS=[\"mainnet-beta\",\"testnet\",\"devnet\"];if(isLocalHost()){SERVERS.push(\"local\");}export function serverName(server){switch(server){case\"mainnet-beta\":return\"Mainnet Beta\";case\"testnet\":return\"Testnet\";case\"devnet\":return\"Devnet\";case\"local\":return\"Local\";}}export function serverInfo(server){return server===\"local\"?\"Use local server\":clusterApiUrl(server);}function parseQuery(query){var clusterParam=query.get(\"cluster\");switch(clusterParam){case\"devnet\":return\"devnet\";case\"testnet\":return\"testnet\";case\"mainnet-beta\":return\"mainnet-beta\";default:return DEFAULT_SERVER;}}var ModalContext=React.createContext(undefined);var ServerContext=React.createContext(undefined);export function ServerProvider(_ref){var children=_ref.children;var query=new URLSearchParams(useLocation().search);var serverParam=parseQuery(query);var _React$useState=React.useState(serverParam),_React$useState2=_slicedToArray(_React$useState,2),server=_React$useState2[0],setServer=_React$useState2[1];var _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),showModal=_React$useState4[0],setShowModal=_React$useState4[1];// Update state when query params change\nReact.useEffect(function(){setServer(serverParam);},[serverParam]);return/*#__PURE__*/React.createElement(ServerContext.Provider,{value:[server,setServer]},/*#__PURE__*/React.createElement(ModalContext.Provider,{value:[showModal,setShowModal]},children));}function getServerUrl(server){switch(server){case\"local\":{var hostname=window.location.hostname;return\"http://\".concat(hostname,\":\").concat(process.env.PORT||8080);}default:{var useHttp=isLocalHost();var slug=server;if(server===\"mainnet-beta\"){slug=\"mainnet\";}return\"\".concat(useHttp?\"http\":\"https\",\"://break-solana-\").concat(slug,\".herokuapp.com\");}}}export function useServer(){var context=React.useContext(ServerContext);if(!context){throw new Error(\"useServer must be used within a ServerProvider\");}var _context=_slicedToArray(context,1),server=_context[0];var httpUrl=getServerUrl(server);var webSocketUrl=httpUrl.replace(\"http\",\"ws\");return{server:server,httpUrl:httpUrl,webSocketUrl:webSocketUrl,info:serverInfo(server),name:serverName(server)};}export function useClusterModal(){var context=React.useContext(ModalContext);if(!context){throw new Error(\"useClusterModal must be used within a ServerProvider\");}return context;}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/server.tsx"],"names":["React","clusterApiUrl","useLocation","isLocalHost","DEFAULT_SERVER","SERVERS","push","serverName","server","serverInfo","parseQuery","query","clusterParam","get","ModalContext","createContext","undefined","ServerContext","ServerProvider","children","URLSearchParams","search","serverParam","useState","setServer","showModal","setShowModal","useEffect","getServerUrl","hostname","window","location","process","env","PORT","useHttp","slug","useServer","context","useContext","Error","httpUrl","webSocketUrl","replace","info","name","useClusterModal"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { clusterApiUrl, Cluster } from \"@solana/web3.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { isLocalHost } from \"utils\";\n\ntype Server = Cluster | \"local\";\nexport const DEFAULT_SERVER = isLocalHost() ? \"local\" : \"mainnet-beta\";\nexport const SERVERS: Server[] = [\"mainnet-beta\", \"testnet\", \"devnet\"];\n\nif (isLocalHost()) {\n  SERVERS.push(\"local\");\n}\n\nexport function serverName(server: Server): string {\n  switch (server) {\n    case \"mainnet-beta\":\n      return \"Mainnet Beta\";\n    case \"testnet\":\n      return \"Testnet\";\n    case \"devnet\":\n      return \"Devnet\";\n    case \"local\":\n      return \"Local\";\n  }\n}\n\nexport function serverInfo(server: Server): string {\n  return server === \"local\" ? \"Use local server\" : clusterApiUrl(server);\n}\n\nfunction parseQuery(query: URLSearchParams): Server {\n  const clusterParam = query.get(\"cluster\");\n  switch (clusterParam) {\n    case \"devnet\":\n      return \"devnet\";\n    case \"testnet\":\n      return \"testnet\";\n    case \"mainnet-beta\":\n      return \"mainnet-beta\";\n    default:\n      return DEFAULT_SERVER;\n  }\n}\n\ntype SetShowModal = React.Dispatch<React.SetStateAction<boolean>>;\nconst ModalContext = React.createContext<[boolean, SetShowModal] | undefined>(\n  undefined\n);\ntype SetServer = React.Dispatch<React.SetStateAction<Server>>;\nconst ServerContext = React.createContext<[Server, SetServer] | undefined>(\n  undefined\n);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function ServerProvider({ children }: ProviderProps) {\n  const query = new URLSearchParams(useLocation().search);\n  const serverParam = parseQuery(query);\n  const [server, setServer] = React.useState<Server>(serverParam);\n  const [showModal, setShowModal] = React.useState(false);\n\n  // Update state when query params change\n  React.useEffect(() => {\n    setServer(serverParam);\n  }, [serverParam]);\n\n  return (\n    <ServerContext.Provider value={[server, setServer]}>\n      <ModalContext.Provider value={[showModal, setShowModal]}>\n        {children}\n      </ModalContext.Provider>\n    </ServerContext.Provider>\n  );\n}\n\nfunction getServerUrl(server: Server) {\n  switch (server) {\n    case \"local\": {\n      const hostname = window.location.hostname;\n      return `http://${hostname}:${process.env.PORT || 8080}`;\n    }\n    default: {\n      const useHttp = isLocalHost();\n      let slug: string = server;\n      if (server === \"mainnet-beta\") {\n        slug = \"mainnet\";\n      }\n      return `${\n        useHttp ? \"http\" : \"https\"\n      }://break-solana-${slug}.herokuapp.com`;\n    }\n  }\n}\n\nexport function useServer() {\n  const context = React.useContext(ServerContext);\n  if (!context) {\n    throw new Error(`useServer must be used within a ServerProvider`);\n  }\n  const [server] = context;\n  const httpUrl = getServerUrl(server);\n  const webSocketUrl = httpUrl.replace(\"http\", \"ws\");\n\n  return {\n    server,\n    httpUrl,\n    webSocketUrl,\n    info: serverInfo(server),\n    name: serverName(server),\n  };\n}\n\nexport function useClusterModal() {\n  const context = React.useContext(ModalContext);\n  if (!context) {\n    throw new Error(`useClusterModal must be used within a ServerProvider`);\n  }\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}