{"ast":null,"code":"import { Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport * as Bytes from \"utils/bytes\";\nconst self = globalThis;\nlet clusterUrl;\nlet programId;\nlet accountConfig;\nlet blockhash;\nlet socket = new WebSocket(\"wss://break-solana-testnet.herokuapp.com\");\n\nfunction createTransaction(message) {\n  console.log(\"CREATE\", message);\n  const {\n    trackingId\n  } = message;\n  console.log({\n    clusterUrl,\n    accountConfig,\n    programId\n  });\n  const {\n    feeAccounts,\n    programAccounts\n  } = accountConfig;\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n  const instruction = new TransactionInstruction({\n    keys: [{\n      pubkey: programDataAccount,\n      isWritable: true,\n      isSigner: false\n    }],\n    programId,\n    data: Buffer.from(Bytes.instructionDataFromId(bitId))\n  });\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.recentBlockhash = blockhash;\n  transaction.sign(feeAccount);\n  const signatureBuffer = transaction.signature;\n  const serializedTransaction = transaction.serialize();\n  socket.send(serializedTransaction);\n  self.postMessage({\n    trackingId: trackingId,\n    signature: signatureBuffer\n  });\n}\n\nself.onmessage = event => {\n  const message = event.data;\n\n  switch (message.type) {\n    case \"init\":\n      {\n        clusterUrl = message.clusterUrl;\n        programId = message.programId;\n        break;\n      }\n\n    case \"accounts\":\n      {\n        accountConfig = message.accountConfig;\n        console.log(\"account config\", accountConfig);\n        break;\n      }\n\n    case \"blockhash\":\n      {\n        blockhash = message.blockhash;\n        break;\n      }\n\n    case \"create\":\n      {\n        console.log(\"WORKER RECVD CREATE\");\n\n        try {\n          createTransaction(message);\n        } catch (error) {\n          self.postMessage({\n            trackingId: message.trackingId,\n            error: error\n          });\n        }\n\n        return;\n      }\n  }\n\n  if (clusterUrl && programId && accountConfig && blockhash) {\n    console.log(\"WORKER READY BITCH\");\n    self.postMessage(\"ready\");\n  }\n};\n\nexport default {};","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/workers/create-transaction-worker-script.ts"],"names":["Transaction","TransactionInstruction","Bytes","self","globalThis","clusterUrl","programId","accountConfig","blockhash","socket","WebSocket","createTransaction","message","console","log","trackingId","feeAccounts","programAccounts","bitId","Math","floor","length","accountIndex","programDataAccount","feeAccount","instruction","keys","pubkey","isWritable","isSigner","data","Buffer","from","instructionDataFromId","transaction","add","recentBlockhash","sign","signatureBuffer","signature","serializedTransaction","serialize","send","postMessage","onmessage","event","type","error"],"mappings":"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","sourcesContent":["import {\n  Transaction,\n  TransactionInstruction,\n  PublicKey,\n  Account,\n  Blockhash,\n} from \"@solana/web3.js\";\nimport * as Bytes from \"utils/bytes\";\nimport { CreateTransactionMessage, WorkerMessage } from \"./create-transaction-rpc\";\nimport { AccountsConfig } from \"providers/api/config\";\n\nconst self: any = globalThis;\n\nlet clusterUrl: string;\nlet programId: PublicKey;\nlet accountConfig: AccountsConfig;\nlet blockhash: Blockhash;\nlet socket = new WebSocket(\"wss://break-solana-testnet.herokuapp.com\");\n\nfunction createTransaction(message: CreateTransactionMessage) {\n  console.log(\"CREATE\", message);\n  const { trackingId } = message;\n  console.log({clusterUrl, accountConfig, programId});\n  const { feeAccounts, programAccounts } = accountConfig;\n\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n\n  const instruction = new TransactionInstruction({\n    keys: [\n      {\n        pubkey: programDataAccount,\n        isWritable: true,\n        isSigner: false,\n      },\n    ],\n    programId,\n    data: Buffer.from(Bytes.instructionDataFromId(bitId)),\n  });\n\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.recentBlockhash = blockhash;\n  transaction.sign(feeAccount);\n\n  const signatureBuffer = transaction.signature;\n  const serializedTransaction = transaction.serialize();\n  socket.send(serializedTransaction);\n\n  self.postMessage({\n    trackingId: trackingId,\n    signature: signatureBuffer,\n  });\n}\n\nself.onmessage = (event: any) => {\n  const message: WorkerMessage = event.data;\n  switch(message.type) {\n    case \"init\": {\n      clusterUrl = message.clusterUrl;\n      programId = message.programId;\n      break;\n    }\n\n    case \"accounts\": {\n      accountConfig = message.accountConfig;\n      console.log(\"account config\", accountConfig);\n      break;\n    }\n\n    case \"blockhash\": {\n      blockhash = message.blockhash;\n      break;\n    }\n\n    case \"create\": {\n      console.log(\"WORKER RECVD CREATE\");\n      try {\n        createTransaction(message);\n      } catch (error) {\n        self.postMessage({\n          trackingId: message.trackingId,\n          error: error,\n        });\n      }\n      return;\n    }\n  }\n\n  if (clusterUrl && programId && accountConfig && blockhash) {\n    console.log(\"WORKER READY BITCH\");\n    self.postMessage(\"ready\");\n  }\n\n};\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}