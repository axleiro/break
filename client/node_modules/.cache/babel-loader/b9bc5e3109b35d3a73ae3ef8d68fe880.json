{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/index.tsx\";\nimport * as React from \"react\";\nimport { useConfig, useAccounts, useConnection } from \"../api\";\nimport { useBlockhash } from \"../blockhash\";\nimport { ConfirmedHelper } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { createTransaction } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useSocket } from \"../socket\";\nimport { reportError } from \"utils\";\nexport const COMMITMENT_PARAM = (() => {\n  const commitment = new URLSearchParams(window.location.search).get(\"commitment\");\n\n  switch (commitment) {\n    case \"recent\":\n    case \"single\":\n      {\n        return commitment;\n      }\n\n    default:\n      {\n        return \"singleGossip\";\n      }\n  }\n})();\nexport let ActionType;\n\n(function (ActionType) {\n  ActionType[ActionType[\"NewTransaction\"] = 0] = \"NewTransaction\";\n  ActionType[ActionType[\"UpdateIds\"] = 1] = \"UpdateIds\";\n  ActionType[ActionType[\"TimeoutTransaction\"] = 2] = \"TimeoutTransaction\";\n  ActionType[ActionType[\"ResetState\"] = 3] = \"ResetState\";\n  ActionType[ActionType[\"RecordRoot\"] = 4] = \"RecordRoot\";\n  ActionType[ActionType[\"LandedTxs\"] = 5] = \"LandedTxs\";\n})(ActionType || (ActionType = {}));\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ActionType.NewTransaction:\n      {\n        const {\n          details,\n          pendingTransaction\n        } = action;\n        return [...state, {\n          details,\n          status: \"pending\",\n          pending: pendingTransaction\n        }];\n      }\n\n    case ActionType.TimeoutTransaction:\n      {\n        const trackingId = action.trackingId;\n        if (trackingId >= state.length) return state;\n        const timeout = state[trackingId];\n        if (timeout.status !== \"pending\") return state;\n        clearInterval(timeout.pending.retryId);\n        return state.map(tx => {\n          if (tx.details.signature === timeout.details.signature) {\n            return {\n              status: \"timeout\",\n              details: tx.details\n            };\n          } else {\n            return tx;\n          }\n        });\n      }\n\n    case ActionType.UpdateIds:\n      {\n        const {\n          ids,\n          partition,\n          partitionCount\n        } = action.activeIdPartition;\n        return state.map((tx, trackingId) => {\n          if (trackingId % partitionCount !== partition) return tx;\n          const id = Math.floor(trackingId / partitionCount);\n\n          if (tx.status === \"pending\" && ids.has(id)) {\n            // Optimistically confirmed, no need to continue retry\n            if (action.commitment === \"singleGossip\" || action.commitment === \"single\") {\n              clearInterval(tx.pending.retryId);\n              clearTimeout(tx.pending.timeoutId);\n            }\n\n            return {\n              status: \"success\",\n              details: tx.details,\n              slot: {\n                target: tx.pending.targetSlot,\n                estimated: action.estimatedSlot\n              },\n              timing: {\n                sentAt: tx.pending.sentAt,\n                [action.commitment]: timeElapsed(tx.pending.sentAt)\n              },\n              pending: tx.pending\n            };\n          } else if (tx.status === \"success\") {\n            if (ids.has(id)) {\n              // Already recorded conf time\n              if (tx.timing[action.commitment] !== undefined) {\n                return tx;\n              } // Optimistically confirmed, no need to continue retry\n\n\n              if (tx.pending && (action.commitment === \"singleGossip\" || action.commitment === \"single\")) {\n                clearInterval(tx.pending.retryId);\n                clearTimeout(tx.pending.timeoutId);\n              }\n\n              return { ...tx,\n                timing: { ...tx.timing,\n                  [action.commitment]: timeElapsed(tx.timing.sentAt)\n                }\n              };\n            } else if (tx.pending && !ids.has(id)) {\n              return {\n                status: \"pending\",\n                details: tx.details,\n                pending: { ...tx.pending\n                }\n              };\n            }\n          }\n\n          return tx;\n        });\n      }\n\n    case ActionType.ResetState:\n      {\n        state.forEach(tx => {\n          if (tx.status === \"pending\") {\n            clearTimeout(tx.pending.timeoutId);\n            clearInterval(tx.pending.retryId);\n          } else if (tx.status === \"success\" && tx.pending) {\n            clearTimeout(tx.pending.timeoutId);\n            clearInterval(tx.pending.retryId);\n          }\n        });\n        return [];\n      }\n\n    case ActionType.RecordRoot:\n      {\n        const foundRooted = state.find(tx => {\n          return tx.status === \"success\" && tx.pending && tx.slot.landed === action.root;\n        });\n        if (!foundRooted) return state;\n        return state.map(tx => {\n          if (tx.status === \"success\" && tx.pending && tx.slot.landed === action.root) {\n            clearInterval(tx.pending.retryId);\n            clearTimeout(tx.pending.timeoutId);\n            return { ...tx,\n              pending: undefined\n            };\n          } else {\n            return tx;\n          }\n        });\n      }\n\n    case ActionType.LandedTxs:\n      {\n        return state.map(tx => {\n          if (tx.status === \"success\") {\n            const index = action.signatures.findIndex(val => val === tx.details.signature);\n\n            if (index >= 0) {\n              return { ...tx,\n                slot: { ...tx.slot,\n                  landed: action.slots[index]\n                }\n              };\n            }\n          }\n\n          return tx;\n        });\n      }\n  }\n}\n\nconst SlotContext = React.createContext(undefined);\nconst StateContext = React.createContext(undefined);\nconst DispatchContext = React.createContext(undefined);\nexport function TransactionsProvider({\n  children\n}) {\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n  const targetSlot = React.useRef();\n  const stateRef = React.useRef(state);\n  React.useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n  React.useEffect(() => {\n    dispatch({\n      type: ActionType.ResetState\n    });\n    if (connection === undefined) return;\n    const slotSubscription = connection.onSlotChange(({\n      slot\n    }) => {\n      targetSlot.current = slot;\n    });\n    const rootSubscription = connection.onRootChange(root => {\n      dispatch({\n        type: ActionType.RecordRoot,\n        root\n      });\n    }); // Poll for signature statuses to determine which slot a tx landed in\n\n    const intervalId = setInterval(async () => {\n      const fetchStatuses = [];\n      stateRef.current.forEach(tx => {\n        if (tx.status === \"success\" && tx.slot.landed === undefined) {\n          fetchStatuses.push(tx.details.signature);\n        }\n      });\n      if (fetchStatuses.length === 0) return;\n      const slots = [];\n      const signatures = [];\n      const statuses = (await connection.getSignatureStatuses(fetchStatuses)).value;\n\n      for (var i = 0; i < statuses.length; i++) {\n        const status = statuses[i];\n\n        if (status !== null) {\n          slots.push(status.slot);\n          signatures.push(fetchStatuses[i]);\n        }\n      }\n\n      if (slots.length === 0) return;\n      dispatch({\n        type: ActionType.LandedTxs,\n        slots,\n        signatures\n      });\n    }, 2000);\n    return () => {\n      connection.removeSlotChangeListener(slotSubscription);\n      connection.removeRootChangeListener(rootSubscription);\n      clearInterval(intervalId);\n    };\n  }, [connection]);\n  return /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DispatchContext.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SlotContext.Provider, {\n    value: targetSlot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SelectedTxProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ConfirmedHelper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TpsProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 15\n    }\n  }, children))))));\n}\n\nfunction timeElapsed(sentAt) {\n  const now = performance.now();\n  return parseFloat(((now - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  const dispatch = React.useContext(DispatchContext);\n\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\nexport function useTargetSlotRef() {\n  const dispatch = React.useContext(SlotContext);\n\n  if (!dispatch) {\n    throw new Error(`useTargetSlotRef must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\nexport function useTransactions() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useTransactions must be used within a TransactionsProvider`);\n  }\n\n  return state;\n}\nexport function useConfirmedCount() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useConfirmedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.filter(({\n    status\n  }) => status === \"success\").length;\n}\nexport function useDroppedCount() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useDroppedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.filter(({\n    status\n  }) => status === \"timeout\").length;\n}\nexport function useAvgConfirmationTime() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useAvgConfirmationTime must be used within a TransactionsProvider`);\n  }\n\n  const confirmed = state.reduce((confirmed, tx) => {\n    if (tx.status === \"success\") {\n      const confTime = tx.timing[COMMITMENT_PARAM];\n      if (confTime !== undefined) confirmed.push(confTime);\n    }\n\n    return confirmed;\n  }, []);\n  const count = confirmed.length;\n  if (count === 0) return 0;\n  const sum = confirmed.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\nexport function useCreatedCount() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useCreatedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.length;\n}\nexport function useTps() {\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined) throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\nexport function useCreateTx() {\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts === null || accounts === void 0 ? void 0 : accounts.programAccounts[0].toBase58(); // Reset counter when program data accounts are refreshed\n\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n  const blockhash = useBlockhash();\n  const dispatch = useDispatch();\n  const socket = useSocket();\n  return React.useCallback(() => {\n    if (!blockhash || !socket || !config || !accounts || !targetSlotRef.current) return;\n    const id = idCounter.current;\n\n    if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n      idCounter.current++;\n      createTransaction(blockhash, targetSlotRef.current, config.programId, accounts, id, dispatch, socket);\n    } else {\n      reportError(new Error(\"Account capacity exceeded\"), \"failed to create transaction\");\n    }\n  }, [blockhash, socket, config, accounts, dispatch, targetSlotRef]);\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/index.tsx"],"names":["React","useConfig","useAccounts","useConnection","useBlockhash","ConfirmedHelper","TpsProvider","TpsContext","createTransaction","SelectedTxProvider","useSocket","reportError","COMMITMENT_PARAM","commitment","URLSearchParams","window","location","search","get","ActionType","reducer","state","action","type","NewTransaction","details","pendingTransaction","status","pending","TimeoutTransaction","trackingId","length","timeout","clearInterval","retryId","map","tx","signature","UpdateIds","ids","partition","partitionCount","activeIdPartition","id","Math","floor","has","clearTimeout","timeoutId","slot","target","targetSlot","estimated","estimatedSlot","timing","sentAt","timeElapsed","undefined","ResetState","forEach","RecordRoot","foundRooted","find","landed","root","LandedTxs","index","signatures","findIndex","val","slots","SlotContext","createContext","StateContext","DispatchContext","TransactionsProvider","children","dispatch","useReducer","connection","useRef","stateRef","useEffect","current","slotSubscription","onSlotChange","rootSubscription","onRootChange","intervalId","setInterval","fetchStatuses","push","statuses","getSignatureStatuses","value","i","removeSlotChangeListener","removeRootChangeListener","now","performance","parseFloat","toFixed","useDispatch","useContext","Error","useTargetSlotRef","useTransactions","useConfirmedCount","filter","useDroppedCount","useAvgConfirmationTime","confirmed","reduce","confTime","count","sum","time","useCreatedCount","useTps","tps","useCreateTx","config","accounts","idCounter","targetSlotRef","programDataAccount","programAccounts","toBase58","blockhash","socket","useCallback","accountCapacity","programId"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { TransactionSignature, PublicKey } from \"@solana/web3.js\";\nimport { useConfig, useAccounts, useConnection } from \"../api\";\nimport { useBlockhash } from \"../blockhash\";\nimport { ConfirmedHelper } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { createTransaction } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useSocket } from \"../socket\";\nimport { reportError } from \"utils\";\n\nexport type PendingTransaction = {\n  sentAt: number;\n  targetSlot: number;\n  retryId?: number;\n  timeoutId?: number;\n};\n\nexport type TransactionDetails = {\n  id: number;\n  feeAccount: PublicKey;\n  programAccount: PublicKey;\n  signature: TransactionSignature;\n};\n\ntype Timing = {\n  sentAt: number;\n  recent?: number;\n  single?: number;\n  singleGossip?: number;\n};\n\ntype SuccessState = {\n  status: \"success\";\n  details: TransactionDetails;\n  slot: {\n    target: number;\n    landed?: number;\n    estimated: number;\n  };\n  timing: Timing;\n  pending?: PendingTransaction;\n};\n\nexport const COMMITMENT_PARAM = ((): TrackedCommitment => {\n  const commitment = new URLSearchParams(window.location.search).get(\n    \"commitment\"\n  );\n  switch (commitment) {\n    case \"recent\":\n    case \"single\": {\n      return commitment;\n    }\n    default: {\n      return \"singleGossip\";\n    }\n  }\n})();\n\nexport type TrackedCommitment = \"single\" | \"singleGossip\" | \"recent\";\n\ntype TimeoutState = {\n  status: \"timeout\";\n  details: TransactionDetails;\n};\n\ntype PendingState = {\n  status: \"pending\";\n  pending: PendingTransaction;\n  details: TransactionDetails;\n};\n\nexport type TransactionStatus = \"success\" | \"timeout\" | \"pending\";\n\nexport type TransactionState = SuccessState | TimeoutState | PendingState;\n\nexport enum ActionType {\n  NewTransaction,\n  UpdateIds,\n  TimeoutTransaction,\n  ResetState,\n  RecordRoot,\n  LandedTxs,\n}\n\ntype UpdateIds = {\n  type: ActionType.UpdateIds;\n  activeIdPartition: {\n    ids: Set<number>;\n    partition: number;\n    partitionCount: number;\n  };\n  commitment: TrackedCommitment;\n  estimatedSlot: number;\n};\n\ntype LandedTxs = {\n  type: ActionType.LandedTxs;\n  signatures: TransactionSignature[];\n  slots: number[];\n};\n\ntype NewTransaction = {\n  type: ActionType.NewTransaction;\n  trackingId: number;\n  details: TransactionDetails;\n  pendingTransaction: PendingTransaction;\n};\n\ntype TimeoutTransaction = {\n  type: ActionType.TimeoutTransaction;\n  trackingId: number;\n};\n\ntype ResetState = {\n  type: ActionType.ResetState;\n};\n\ntype RecordRoot = {\n  type: ActionType.RecordRoot;\n  root: number;\n};\n\ntype Action =\n  | NewTransaction\n  | UpdateIds\n  | TimeoutTransaction\n  | ResetState\n  | RecordRoot\n  | LandedTxs;\n\ntype State = TransactionState[];\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case ActionType.NewTransaction: {\n      const { details, pendingTransaction } = action;\n      return [\n        ...state,\n        {\n          details,\n          status: \"pending\",\n          pending: pendingTransaction,\n        },\n      ];\n    }\n\n    case ActionType.TimeoutTransaction: {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const timeout = state[trackingId];\n      if (timeout.status !== \"pending\") return state;\n      clearInterval(timeout.pending.retryId);\n\n      return state.map((tx) => {\n        if (tx.details.signature === timeout.details.signature) {\n          return {\n            status: \"timeout\",\n            details: tx.details,\n          };\n        } else {\n          return tx;\n        }\n      });\n    }\n\n    case ActionType.UpdateIds: {\n      const { ids, partition, partitionCount } = action.activeIdPartition;\n      return state.map((tx, trackingId) => {\n        if (trackingId % partitionCount !== partition) return tx;\n        const id = Math.floor(trackingId / partitionCount);\n        if (tx.status === \"pending\" && ids.has(id)) {\n          // Optimistically confirmed, no need to continue retry\n          if (\n            action.commitment === \"singleGossip\" ||\n            action.commitment === \"single\"\n          ) {\n            clearInterval(tx.pending.retryId);\n            clearTimeout(tx.pending.timeoutId);\n          }\n\n          return {\n            status: \"success\",\n            details: tx.details,\n            slot: {\n              target: tx.pending.targetSlot,\n              estimated: action.estimatedSlot,\n            },\n            timing: {\n              sentAt: tx.pending.sentAt,\n              [action.commitment]: timeElapsed(tx.pending.sentAt),\n            },\n            pending: tx.pending,\n          };\n        } else if (tx.status === \"success\") {\n          if (ids.has(id)) {\n            // Already recorded conf time\n            if (tx.timing[action.commitment] !== undefined) {\n              return tx;\n            }\n\n            // Optimistically confirmed, no need to continue retry\n            if (\n              tx.pending &&\n              (action.commitment === \"singleGossip\" ||\n                action.commitment === \"single\")\n            ) {\n              clearInterval(tx.pending.retryId);\n              clearTimeout(tx.pending.timeoutId);\n            }\n\n            return {\n              ...tx,\n              timing: {\n                ...tx.timing,\n                [action.commitment]: timeElapsed(tx.timing.sentAt),\n              },\n            };\n          } else if (tx.pending && !ids.has(id)) {\n            return {\n              status: \"pending\",\n              details: tx.details,\n              pending: { ...tx.pending },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case ActionType.ResetState: {\n      state.forEach((tx) => {\n        if (tx.status === \"pending\") {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        } else if (tx.status === \"success\" && tx.pending) {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        }\n      });\n      return [];\n    }\n\n    case ActionType.RecordRoot: {\n      const foundRooted = state.find((tx) => {\n        return (\n          tx.status === \"success\" &&\n          tx.pending &&\n          tx.slot.landed === action.root\n        );\n      });\n      if (!foundRooted) return state;\n\n      return state.map((tx) => {\n        if (\n          tx.status === \"success\" &&\n          tx.pending &&\n          tx.slot.landed === action.root\n        ) {\n          clearInterval(tx.pending.retryId);\n          clearTimeout(tx.pending.timeoutId);\n          return {\n            ...tx,\n            pending: undefined,\n          };\n        } else {\n          return tx;\n        }\n      });\n    }\n\n    case ActionType.LandedTxs: {\n      return state.map((tx) => {\n        if (tx.status === \"success\") {\n          const index = action.signatures.findIndex(\n            (val) => val === tx.details.signature\n          );\n          if (index >= 0) {\n            return {\n              ...tx,\n              slot: {\n                ...tx.slot,\n                landed: action.slots[index],\n              },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n  }\n}\n\nexport type Dispatch = (action: Action) => void;\nconst SlotContext = React.createContext<\n  React.MutableRefObject<number | undefined> | undefined\n>(undefined);\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function TransactionsProvider({ children }: ProviderProps) {\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n  const targetSlot = React.useRef<number>();\n  const stateRef = React.useRef(state);\n\n  React.useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n\n  React.useEffect(() => {\n    dispatch({\n      type: ActionType.ResetState,\n    });\n\n    if (connection === undefined) return;\n    const slotSubscription = connection.onSlotChange(({ slot }) => {\n      targetSlot.current = slot;\n    });\n    const rootSubscription = connection.onRootChange((root) => {\n      dispatch({ type: ActionType.RecordRoot, root });\n    });\n\n    // Poll for signature statuses to determine which slot a tx landed in\n    const intervalId = setInterval(async () => {\n      const fetchStatuses: string[] = [];\n      stateRef.current.forEach((tx) => {\n        if (tx.status === \"success\" && tx.slot.landed === undefined) {\n          fetchStatuses.push(tx.details.signature);\n        }\n      });\n\n      if (fetchStatuses.length === 0) return;\n\n      const slots: number[] = [];\n      const signatures: TransactionSignature[] = [];\n      const statuses = (await connection.getSignatureStatuses(fetchStatuses))\n        .value;\n      for (var i = 0; i < statuses.length; i++) {\n        const status = statuses[i];\n        if (status !== null) {\n          slots.push(status.slot);\n          signatures.push(fetchStatuses[i]);\n        }\n      }\n      if (slots.length === 0) return;\n      dispatch({ type: ActionType.LandedTxs, slots, signatures });\n    }, 2000);\n\n    return () => {\n      connection.removeSlotChangeListener(slotSubscription);\n      connection.removeRootChangeListener(rootSubscription);\n      clearInterval(intervalId);\n    };\n  }, [connection]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <SlotContext.Provider value={targetSlot}>\n          <SelectedTxProvider>\n            <ConfirmedHelper>\n              <TpsProvider>{children}</TpsProvider>\n            </ConfirmedHelper>\n          </SelectedTxProvider>\n        </SlotContext.Provider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nfunction timeElapsed(sentAt: number): number {\n  const now = performance.now();\n  return parseFloat(((now - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\n\nexport function useTargetSlotRef() {\n  const dispatch = React.useContext(SlotContext);\n  if (!dispatch) {\n    throw new Error(\n      `useTargetSlotRef must be used within a TransactionsProvider`\n    );\n  }\n\n  return dispatch;\n}\n\nexport function useTransactions() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useTransactions must be used within a TransactionsProvider`\n    );\n  }\n\n  return state;\n}\n\nexport function useConfirmedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useConfirmedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"success\").length;\n}\n\nexport function useDroppedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useDroppedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"timeout\").length;\n}\n\nexport function useAvgConfirmationTime() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useAvgConfirmationTime must be used within a TransactionsProvider`\n    );\n  }\n\n  const confirmed = state.reduce((confirmed: number[], tx) => {\n    if (tx.status === \"success\") {\n      const confTime = tx.timing[COMMITMENT_PARAM];\n      if (confTime !== undefined) confirmed.push(confTime);\n    }\n    return confirmed;\n  }, []);\n\n  const count = confirmed.length;\n  if (count === 0) return 0;\n  const sum = confirmed.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\n\nexport function useCreatedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useCreatedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.length;\n}\n\nexport function useTps() {\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined)\n    throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\n\nexport function useCreateTx() {\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef<number>(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts?.programAccounts[0].toBase58();\n\n  // Reset counter when program data accounts are refreshed\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n\n  const blockhash = useBlockhash();\n  const dispatch = useDispatch();\n  const socket = useSocket();\n  return React.useCallback(() => {\n    if (!blockhash || !socket || !config || !accounts || !targetSlotRef.current)\n      return;\n    const id = idCounter.current;\n    if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n      idCounter.current++;\n      createTransaction(\n        blockhash,\n        targetSlotRef.current,\n        config.programId,\n        accounts,\n        id,\n        dispatch,\n        socket\n      );\n    } else {\n      reportError(\n        new Error(\"Account capacity exceeded\"),\n        \"failed to create transaction\"\n      );\n    }\n  }, [blockhash, socket, config, accounts, dispatch, targetSlotRef]);\n}\n"]},"metadata":{},"sourceType":"module"}