{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/slot.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useConnection } from \"./rpc\";\nconst SlotContext = /*#__PURE__*/React.createContext(undefined);\nconst SlotMetricsContext = /*#__PURE__*/React.createContext(undefined);\nexport function useTargetSlotRef() {\n  _s();\n\n  const slotRef = React.useContext(SlotContext);\n\n  if (!slotRef) {\n    throw new Error(`useTargetSlotRef must be used within a SlotProvider`);\n  }\n\n  return slotRef;\n}\n\n_s(useTargetSlotRef, \"PN7Vj/hJqELMIz6F8CkyosKs+t8=\");\n\nexport function SlotProvider({\n  children\n}) {\n  _s2();\n\n  const connection = useConnection();\n  const targetSlot = React.useRef();\n  const slotMetrics = React.useRef(new Map());\n  React.useEffect(() => {\n    if (connection === undefined) return;\n    let disabledSlotSubscription = false;\n    const slotSubscription = connection.onSlotChange(({\n      slot\n    }) => {\n      targetSlot.current = slot;\n    });\n    const slotUpdateSubscription = connection.onSlotUpdate(({\n      type,\n      slot,\n      timestamp\n    }) => {\n      // Remove if slot update api is active\n      if (!disabledSlotSubscription) {\n        connection.removeSlotChangeListener(slotSubscription);\n        disabledSlotSubscription = true;\n      }\n\n      if (type === \"firstShredReceived\") {\n        slotMetrics.current.set(slot, {\n          firstShred: timestamp\n        });\n        return;\n      }\n\n      const slotTiming = slotMetrics.current.get(slot);\n      if (!slotTiming) return;\n\n      if (type === \"optimisticConfirmation\") {\n        slotTiming.confirmed = timestamp;\n      } else if (type === \"frozen\") {\n        slotTiming.frozen = timestamp;\n      }\n    });\n    return () => {\n      if (!disabledSlotSubscription) {\n        connection.removeSlotChangeListener(slotSubscription);\n      }\n\n      connection.removeSlotUpdateListener(slotUpdateSubscription);\n    };\n  }, [connection]);\n  return /*#__PURE__*/_jsxDEV(SlotContext.Provider, {\n    value: targetSlot,\n    children: /*#__PURE__*/_jsxDEV(SlotMetricsContext.Provider, {\n      value: slotMetrics,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(SlotProvider, \"vUL+Zj3BC756+0/D19auJ277CjU=\", false, function () {\n  return [useConnection];\n});\n\n_c = SlotProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SlotProvider\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/slot.tsx"],"names":["React","useConnection","SlotContext","createContext","undefined","SlotMetricsContext","useTargetSlotRef","slotRef","useContext","Error","SlotProvider","children","connection","targetSlot","useRef","slotMetrics","Map","useEffect","disabledSlotSubscription","slotSubscription","onSlotChange","slot","current","slotUpdateSubscription","onSlotUpdate","type","timestamp","removeSlotChangeListener","set","firstShred","slotTiming","get","confirmed","frozen","removeSlotUpdateListener"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,OAA9B;AAEA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAElBC,SAFkB,CAApB;AAIA,MAAMC,kBAAkB,gBAAGL,KAAK,CAACG,aAAN,CAEzBC,SAFyB,CAA3B;AAUA,OAAO,SAASE,gBAAT,GAA4B;AAAA;;AACjC,QAAMC,OAAO,GAAGP,KAAK,CAACQ,UAAN,CAAiBN,WAAjB,CAAhB;;AACA,MAAI,CAACK,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,CACH,qDADG,CAAN;AAGD;;AAED,SAAOF,OAAP;AACD;;GATeD,gB;;AAYhB,OAAO,SAASI,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmD;AAAA;;AACxD,QAAMC,UAAU,GAAGX,aAAa,EAAhC;AACA,QAAMY,UAAU,GAAGb,KAAK,CAACc,MAAN,EAAnB;AACA,QAAMC,WAAW,GAAGf,KAAK,CAACc,MAAN,CAAa,IAAIE,GAAJ,EAAb,CAApB;AAEAhB,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACpB,QAAIL,UAAU,KAAKR,SAAnB,EAA8B;AAE9B,QAAIc,wBAAwB,GAAG,KAA/B;AACA,UAAMC,gBAAgB,GAAGP,UAAU,CAACQ,YAAX,CAAwB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAC7DR,MAAAA,UAAU,CAACS,OAAX,GAAqBD,IAArB;AACD,KAFwB,CAAzB;AAIA,UAAME,sBAAsB,GAAGX,UAAU,CAACY,YAAX,CAAwB,CAAC;AAAEC,MAAAA,IAAF;AAAQJ,MAAAA,IAAR;AAAcK,MAAAA;AAAd,KAAD,KAA+B;AACpF;AACA,UAAI,CAACR,wBAAL,EAA+B;AAC7BN,QAAAA,UAAU,CAACe,wBAAX,CAAoCR,gBAApC;AACAD,QAAAA,wBAAwB,GAAG,IAA3B;AACD;;AAED,UAAIO,IAAI,KAAK,oBAAb,EAAmC;AACjCV,QAAAA,WAAW,CAACO,OAAZ,CAAoBM,GAApB,CAAwBP,IAAxB,EAA8B;AAC5BQ,UAAAA,UAAU,EAAEH;AADgB,SAA9B;AAGA;AACD;;AAED,YAAMI,UAAU,GAAGf,WAAW,CAACO,OAAZ,CAAoBS,GAApB,CAAwBV,IAAxB,CAAnB;AACA,UAAI,CAACS,UAAL,EAAiB;;AAEjB,UAAIL,IAAI,KAAK,wBAAb,EAAuC;AACrCK,QAAAA,UAAU,CAACE,SAAX,GAAuBN,SAAvB;AACD,OAFD,MAEO,IAAID,IAAI,KAAK,QAAb,EAAuB;AAC5BK,QAAAA,UAAU,CAACG,MAAX,GAAoBP,SAApB;AACD;AACF,KAtB8B,CAA/B;AAwBA,WAAO,MAAM;AACX,UAAI,CAACR,wBAAL,EAA+B;AAC7BN,QAAAA,UAAU,CAACe,wBAAX,CAAoCR,gBAApC;AACD;;AACDP,MAAAA,UAAU,CAACsB,wBAAX,CAAoCX,sBAApC;AACD,KALD;AAMD,GAtCD,EAsCG,CAACX,UAAD,CAtCH;AAwCA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,UAA7B;AAAA,2BACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,MAAA,KAAK,EAAEE,WAApC;AAAA,gBACGJ;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;IApDeD,Y;UACKT,a;;;KADLS,Y","sourcesContent":["import React from \"react\";\nimport { useConnection } from \"./rpc\";\n\nconst SlotContext = React.createContext<\n  React.MutableRefObject<number | undefined> | undefined\n>(undefined);\n\nconst SlotMetricsContext = React.createContext<\n  React.MutableRefObject<Map<number, SlotTiming>> | undefined\n>(undefined);\n\ntype SlotTiming = {\n    firstShred: number;\n    frozen?: number;\n    confirmed?: number;\n};\n\nexport function useTargetSlotRef() {\n  const slotRef = React.useContext(SlotContext);\n  if (!slotRef) {\n    throw new Error(\n      `useTargetSlotRef must be used within a SlotProvider`\n    );\n  }\n\n  return slotRef;\n}\n\ntype ProviderProps = { children: React.ReactNode };\nexport function SlotProvider({ children }: ProviderProps) {\n  const connection = useConnection();\n  const targetSlot = React.useRef<number>();\n  const slotMetrics = React.useRef(new Map<number, SlotTiming>());\n\n  React.useEffect(() => {\n    if (connection === undefined) return;\n\n    let disabledSlotSubscription = false;\n    const slotSubscription = connection.onSlotChange(({ slot }) => {\n      targetSlot.current = slot;\n    });\n    \n    const slotUpdateSubscription = connection.onSlotUpdate(({ type, slot, timestamp }) => {\n      // Remove if slot update api is active\n      if (!disabledSlotSubscription) {\n        connection.removeSlotChangeListener(slotSubscription);\n        disabledSlotSubscription = true;\n      }\n\n      if (type === \"firstShredReceived\") {\n        slotMetrics.current.set(slot, {\n          firstShred: timestamp,\n        });\n        return;\n      }\n    \n      const slotTiming = slotMetrics.current.get(slot);\n      if (!slotTiming) return;\n\n      if (type === \"optimisticConfirmation\") {\n        slotTiming.confirmed = timestamp;\n      } else if (type === \"frozen\") {\n        slotTiming.frozen = timestamp;\n      }\n    });\n\n    return () => {\n      if (!disabledSlotSubscription) {\n        connection.removeSlotChangeListener(slotSubscription);\n      }\n      connection.removeSlotUpdateListener(slotUpdateSubscription);\n    };\n  }, [connection]);\n\n  return (\n    <SlotContext.Provider value={targetSlot}>\n      <SlotMetricsContext.Provider value={slotMetrics}>\n        {children}\n      </SlotMetricsContext.Provider>\n    </SlotContext.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}