{"ast":null,"code":"import*as React from\"react\";import{Transaction,TransactionInstruction}from\"@solana/web3.js\";import bs58 from\"bs58\";import*as Bytes from\"utils/bytes\";import{useTargetSlotRef,useDispatch}from\"./index\";import{useConfig,useAccounts,useConnection}from\"providers/api\";import{useBlockhash}from\"providers/blockhash\";import{useSocket}from\"providers/socket\";import{reportError}from\"utils\";var SEND_TIMEOUT_MS=45000;var RETRY_INTERVAL_MS=500;export var CreateTxContext=React.createContext(undefined);export function CreateTxProvider(_ref){var children=_ref.children;var createTx=React.useRef(function(){});var config=useConfig();var accounts=useAccounts();var idCounter=React.useRef(0);var targetSlotRef=useTargetSlotRef();var programDataAccount=accounts===null||accounts===void 0?void 0:accounts.programAccounts[0].toBase58();// Reset counter when program data accounts are refreshed\nReact.useEffect(function(){idCounter.current=0;},[programDataAccount]);var connection=useConnection();var blockhash=useBlockhash();var dispatch=useDispatch();var socket=useSocket();React.useEffect(function(){createTx.current=function(){if(!connection||!blockhash||!socket||!config||!accounts||!targetSlotRef.current)return;var id=idCounter.current;if(id<accounts.accountCapacity*accounts.programAccounts.length){idCounter.current++;createTransaction(connection,blockhash,targetSlotRef.current,config.programId,accounts,id,dispatch,socket);}else{reportError(new Error(\"Account capacity exceeded\"),\"failed to create transaction\");}};},[blockhash,connection,socket,config,accounts,dispatch,targetSlotRef]);return/*#__PURE__*/React.createElement(CreateTxContext.Provider,{value:createTx},children);}export function createTransaction(connection,blockhash,targetSlot,programId,accounts,trackingId,dispatch,socket){var feeAccounts=accounts.feeAccounts,programAccounts=accounts.programAccounts;var bitId=Math.floor(trackingId/feeAccounts.length);var accountIndex=trackingId%feeAccounts.length;var programDataAccount=programAccounts[accountIndex];var feeAccount=feeAccounts[accountIndex];var instruction=new TransactionInstruction({keys:[{pubkey:programDataAccount,isWritable:true,isSigner:false}],programId:programId,data:Buffer.from(Bytes.instructionDataFromId(bitId))});var transaction=new Transaction();transaction.add(instruction);transaction.recentBlockhash=blockhash;transaction.sign(feeAccount);var serializedTx=transaction.serialize();socket.send(serializedTx);var sentAt=performance.now();var pendingTransaction={sentAt:sentAt,targetSlot:targetSlot};pendingTransaction.timeoutId=window.setTimeout(function(){dispatch({type:\"timeout\",trackingId:trackingId});},SEND_TIMEOUT_MS);var signatureBuffer=transaction.signature;if(!signatureBuffer)throw new Error(\"Failed to sign transaction\");var signature=bs58.encode(signatureBuffer);var details={id:bitId,feeAccount:feeAccount.publicKey,programAccount:programDataAccount,signature:signature};var retryUntil=new URLSearchParams(window.location.search).get(\"retry_until\");if(retryUntil===null||retryUntil!==\"disabled\"){pendingTransaction.retryId=window.setInterval(function(){if(socket.readyState===WebSocket.OPEN){socket.send(serializedTx);}},RETRY_INTERVAL_MS);}connection.onSignature(signature,function(result,context){dispatch({type:\"signature\",trackingId:trackingId,estimatedSlot:context.slot,receivedAt:performance.now()});},\"singleGossip\");dispatch({type:\"new\",details:details,trackingId:trackingId,pendingTransaction:pendingTransaction});}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/create.tsx"],"names":["React","Transaction","TransactionInstruction","bs58","Bytes","useTargetSlotRef","useDispatch","useConfig","useAccounts","useConnection","useBlockhash","useSocket","reportError","SEND_TIMEOUT_MS","RETRY_INTERVAL_MS","CreateTxContext","createContext","undefined","CreateTxProvider","children","createTx","useRef","config","accounts","idCounter","targetSlotRef","programDataAccount","programAccounts","toBase58","useEffect","current","connection","blockhash","dispatch","socket","id","accountCapacity","length","createTransaction","programId","Error","targetSlot","trackingId","feeAccounts","bitId","Math","floor","accountIndex","feeAccount","instruction","keys","pubkey","isWritable","isSigner","data","Buffer","from","instructionDataFromId","transaction","add","recentBlockhash","sign","serializedTx","serialize","send","sentAt","performance","now","pendingTransaction","timeoutId","window","setTimeout","type","signatureBuffer","signature","encode","details","publicKey","programAccount","retryUntil","URLSearchParams","location","search","get","retryId","setInterval","readyState","WebSocket","OPEN","onSignature","result","context","estimatedSlot","slot","receivedAt"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAEEC,WAFF,CAGEC,sBAHF,KAMO,iBANP,CAOA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CACA,MAAO,GAAKC,CAAAA,KAAZ,KAAuB,aAAvB,CACA,OAIEC,gBAJF,CAKEC,WALF,KAMO,SANP,CAQA,OAASC,SAAT,CAAoBC,WAApB,CAAiCC,aAAjC,KAAsD,eAAtD,CACA,OAASC,YAAT,KAA6B,qBAA7B,CACA,OAASC,SAAT,KAA0B,kBAA1B,CACA,OAASC,WAAT,KAA4B,OAA5B,CAEA,GAAMC,CAAAA,eAAe,CAAG,KAAxB,CACA,GAAMC,CAAAA,iBAAiB,CAAG,GAA1B,CAEA,MAAO,IAAMC,CAAAA,eAAe,CAAGf,KAAK,CAACgB,aAAN,CAE7BC,SAF6B,CAAxB,CAKP,MAAO,SAASC,CAAAA,gBAAT,MAAuD,IAA3BC,CAAAA,QAA2B,MAA3BA,QAA2B,CAC5D,GAAMC,CAAAA,QAAQ,CAAGpB,KAAK,CAACqB,MAAN,CAAa,UAAM,CAAE,CAArB,CAAjB,CACA,GAAMC,CAAAA,MAAM,CAAGf,SAAS,EAAxB,CACA,GAAMgB,CAAAA,QAAQ,CAAGf,WAAW,EAA5B,CACA,GAAMgB,CAAAA,SAAS,CAAGxB,KAAK,CAACqB,MAAN,CAAqB,CAArB,CAAlB,CACA,GAAMI,CAAAA,aAAa,CAAGpB,gBAAgB,EAAtC,CACA,GAAMqB,CAAAA,kBAAkB,CAAGH,QAAH,SAAGA,QAAH,iBAAGA,QAAQ,CAAEI,eAAV,CAA0B,CAA1B,EAA6BC,QAA7B,EAA3B,CAEA;AACA5B,KAAK,CAAC6B,SAAN,CAAgB,UAAM,CACpBL,SAAS,CAACM,OAAV,CAAoB,CAApB,CACD,CAFD,CAEG,CAACJ,kBAAD,CAFH,EAIA,GAAMK,CAAAA,UAAU,CAAGtB,aAAa,EAAhC,CACA,GAAMuB,CAAAA,SAAS,CAAGtB,YAAY,EAA9B,CACA,GAAMuB,CAAAA,QAAQ,CAAG3B,WAAW,EAA5B,CACA,GAAM4B,CAAAA,MAAM,CAAGvB,SAAS,EAAxB,CACAX,KAAK,CAAC6B,SAAN,CAAgB,UAAM,CACpBT,QAAQ,CAACU,OAAT,CAAmB,UAAM,CACvB,GACE,CAACC,UAAD,EACA,CAACC,SADD,EAEA,CAACE,MAFD,EAGA,CAACZ,MAHD,EAIA,CAACC,QAJD,EAKA,CAACE,aAAa,CAACK,OANjB,CAQE,OACF,GAAMK,CAAAA,EAAE,CAAGX,SAAS,CAACM,OAArB,CACA,GAAIK,EAAE,CAAGZ,QAAQ,CAACa,eAAT,CAA2Bb,QAAQ,CAACI,eAAT,CAAyBU,MAA7D,CAAqE,CACnEb,SAAS,CAACM,OAAV,GACAQ,iBAAiB,CACfP,UADe,CAEfC,SAFe,CAGfP,aAAa,CAACK,OAHC,CAIfR,MAAM,CAACiB,SAJQ,CAKfhB,QALe,CAMfY,EANe,CAOfF,QAPe,CAQfC,MARe,CAAjB,CAUD,CAZD,IAYO,CACLtB,WAAW,CACT,GAAI4B,CAAAA,KAAJ,CAAU,2BAAV,CADS,CAET,8BAFS,CAAX,CAID,CACF,CA7BD,CA8BD,CA/BD,CA+BG,CACDR,SADC,CAEDD,UAFC,CAGDG,MAHC,CAIDZ,MAJC,CAKDC,QALC,CAMDU,QANC,CAODR,aAPC,CA/BH,EAyCA,mBACE,oBAAC,eAAD,CAAiB,QAAjB,EAA0B,KAAK,CAAEL,QAAjC,EACGD,QADH,CADF,CAKD,CAED,MAAO,SAASmB,CAAAA,iBAAT,CACLP,UADK,CAELC,SAFK,CAGLS,UAHK,CAILF,SAJK,CAKLhB,QALK,CAMLmB,UANK,CAOLT,QAPK,CAQLC,MARK,CASL,IACQS,CAAAA,WADR,CACyCpB,QADzC,CACQoB,WADR,CACqBhB,eADrB,CACyCJ,QADzC,CACqBI,eADrB,CAGA,GAAMiB,CAAAA,KAAK,CAAGC,IAAI,CAACC,KAAL,CAAWJ,UAAU,CAAGC,WAAW,CAACN,MAApC,CAAd,CACA,GAAMU,CAAAA,YAAY,CAAGL,UAAU,CAAGC,WAAW,CAACN,MAA9C,CACA,GAAMX,CAAAA,kBAAkB,CAAGC,eAAe,CAACoB,YAAD,CAA1C,CACA,GAAMC,CAAAA,UAAU,CAAGL,WAAW,CAACI,YAAD,CAA9B,CACA,GAAME,CAAAA,WAAW,CAAG,GAAI/C,CAAAA,sBAAJ,CAA2B,CAC7CgD,IAAI,CAAE,CAAC,CAAEC,MAAM,CAAEzB,kBAAV,CAA8B0B,UAAU,CAAE,IAA1C,CAAgDC,QAAQ,CAAE,KAA1D,CAAD,CADuC,CAE7Cd,SAAS,CAATA,SAF6C,CAG7Ce,IAAI,CAAEC,MAAM,CAACC,IAAP,CAAYpD,KAAK,CAACqD,qBAAN,CAA4Bb,KAA5B,CAAZ,CAHuC,CAA3B,CAApB,CAMA,GAAMc,CAAAA,WAAW,CAAG,GAAIzD,CAAAA,WAAJ,EAApB,CACAyD,WAAW,CAACC,GAAZ,CAAgBV,WAAhB,EACAS,WAAW,CAACE,eAAZ,CAA8B5B,SAA9B,CACA0B,WAAW,CAACG,IAAZ,CAAiBb,UAAjB,EACA,GAAMc,CAAAA,YAAY,CAAGJ,WAAW,CAACK,SAAZ,EAArB,CACA7B,MAAM,CAAC8B,IAAP,CAAYF,YAAZ,EACA,GAAMG,CAAAA,MAAM,CAAGC,WAAW,CAACC,GAAZ,EAAf,CAEA,GAAMC,CAAAA,kBAAsC,CAAG,CAAEH,MAAM,CAANA,MAAF,CAAUxB,UAAU,CAAVA,UAAV,CAA/C,CACA2B,kBAAkB,CAACC,SAAnB,CAA+BC,MAAM,CAACC,UAAP,CAAkB,UAAM,CACrDtC,QAAQ,CAAC,CAAEuC,IAAI,CAAE,SAAR,CAAmB9B,UAAU,CAAVA,UAAnB,CAAD,CAAR,CACD,CAF8B,CAE5B7B,eAF4B,CAA/B,CAIA,GAAM4D,CAAAA,eAAe,CAAGf,WAAW,CAACgB,SAApC,CACA,GAAI,CAACD,eAAL,CAAsB,KAAM,IAAIjC,CAAAA,KAAJ,CAAU,4BAAV,CAAN,CACtB,GAAMkC,CAAAA,SAAS,CAAGvE,IAAI,CAACwE,MAAL,CAAYF,eAAZ,CAAlB,CACA,GAAMG,CAAAA,OAA2B,CAAG,CAClCzC,EAAE,CAAES,KAD8B,CAElCI,UAAU,CAAEA,UAAU,CAAC6B,SAFW,CAGlCC,cAAc,CAAEpD,kBAHkB,CAIlCgD,SAAS,CAATA,SAJkC,CAApC,CAOA,GAAMK,CAAAA,UAAU,CAAG,GAAIC,CAAAA,eAAJ,CAAoBV,MAAM,CAACW,QAAP,CAAgBC,MAApC,EAA4CC,GAA5C,CACjB,aADiB,CAAnB,CAGA,GAAIJ,UAAU,GAAK,IAAf,EAAuBA,UAAU,GAAK,UAA1C,CAAsD,CACpDX,kBAAkB,CAACgB,OAAnB,CAA6Bd,MAAM,CAACe,WAAP,CAAmB,UAAM,CACpD,GAAInD,MAAM,CAACoD,UAAP,GAAsBC,SAAS,CAACC,IAApC,CAA0C,CACxCtD,MAAM,CAAC8B,IAAP,CAAYF,YAAZ,EACD,CACF,CAJ4B,CAI1BhD,iBAJ0B,CAA7B,CAKD,CAEDiB,UAAU,CAAC0D,WAAX,CACEf,SADF,CAEE,SAACgB,MAAD,CAASC,OAAT,CAAqB,CACnB1D,QAAQ,CAAC,CACPuC,IAAI,CAAE,WADC,CAEP9B,UAAU,CAAVA,UAFO,CAGPkD,aAAa,CAAED,OAAO,CAACE,IAHhB,CAIPC,UAAU,CAAE5B,WAAW,CAACC,GAAZ,EAJL,CAAD,CAAR,CAMD,CATH,CAUE,cAVF,EAaAlC,QAAQ,CAAC,CACPuC,IAAI,CAAE,KADC,CAEPI,OAAO,CAAPA,OAFO,CAGPlC,UAAU,CAAVA,UAHO,CAIP0B,kBAAkB,CAAlBA,kBAJO,CAAD,CAAR,CAMD","sourcesContent":["import * as React from \"react\";\nimport {\n  Blockhash,\n  Transaction,\n  TransactionInstruction,\n  PublicKey,\n  Connection,\n} from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport * as Bytes from \"utils/bytes\";\nimport {\n  Dispatch,\n  PendingTransaction,\n  TransactionDetails,\n  useTargetSlotRef,\n  useDispatch,\n} from \"./index\";\nimport { AccountsConfig } from \"../api/config\";\nimport { useConfig, useAccounts, useConnection } from \"providers/api\";\nimport { useBlockhash } from \"providers/blockhash\";\nimport { useSocket } from \"providers/socket\";\nimport { reportError } from \"utils\";\n\nconst SEND_TIMEOUT_MS = 45000;\nconst RETRY_INTERVAL_MS = 500;\n\nexport const CreateTxContext = React.createContext<\n  React.MutableRefObject<() => void | undefined> | undefined\n>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function CreateTxProvider({ children }: ProviderProps) {\n  const createTx = React.useRef(() => {});\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef<number>(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts?.programAccounts[0].toBase58();\n\n  // Reset counter when program data accounts are refreshed\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n\n  const connection = useConnection();\n  const blockhash = useBlockhash();\n  const dispatch = useDispatch();\n  const socket = useSocket();\n  React.useEffect(() => {\n    createTx.current = () => {\n      if (\n        !connection ||\n        !blockhash ||\n        !socket ||\n        !config ||\n        !accounts ||\n        !targetSlotRef.current\n      )\n        return;\n      const id = idCounter.current;\n      if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n        idCounter.current++;\n        createTransaction(\n          connection,\n          blockhash,\n          targetSlotRef.current,\n          config.programId,\n          accounts,\n          id,\n          dispatch,\n          socket\n        );\n      } else {\n        reportError(\n          new Error(\"Account capacity exceeded\"),\n          \"failed to create transaction\"\n        );\n      }\n    };\n  }, [\n    blockhash,\n    connection,\n    socket,\n    config,\n    accounts,\n    dispatch,\n    targetSlotRef,\n  ]);\n\n  return (\n    <CreateTxContext.Provider value={createTx}>\n      {children}\n    </CreateTxContext.Provider>\n  );\n}\n\nexport function createTransaction(\n  connection: Connection,\n  blockhash: Blockhash,\n  targetSlot: number,\n  programId: PublicKey,\n  accounts: AccountsConfig,\n  trackingId: number,\n  dispatch: Dispatch,\n  socket: WebSocket\n) {\n  const { feeAccounts, programAccounts } = accounts;\n\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n  const instruction = new TransactionInstruction({\n    keys: [{ pubkey: programDataAccount, isWritable: true, isSigner: false }],\n    programId,\n    data: Buffer.from(Bytes.instructionDataFromId(bitId)),\n  });\n\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.recentBlockhash = blockhash;\n  transaction.sign(feeAccount);\n  const serializedTx = transaction.serialize();\n  socket.send(serializedTx);\n  const sentAt = performance.now();\n\n  const pendingTransaction: PendingTransaction = { sentAt, targetSlot };\n  pendingTransaction.timeoutId = window.setTimeout(() => {\n    dispatch({ type: \"timeout\", trackingId });\n  }, SEND_TIMEOUT_MS);\n\n  const signatureBuffer = transaction.signature;\n  if (!signatureBuffer) throw new Error(\"Failed to sign transaction\");\n  const signature = bs58.encode(signatureBuffer);\n  const details: TransactionDetails = {\n    id: bitId,\n    feeAccount: feeAccount.publicKey,\n    programAccount: programDataAccount,\n    signature,\n  };\n\n  const retryUntil = new URLSearchParams(window.location.search).get(\n    \"retry_until\"\n  );\n  if (retryUntil === null || retryUntil !== \"disabled\") {\n    pendingTransaction.retryId = window.setInterval(() => {\n      if (socket.readyState === WebSocket.OPEN) {\n        socket.send(serializedTx);\n      }\n    }, RETRY_INTERVAL_MS);\n  }\n\n  connection.onSignature(\n    signature,\n    (result, context) => {\n      dispatch({\n        type: \"signature\",\n        trackingId,\n        estimatedSlot: context.slot,\n        receivedAt: performance.now(),\n      });\n    },\n    \"singleGossip\"\n  );\n\n  dispatch({\n    type: \"new\",\n    details,\n    trackingId,\n    pendingTransaction,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}