{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/rpc/index.tsx\";\nimport React from \"react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useConfig } from \"providers/server/http\";\nimport { BlockhashProvider } from \"./blockhash\";\nimport { BalanceProvider } from \"./balance\";\nconst StateContext = React.createContext(undefined);\nexport function RpcProvider({\n  children\n}) {\n  var _useConfig;\n\n  const state = React.useState();\n  const [, setRpcUrl] = state; // Reset rpc url whenever config is fetched\n\n  const rpcUrl = (_useConfig = useConfig()) === null || _useConfig === void 0 ? void 0 : _useConfig.rpcUrl;\n  React.useEffect(() => {\n    console.log(\"set rpc url\", {\n      rpcUrl\n    });\n    setRpcUrl(rpcUrl);\n  }, [rpcUrl, setRpcUrl]);\n  return /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BlockhashProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BalanceProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, children)));\n}\nexport function useRpcUrlState() {\n  const state = React.useContext(StateContext);\n\n  if (state === undefined) {\n    throw new Error(`useRpcUrlState must be used within a RpcProvider`);\n  }\n\n  return state;\n}\nexport function useConnection() {\n  const [url] = useRpcUrlState();\n  return React.useMemo(() => {\n    if (url === undefined) return;\n    console.log(\"new connection\", {\n      url\n    });\n    return new Connection(url);\n  }, [url]);\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/rpc/index.tsx"],"names":["React","Connection","useConfig","BlockhashProvider","BalanceProvider","StateContext","createContext","undefined","RpcProvider","children","state","useState","setRpcUrl","rpcUrl","useEffect","console","log","useRpcUrlState","useContext","Error","useConnection","url","useMemo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,iBAAT,QAAkC,aAAlC;AACA,SAASC,eAAT,QAAgC,WAAhC;AAKA,MAAMC,YAAY,GAAGL,KAAK,CAACM,aAAN,CAAuCC,SAAvC,CAArB;AAGA,OAAO,SAASC,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAkD;AAAA;;AACvD,QAAMC,KAAK,GAAGV,KAAK,CAACW,QAAN,EAAd;AACA,QAAM,GAAGC,SAAH,IAAgBF,KAAtB,CAFuD,CAIvD;;AACA,QAAMG,MAAM,iBAAGX,SAAS,EAAZ,+CAAG,WAAaW,MAA5B;AACAb,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B;AAACH,MAAAA;AAAD,KAA3B;AACAD,IAAAA,SAAS,CAACC,MAAD,CAAT;AACD,GAHD,EAGG,CAACA,MAAD,EAASD,SAAT,CAHH;AAKA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEF,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkBD,QAAlB,CADF,CADF,CADF;AAOD;AAED,OAAO,SAASQ,cAAT,GAAiC;AACtC,QAAMP,KAAK,GAAGV,KAAK,CAACkB,UAAN,CAAiBb,YAAjB,CAAd;;AACA,MAAIK,KAAK,KAAKH,SAAd,EAAyB;AACvB,UAAM,IAAIY,KAAJ,CAAW,kDAAX,CAAN;AACD;;AACD,SAAOT,KAAP;AACD;AAED,OAAO,SAASU,aAAT,GAAiD;AACtD,QAAM,CAACC,GAAD,IAAQJ,cAAc,EAA5B;AACA,SAAOjB,KAAK,CAACsB,OAAN,CAAc,MAAM;AACzB,QAAID,GAAG,KAAKd,SAAZ,EAAuB;AACvBQ,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B;AAACK,MAAAA;AAAD,KAA9B;AACA,WAAO,IAAIpB,UAAJ,CAAeoB,GAAf,CAAP;AACD,GAJM,EAIJ,CAACA,GAAD,CAJI,CAAP;AAKD","sourcesContent":["import React from \"react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useConfig } from \"providers/server/http\";\nimport { BlockhashProvider } from \"./blockhash\";\nimport { BalanceProvider } from \"./balance\";\n\ntype SetUrl = (url: string) => void;\ntype State = [string | undefined, SetUrl];\n\nconst StateContext = React.createContext<State | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function RpcProvider({ children }: ProviderProps) {\n  const state = React.useState<string>();\n  const [, setRpcUrl] = state;\n\n  // Reset rpc url whenever config is fetched\n  const rpcUrl = useConfig()?.rpcUrl;\n  React.useEffect(() => {\n    console.log(\"set rpc url\", {rpcUrl});\n    setRpcUrl(rpcUrl);\n  }, [rpcUrl, setRpcUrl]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <BlockhashProvider>\n        <BalanceProvider>{children}</BalanceProvider>\n      </BlockhashProvider>\n    </StateContext.Provider>\n  );\n}\n\nexport function useRpcUrlState(): State {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useRpcUrlState must be used within a RpcProvider`);\n  }\n  return state;\n}\n\nexport function useConnection(): Connection | undefined {\n  const [url] = useRpcUrlState();\n  return React.useMemo(() => {\n    if (url === undefined) return;\n    console.log(\"new connection\", {url});\n    return new Connection(url);\n  }, [url]);\n}\n"]},"metadata":{},"sourceType":"module"}