{"ast":null,"code":"import * as React from \"react\";\nimport { useAccounts } from \"../server/http\";\nimport { useDispatch, COMMITMENT_PARAM } from \"./index\";\nimport * as Bytes from \"utils/bytes\";\nimport { useConnection } from \"providers/rpc\";\nexport const DEBUG_MODE = new URLSearchParams(window.location.search).has(\"debug\"); // Determine commitment levels to subscribe to. \"singleGossip\" is used\n// to stop tx send retries so it must be returned\n\nconst subscribedCommitments = () => {\n  if (DEBUG_MODE) return [\"recent\", \"single\", \"singleGossip\"];\n\n  switch (COMMITMENT_PARAM) {\n    case \"recent\":\n    case \"single\":\n      {\n        return [COMMITMENT_PARAM, \"singleGossip\"];\n      }\n\n    default:\n      {\n        return [\"singleGossip\"];\n      }\n  }\n};\n\nexport function ConfirmedHelper({\n  children\n}) {\n  const dispatch = useDispatch();\n  const connection = useConnection();\n  const accounts = useAccounts();\n  React.useEffect(() => {\n    const commitments = subscribedCommitments();\n    console.log({\n      connection: connection !== undefined,\n      accounts: accounts,\n      commitments\n    });\n    if (connection === undefined || accounts === undefined) return;\n    const partitionCount = accounts.programAccounts.length;\n    const accountSubscriptions = accounts.programAccounts.map((account, partition) => commitments.map(commitment => connection.onAccountChange(account, (accountInfo, {\n      slot\n    }) => {\n      const ids = new Set(Bytes.programDataToIds(accountInfo.data));\n      const activeIdPartition = {\n        ids,\n        partition,\n        partitionCount\n      };\n      dispatch({\n        type: \"update\",\n        activeIdPartition,\n        commitment,\n        estimatedSlot: slot,\n        receivedAt: performance.now()\n      });\n    }, commitment)));\n    return () => {\n      accountSubscriptions.forEach(listeners => {\n        listeners.forEach(listener => {\n          connection.removeAccountChangeListener(listener);\n        });\n      });\n    };\n  }, [dispatch, connection, accounts]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/confirmed.tsx"],"names":["React","useAccounts","useDispatch","COMMITMENT_PARAM","Bytes","useConnection","DEBUG_MODE","URLSearchParams","window","location","search","has","subscribedCommitments","ConfirmedHelper","children","dispatch","connection","accounts","useEffect","commitments","console","log","undefined","partitionCount","programAccounts","length","accountSubscriptions","map","account","partition","commitment","onAccountChange","accountInfo","slot","ids","Set","programDataToIds","data","activeIdPartition","type","estimatedSlot","receivedAt","performance","now","forEach","listeners","listener","removeAccountChangeListener"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,WAAT,EAAyCC,gBAAzC,QAAiE,SAAjE;AACA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;AACA,SAASC,aAAT,QAA8B,eAA9B;AAEA,OAAO,MAAMC,UAAU,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,EAA4CC,GAA5C,CACxB,OADwB,CAAnB,C,CAIP;AACA;;AACA,MAAMC,qBAAqB,GAAG,MAA2B;AACvD,MAAIN,UAAJ,EAAgB,OAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,cAArB,CAAP;;AAChB,UAAQH,gBAAR;AACE,SAAK,QAAL;AACA,SAAK,QAAL;AAAe;AACb,eAAO,CAACA,gBAAD,EAAmB,cAAnB,CAAP;AACD;;AACD;AAAS;AACP,eAAO,CAAC,cAAD,CAAP;AACD;AAPH;AASD,CAXD;;AAcA,OAAO,SAASU,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAA8C;AACnD,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMc,UAAU,GAAGX,aAAa,EAAhC;AACA,QAAMY,QAAQ,GAAGhB,WAAW,EAA5B;AAEAD,EAAAA,KAAK,CAACkB,SAAN,CAAgB,MAAM;AACpB,UAAMC,WAAW,GAAGP,qBAAqB,EAAzC;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY;AACVL,MAAAA,UAAU,EAAEA,UAAU,KAAKM,SADjB;AAEVL,MAAAA,QAAQ,EAAEA,QAFA;AAGVE,MAAAA;AAHU,KAAZ;AAKA,QAAIH,UAAU,KAAKM,SAAf,IAA4BL,QAAQ,KAAKK,SAA7C,EAAwD;AAExD,UAAMC,cAAc,GAAGN,QAAQ,CAACO,eAAT,CAAyBC,MAAhD;AAEA,UAAMC,oBAAoB,GAAGT,QAAQ,CAACO,eAAT,CAAyBG,GAAzB,CAC3B,CAACC,OAAD,EAAUC,SAAV,KACEV,WAAW,CAACQ,GAAZ,CAAiBG,UAAD,IACdd,UAAU,CAACe,eAAX,CACEH,OADF,EAEE,CAACI,WAAD,EAAmC;AAAEC,MAAAA;AAAF,KAAnC,KAAgD;AAC9C,YAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQ/B,KAAK,CAACgC,gBAAN,CAAuBJ,WAAW,CAACK,IAAnC,CAAR,CAAZ;AACA,YAAMC,iBAAiB,GAAG;AACxBJ,QAAAA,GADwB;AAExBL,QAAAA,SAFwB;AAGxBN,QAAAA;AAHwB,OAA1B;AAKAR,MAAAA,QAAQ,CAAC;AACPwB,QAAAA,IAAI,EAAE,QADC;AAEPD,QAAAA,iBAFO;AAGPR,QAAAA,UAHO;AAIPU,QAAAA,aAAa,EAAEP,IAJR;AAKPQ,QAAAA,UAAU,EAAEC,WAAW,CAACC,GAAZ;AALL,OAAD,CAAR;AAOD,KAhBH,EAiBEb,UAjBF,CADF,CAFyB,CAA7B;AAyBA,WAAO,MAAM;AACXJ,MAAAA,oBAAoB,CAACkB,OAArB,CAA8BC,SAAD,IAAe;AAC1CA,QAAAA,SAAS,CAACD,OAAV,CAAmBE,QAAD,IAAc;AAC9B9B,UAAAA,UAAU,CAAC+B,2BAAX,CAAuCD,QAAvC;AACD,SAFD;AAGD,OAJD;AAKD,KAND;AAOD,GA3CD,EA2CG,CAAC/B,QAAD,EAAWC,UAAX,EAAuBC,QAAvB,CA3CH;AA6CA,sBAAO,0CAAGH,QAAH,CAAP;AACD","sourcesContent":["import * as React from \"react\";\n\nimport { AccountInfo } from \"@solana/web3.js\";\nimport { useAccounts } from \"../server/http\";\nimport { useDispatch, TrackedCommitment, COMMITMENT_PARAM } from \"./index\";\nimport * as Bytes from \"utils/bytes\";\nimport { useConnection } from \"providers/rpc\";\n\nexport const DEBUG_MODE = new URLSearchParams(window.location.search).has(\n  \"debug\"\n);\n\n// Determine commitment levels to subscribe to. \"singleGossip\" is used\n// to stop tx send retries so it must be returned\nconst subscribedCommitments = (): TrackedCommitment[] => {\n  if (DEBUG_MODE) return [\"recent\", \"single\", \"singleGossip\"];\n  switch (COMMITMENT_PARAM) {\n    case \"recent\":\n    case \"single\": {\n      return [COMMITMENT_PARAM, \"singleGossip\"];\n    }\n    default: {\n      return [\"singleGossip\"];\n    }\n  }\n};\n\ntype Props = { children: React.ReactNode };\nexport function ConfirmedHelper({ children }: Props) {\n  const dispatch = useDispatch();\n  const connection = useConnection();\n  const accounts = useAccounts();\n\n  React.useEffect(() => {\n    const commitments = subscribedCommitments();\n    console.log({\n      connection: connection !== undefined,\n      accounts: accounts,\n      commitments,\n    })\n    if (connection === undefined || accounts === undefined) return;\n\n    const partitionCount = accounts.programAccounts.length;\n\n    const accountSubscriptions = accounts.programAccounts.map(\n      (account, partition) =>\n        commitments.map((commitment) =>\n          connection.onAccountChange(\n            account,\n            (accountInfo: AccountInfo<Buffer>, { slot }) => {\n              const ids = new Set(Bytes.programDataToIds(accountInfo.data));\n              const activeIdPartition = {\n                ids,\n                partition,\n                partitionCount,\n              };\n              dispatch({\n                type: \"update\",\n                activeIdPartition,\n                commitment,\n                estimatedSlot: slot,\n                receivedAt: performance.now(),\n              });\n            },\n            commitment\n          )\n        )\n    );\n\n    return () => {\n      accountSubscriptions.forEach((listeners) => {\n        listeners.forEach((listener) => {\n          connection.removeAccountChangeListener(listener);\n        });\n      });\n    };\n  }, [dispatch, connection, accounts]);\n\n  return <>{children}</>;\n}\n"]},"metadata":{},"sourceType":"module"}