{"ast":null,"code":"import * as React from \"react\";\nimport { useAccounts, useConnection } from \"../api\";\nimport { useDispatch, ActionType } from \"./index\";\nimport * as Bytes from \"utils/bytes\";\n\nconst commitmentParam = () => {\n  const commitment = new URLSearchParams(window.location.search).get(\"commitment\");\n\n  switch (commitment) {\n    case \"recent\":\n    case \"single\":\n    case \"singleGossip\":\n    case \"max\":\n    case \"root\":\n      {\n        return commitment;\n      }\n\n    default:\n      {\n        return \"singleGossip\";\n      }\n  }\n};\n\nexport function ConfirmedHelper({\n  children\n}) {\n  const dispatch = useDispatch();\n  const connection = useConnection();\n  const accounts = useAccounts();\n  React.useEffect(() => {\n    if (connection === undefined || accounts === undefined) return;\n    const commitment = commitmentParam();\n    const partitionCount = accounts.programAccounts.length;\n    const accountSubscriptions = accounts.programAccounts.map((account, partition) => {\n      return connection.onAccountChange(account, (accountInfo, {\n        slot\n      }) => {\n        console.log(accountInfo);\n        const ids = new Set(Bytes.programDataToIds(accountInfo.data));\n        const activeIdPartition = {\n          ids,\n          partition,\n          partitionCount\n        };\n        dispatch({\n          type: ActionType.UpdateIds,\n          activeIdPartition,\n          slot\n        });\n      }, commitment);\n    });\n    return () => {\n      accountSubscriptions.forEach(listener => {\n        connection.removeAccountChangeListener(listener);\n      });\n    };\n  }, [dispatch, connection, accounts]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/confirmed.tsx"],"names":["React","useAccounts","useConnection","useDispatch","ActionType","Bytes","commitmentParam","commitment","URLSearchParams","window","location","search","get","ConfirmedHelper","children","dispatch","connection","accounts","useEffect","undefined","partitionCount","programAccounts","length","accountSubscriptions","map","account","partition","onAccountChange","accountInfo","slot","console","log","ids","Set","programDataToIds","data","activeIdPartition","type","UpdateIds","forEach","listener","removeAccountChangeListener"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,QAA3C;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,SAAxC;AACA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;;AAEA,MAAMC,eAAe,GAAG,MAAkB;AACxC,QAAMC,UAAU,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,EAA4CC,GAA5C,CACjB,YADiB,CAAnB;;AAGA,UAAQL,UAAR;AACE,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,cAAL;AACA,SAAK,KAAL;AACA,SAAK,MAAL;AAAa;AACX,eAAOA,UAAP;AACD;;AACD;AAAS;AACP,eAAO,cAAP;AACD;AAVH;AAYD,CAhBD;;AAmBA,OAAO,SAASM,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAA8C;AACnD,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,UAAU,GAAGd,aAAa,EAAhC;AACA,QAAMe,QAAQ,GAAGhB,WAAW,EAA5B;AAEAD,EAAAA,KAAK,CAACkB,SAAN,CAAgB,MAAM;AACpB,QAAIF,UAAU,KAAKG,SAAf,IAA4BF,QAAQ,KAAKE,SAA7C,EAAwD;AAExD,UAAMZ,UAAU,GAAGD,eAAe,EAAlC;AACA,UAAMc,cAAc,GAAGH,QAAQ,CAACI,eAAT,CAAyBC,MAAhD;AAEA,UAAMC,oBAAoB,GAAGN,QAAQ,CAACI,eAAT,CAAyBG,GAAzB,CAC3B,CAACC,OAAD,EAAUC,SAAV,KAAwB;AACtB,aAAOV,UAAU,CAACW,eAAX,CACLF,OADK,EAEL,CAACG,WAAD,EAAmC;AAAEC,QAAAA;AAAF,OAAnC,KAAgD;AAC9CC,QAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA,cAAMI,GAAG,GAAG,IAAIC,GAAJ,CAAQ5B,KAAK,CAAC6B,gBAAN,CAAuBN,WAAW,CAACO,IAAnC,CAAR,CAAZ;AACA,cAAMC,iBAAiB,GAAG;AAAEJ,UAAAA,GAAF;AAAON,UAAAA,SAAP;AAAkBN,UAAAA;AAAlB,SAA1B;AACAL,QAAAA,QAAQ,CAAC;AAAEsB,UAAAA,IAAI,EAAEjC,UAAU,CAACkC,SAAnB;AAA8BF,UAAAA,iBAA9B;AAAiDP,UAAAA;AAAjD,SAAD,CAAR;AACD,OAPI,EAQLtB,UARK,CAAP;AAUD,KAZ0B,CAA7B;AAeA,WAAO,MAAM;AACXgB,MAAAA,oBAAoB,CAACgB,OAArB,CAA8BC,QAAD,IAAc;AACzCxB,QAAAA,UAAU,CAACyB,2BAAX,CAAuCD,QAAvC;AACD,OAFD;AAGD,KAJD;AAKD,GA1BD,EA0BG,CAACzB,QAAD,EAAWC,UAAX,EAAuBC,QAAvB,CA1BH;AA4BA,sBAAO,0CAAGH,QAAH,CAAP;AACD","sourcesContent":["import * as React from \"react\";\n\nimport { AccountInfo, Commitment } from \"@solana/web3.js\";\nimport { useAccounts, useConnection } from \"../api\";\nimport { useDispatch, ActionType } from \"./index\";\nimport * as Bytes from \"utils/bytes\";\n\nconst commitmentParam = (): Commitment => {\n  const commitment = new URLSearchParams(window.location.search).get(\n    \"commitment\"\n  );\n  switch (commitment) {\n    case \"recent\":\n    case \"single\":\n    case \"singleGossip\":\n    case \"max\":\n    case \"root\": {\n      return commitment;\n    }\n    default: {\n      return \"singleGossip\";\n    }\n  }\n};\n\ntype Props = { children: React.ReactNode };\nexport function ConfirmedHelper({ children }: Props) {\n  const dispatch = useDispatch();\n  const connection = useConnection();\n  const accounts = useAccounts();\n\n  React.useEffect(() => {\n    if (connection === undefined || accounts === undefined) return;\n\n    const commitment = commitmentParam();\n    const partitionCount = accounts.programAccounts.length;\n\n    const accountSubscriptions = accounts.programAccounts.map(\n      (account, partition) => {\n        return connection.onAccountChange(\n          account,\n          (accountInfo: AccountInfo<Buffer>, { slot }) => {\n            console.log(accountInfo);\n            const ids = new Set(Bytes.programDataToIds(accountInfo.data));\n            const activeIdPartition = { ids, partition, partitionCount };\n            dispatch({ type: ActionType.UpdateIds, activeIdPartition, slot });\n          },\n          commitment\n        );\n      }\n    );\n\n    return () => {\n      accountSubscriptions.forEach((listener) => {\n        connection.removeAccountChangeListener(listener);\n      });\n    };\n  }, [dispatch, connection, accounts]);\n\n  return <>{children}</>;\n}\n"]},"metadata":{},"sourceType":"module"}