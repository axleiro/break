{"ast":null,"code":"import*as React from\"react\";import{useAccounts,useConnection}from\"../api\";import{useDispatch,ActionType}from\"./index\";import*as Bytes from\"utils/bytes\";var commitmentParam=function commitmentParam(){var commitment=new URLSearchParams(window.location.search).get(\"commitment\");switch(commitment){case\"recent\":case\"single\":case\"singleGossip\":case\"max\":case\"root\":{return commitment;}default:{return\"singleGossip\";}}};export function ConfirmedHelper(_ref){var children=_ref.children;var dispatch=useDispatch();var connection=useConnection();var accounts=useAccounts();React.useEffect(function(){if(connection===undefined||accounts===undefined)return;var commitment=commitmentParam();var partitionCount=accounts.programAccounts.length;var accountSubscriptions=accounts.programAccounts.map(function(account,partition){return connection.onAccountChange(account,function(accountInfo,_ref2){var slot=_ref2.slot;var ids=new Set(Bytes.programDataToIds(accountInfo.data));var activeIdPartition={ids:ids,partition:partition,partitionCount:partitionCount};dispatch({type:ActionType.UpdateIds,activeIdPartition:activeIdPartition,slot:slot});},commitment);});return function(){accountSubscriptions.forEach(function(listener){connection.removeAccountChangeListener(listener);});};},[dispatch,connection,accounts]);return/*#__PURE__*/React.createElement(React.Fragment,null,children);}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/confirmed.tsx"],"names":["React","useAccounts","useConnection","useDispatch","ActionType","Bytes","commitmentParam","commitment","URLSearchParams","window","location","search","get","ConfirmedHelper","children","dispatch","connection","accounts","useEffect","undefined","partitionCount","programAccounts","length","accountSubscriptions","map","account","partition","onAccountChange","accountInfo","slot","ids","Set","programDataToIds","data","activeIdPartition","type","UpdateIds","forEach","listener","removeAccountChangeListener"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CAGA,OAASC,WAAT,CAAsBC,aAAtB,KAA2C,QAA3C,CACA,OAASC,WAAT,CAAsBC,UAAtB,KAAwC,SAAxC,CACA,MAAO,GAAKC,CAAAA,KAAZ,KAAuB,aAAvB,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAkB,CACxC,GAAMC,CAAAA,UAAU,CAAG,GAAIC,CAAAA,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,EAA4CC,GAA5C,CACjB,YADiB,CAAnB,CAGA,OAAQL,UAAR,EACE,IAAK,QAAL,CACA,IAAK,QAAL,CACA,IAAK,cAAL,CACA,IAAK,KAAL,CACA,IAAK,MAAL,CAAa,CACX,MAAOA,CAAAA,UAAP,CACD,CACD,QAAS,CACP,MAAO,cAAP,CACD,CAVH,CAYD,CAhBD,CAmBA,MAAO,SAASM,CAAAA,eAAT,MAA8C,IAAnBC,CAAAA,QAAmB,MAAnBA,QAAmB,CACnD,GAAMC,CAAAA,QAAQ,CAAGZ,WAAW,EAA5B,CACA,GAAMa,CAAAA,UAAU,CAAGd,aAAa,EAAhC,CACA,GAAMe,CAAAA,QAAQ,CAAGhB,WAAW,EAA5B,CAEAD,KAAK,CAACkB,SAAN,CAAgB,UAAM,CACpB,GAAIF,UAAU,GAAKG,SAAf,EAA4BF,QAAQ,GAAKE,SAA7C,CAAwD,OAExD,GAAMZ,CAAAA,UAAU,CAAGD,eAAe,EAAlC,CACA,GAAMc,CAAAA,cAAc,CAAGH,QAAQ,CAACI,eAAT,CAAyBC,MAAhD,CAEA,GAAMC,CAAAA,oBAAoB,CAAGN,QAAQ,CAACI,eAAT,CAAyBG,GAAzB,CAC3B,SAACC,OAAD,CAAUC,SAAV,CAAwB,CACtB,MAAOV,CAAAA,UAAU,CAACW,eAAX,CACLF,OADK,CAEL,SAACG,WAAD,OAAgD,IAAXC,CAAAA,IAAW,OAAXA,IAAW,CAC9C,GAAMC,CAAAA,GAAG,CAAG,GAAIC,CAAAA,GAAJ,CAAQ1B,KAAK,CAAC2B,gBAAN,CAAuBJ,WAAW,CAACK,IAAnC,CAAR,CAAZ,CACA,GAAMC,CAAAA,iBAAiB,CAAG,CAAEJ,GAAG,CAAHA,GAAF,CAAOJ,SAAS,CAATA,SAAP,CAAkBN,cAAc,CAAdA,cAAlB,CAA1B,CACAL,QAAQ,CAAC,CAAEoB,IAAI,CAAE/B,UAAU,CAACgC,SAAnB,CAA8BF,iBAAiB,CAAjBA,iBAA9B,CAAiDL,IAAI,CAAJA,IAAjD,CAAD,CAAR,CACD,CANI,CAOLtB,UAPK,CAAP,CASD,CAX0B,CAA7B,CAcA,MAAO,WAAM,CACXgB,oBAAoB,CAACc,OAArB,CAA6B,SAACC,QAAD,CAAc,CACzCtB,UAAU,CAACuB,2BAAX,CAAuCD,QAAvC,EACD,CAFD,EAGD,CAJD,CAKD,CAzBD,CAyBG,CAACvB,QAAD,CAAWC,UAAX,CAAuBC,QAAvB,CAzBH,EA2BA,mBAAO,wCAAGH,QAAH,CAAP,CACD","sourcesContent":["import * as React from \"react\";\n\nimport { AccountInfo, Commitment } from \"@solana/web3.js\";\nimport { useAccounts, useConnection } from \"../api\";\nimport { useDispatch, ActionType } from \"./index\";\nimport * as Bytes from \"utils/bytes\";\n\nconst commitmentParam = (): Commitment => {\n  const commitment = new URLSearchParams(window.location.search).get(\n    \"commitment\"\n  );\n  switch (commitment) {\n    case \"recent\":\n    case \"single\":\n    case \"singleGossip\":\n    case \"max\":\n    case \"root\": {\n      return commitment;\n    }\n    default: {\n      return \"singleGossip\";\n    }\n  }\n};\n\ntype Props = { children: React.ReactNode };\nexport function ConfirmedHelper({ children }: Props) {\n  const dispatch = useDispatch();\n  const connection = useConnection();\n  const accounts = useAccounts();\n\n  React.useEffect(() => {\n    if (connection === undefined || accounts === undefined) return;\n\n    const commitment = commitmentParam();\n    const partitionCount = accounts.programAccounts.length;\n\n    const accountSubscriptions = accounts.programAccounts.map(\n      (account, partition) => {\n        return connection.onAccountChange(\n          account,\n          (accountInfo: AccountInfo<Buffer>, { slot }) => {\n            const ids = new Set(Bytes.programDataToIds(accountInfo.data));\n            const activeIdPartition = { ids, partition, partitionCount };\n            dispatch({ type: ActionType.UpdateIds, activeIdPartition, slot });\n          },\n          commitment\n        );\n      }\n    );\n\n    return () => {\n      accountSubscriptions.forEach((listener) => {\n        connection.removeAccountChangeListener(listener);\n      });\n    };\n  }, [dispatch, connection, accounts]);\n\n  return <>{children}</>;\n}\n"]},"metadata":{},"sourceType":"module"}