{"ast":null,"code":"import { Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport * as Bytes from \"utils/bytes\";\nconst self = globalThis;\n\nfunction createTransaction(message) {\n  console.log(\"CREATE\", message);\n  const {\n    trackingId\n  } = message;\n  const {\n    feeAccounts,\n    programAccounts\n  } = accountConfig;\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n  const instruction = new TransactionInstruction({\n    keys: [{\n      pubkey: programDataAccount,\n      isWritable: true,\n      isSigner: false\n    }],\n    programId,\n    data: Buffer.from(Bytes.instructionDataFromId(bitId))\n  });\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.recentBlockhash = blockhash;\n  transaction.sign(feeAccount);\n  const signatureBuffer = transaction.signature;\n  const serializedTransaction = transaction.serialize();\n  socket.send(serializedTransaction);\n  self.postMessage({\n    trackingId: trackingId,\n    signature: signatureBuffer\n  });\n}\n\nlet clusterUrl;\nlet programId;\nlet accountConfig;\nlet blockhash;\nlet socket = new WebSocket(\"wss://break-solana-testnet.herokuapp.com\");\n\nself.onmessage = event => {\n  const message = event.data;\n\n  switch (message.type) {\n    case \"init\":\n      {\n        clusterUrl = message.clusterUrl;\n        programId = message.programId;\n        break;\n      }\n\n    case \"accounts\":\n      {\n        accountConfig = message.accountConfig;\n        break;\n      }\n\n    case \"blockhash\":\n      {\n        blockhash = message.blockhash;\n        break;\n      }\n\n    case \"create\":\n      {\n        console.log(\"WORKER RECVD CREATE\");\n\n        try {\n          createTransaction(message);\n        } catch (error) {\n          self.postMessage({\n            trackingId: message.trackingId,\n            error: error\n          });\n        }\n\n        return;\n      }\n  }\n\n  if (clusterUrl && programId && accountConfig && blockhash) {\n    console.log(\"WORKER READY BITCH\");\n    self.postMessage(\"ready\");\n  }\n};\n\nexport default {};","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/workers/create-transaction-worker-script.ts"],"names":["Transaction","TransactionInstruction","Bytes","self","globalThis","createTransaction","message","console","log","trackingId","feeAccounts","programAccounts","accountConfig","bitId","Math","floor","length","accountIndex","programDataAccount","feeAccount","instruction","keys","pubkey","isWritable","isSigner","programId","data","Buffer","from","instructionDataFromId","transaction","add","recentBlockhash","blockhash","sign","signatureBuffer","signature","serializedTransaction","serialize","socket","send","postMessage","clusterUrl","WebSocket","onmessage","event","type","error"],"mappings":"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","sourcesContent":["import {\n  Transaction,\n  TransactionInstruction,\n  PublicKey,\n  Account,\n  Blockhash,\n} from \"@solana/web3.js\";\nimport * as Bytes from \"utils/bytes\";\nimport { CreateTransactionMessage, WorkerMessage } from \"./create-transaction-rpc\";\nimport { AccountsConfig } from \"providers/api/config\";\n\nconst self: any = globalThis;\n\nfunction createTransaction(message: CreateTransactionMessage) {\n  console.log(\"CREATE\", message);\n  const { trackingId } = message;\n  const { feeAccounts, programAccounts } = accountConfig;\n\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n\n  const instruction = new TransactionInstruction({\n    keys: [\n      {\n        pubkey: programDataAccount,\n        isWritable: true,\n        isSigner: false,\n      },\n    ],\n    programId,\n    data: Buffer.from(Bytes.instructionDataFromId(bitId)),\n  });\n\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.recentBlockhash = blockhash;\n  transaction.sign(feeAccount);\n\n  const signatureBuffer = transaction.signature;\n  const serializedTransaction = transaction.serialize();\n  socket.send(serializedTransaction);\n\n  self.postMessage({\n    trackingId: trackingId,\n    signature: signatureBuffer,\n  });\n}\n\nlet clusterUrl: string;\nlet programId: PublicKey;\nlet accountConfig: AccountsConfig;\nlet blockhash: Blockhash;\nlet socket = new WebSocket(\"wss://break-solana-testnet.herokuapp.com\");\n\nself.onmessage = (event: any) => {\n  const message: WorkerMessage = event.data;\n  switch(message.type) {\n    case \"init\": {\n      clusterUrl = message.clusterUrl;\n      programId = message.programId;\n      break;\n    }\n\n    case \"accounts\": {\n      accountConfig = message.accountConfig;\n      break;\n    }\n\n    case \"blockhash\": {\n      blockhash = message.blockhash;\n      break;\n    }\n\n    case \"create\": {\n      console.log(\"WORKER RECVD CREATE\");\n      try {\n        createTransaction(message);\n      } catch (error) {\n        self.postMessage({\n          trackingId: message.trackingId,\n          error: error,\n        });\n      }\n      return;\n    }\n  }\n\n  if (clusterUrl && programId && accountConfig && blockhash) {\n    console.log(\"WORKER READY BITCH\");\n    self.postMessage(\"ready\");\n  }\n\n};\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}