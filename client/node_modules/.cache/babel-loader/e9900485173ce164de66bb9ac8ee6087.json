{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/rpc/index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React from \"react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useConfig } from \"providers/server/http\";\nimport { BlockhashProvider } from \"./blockhash\";\nimport { BalanceProvider } from \"./balance\";\nconst StateContext = /*#__PURE__*/React.createContext(undefined);\nconst ConnectionContext = /*#__PURE__*/React.createContext(undefined);\nexport function RpcProvider({\n  children\n}) {\n  _s();\n\n  var _useConfig;\n\n  const state = React.useState();\n  const [rpcUrl, setRpcUrl] = state; // Reset rpc url whenever config is fetched\n\n  const configRpcUrl = (_useConfig = useConfig()) === null || _useConfig === void 0 ? void 0 : _useConfig.rpcUrl;\n  React.useEffect(() => {\n    setRpcUrl(configRpcUrl);\n  }, [configRpcUrl, setRpcUrl]);\n  const connection = React.useMemo(() => {\n    if (rpcUrl === undefined) return {};\n\n    try {\n      const url = new URL(rpcUrl).toString();\n      console.log(\"connection\");\n      return {\n        connection: new Connection(url)\n      };\n    } catch (err) {\n      console.error(err);\n      return {};\n    }\n  }, [rpcUrl]);\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(ConnectionContext.Provider, {\n      value: connection,\n      children: /*#__PURE__*/_jsxDEV(BlockhashProvider, {\n        children: /*#__PURE__*/_jsxDEV(BalanceProvider, {\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RpcProvider, \"W9nyox8fj2MJtFyhaHNGiJsO/eU=\", false, function () {\n  return [useConfig];\n});\n\n_c = RpcProvider;\nexport function useRpcUrlState() {\n  _s2();\n\n  const state = React.useContext(StateContext);\n\n  if (state === undefined) {\n    throw new Error(`useRpcUrlState must be used within a RpcProvider`);\n  }\n\n  return state;\n}\n\n_s2(useRpcUrlState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useConnection() {\n  _s3();\n\n  const state = React.useContext(ConnectionContext);\n\n  if (state === undefined) {\n    throw new Error(`useConnection must be used within a RpcProvider`);\n  }\n\n  return state.connection;\n}\n\n_s3(useConnection, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"RpcProvider\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/rpc/index.tsx"],"names":["React","Connection","useConfig","BlockhashProvider","BalanceProvider","StateContext","createContext","undefined","ConnectionContext","RpcProvider","children","state","useState","rpcUrl","setRpcUrl","configRpcUrl","useEffect","connection","useMemo","url","URL","toString","console","log","err","error","useRpcUrlState","useContext","Error","useConnection"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,iBAAT,QAAkC,aAAlC;AACA,SAASC,eAAT,QAAgC,WAAhC;AASA,MAAMC,YAAY,gBAAGL,KAAK,CAACM,aAAN,CAAuCC,SAAvC,CAArB;AACA,MAAMC,iBAAiB,gBAAGR,KAAK,CAACM,aAAN,CACxBC,SADwB,CAA1B;AAKA,OAAO,SAASE,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAkD;AAAA;;AAAA;;AACvD,QAAMC,KAAK,GAAGX,KAAK,CAACY,QAAN,EAAd;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,KAA5B,CAFuD,CAIvD;;AACA,QAAMI,YAAY,iBAAGb,SAAS,EAAZ,+CAAG,WAAaW,MAAlC;AACAb,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpBF,IAAAA,SAAS,CAACC,YAAD,CAAT;AACD,GAFD,EAEG,CAACA,YAAD,EAAeD,SAAf,CAFH;AAIA,QAAMG,UAA2B,GAAGjB,KAAK,CAACkB,OAAN,CAAc,MAAM;AACtD,QAAIL,MAAM,KAAKN,SAAf,EAA0B,OAAO,EAAP;;AAC1B,QAAI;AACF,YAAMY,GAAG,GAAG,IAAIC,GAAJ,CAAQP,MAAR,EAAgBQ,QAAhB,EAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,aAAO;AAAEN,QAAAA,UAAU,EAAE,IAAIhB,UAAJ,CAAekB,GAAf;AAAd,OAAP;AACD,KAJD,CAIE,OAAOK,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACG,KAAR,CAAcD,GAAd;AACA,aAAO,EAAP;AACD;AACF,GAVmC,EAUjC,CAACX,MAAD,CAViC,CAApC;AAYA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEF,KAA9B;AAAA,2BACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,MAAA,KAAK,EAAEM,UAAnC;AAAA,6BACE,QAAC,iBAAD;AAAA,+BACE,QAAC,eAAD;AAAA,oBAAkBP;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA/BeD,W;UAKOP,S;;;KALPO,W;AAiChB,OAAO,SAASiB,cAAT,GAAiC;AAAA;;AACtC,QAAMf,KAAK,GAAGX,KAAK,CAAC2B,UAAN,CAAiBtB,YAAjB,CAAd;;AACA,MAAIM,KAAK,KAAKJ,SAAd,EAAyB;AACvB,UAAM,IAAIqB,KAAJ,CAAW,kDAAX,CAAN;AACD;;AACD,SAAOjB,KAAP;AACD;;IANee,c;;AAQhB,OAAO,SAASG,aAAT,GAAiD;AAAA;;AACtD,QAAMlB,KAAK,GAAGX,KAAK,CAAC2B,UAAN,CAAiBnB,iBAAjB,CAAd;;AACA,MAAIG,KAAK,KAAKJ,SAAd,EAAyB;AACvB,UAAM,IAAIqB,KAAJ,CAAW,iDAAX,CAAN;AACD;;AACD,SAAOjB,KAAK,CAACM,UAAb;AACD;;IANeY,a","sourcesContent":["import React from \"react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useConfig } from \"providers/server/http\";\nimport { BlockhashProvider } from \"./blockhash\";\nimport { BalanceProvider } from \"./balance\";\n\ntype SetUrl = (url: string) => void;\ntype State = [string | undefined, SetUrl];\n\ntype ConnectionState = {\n  connection?: Connection;\n};\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst ConnectionContext = React.createContext<ConnectionState | undefined>(\n  undefined\n);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function RpcProvider({ children }: ProviderProps) {\n  const state = React.useState<string>();\n  const [rpcUrl, setRpcUrl] = state;\n\n  // Reset rpc url whenever config is fetched\n  const configRpcUrl = useConfig()?.rpcUrl;\n  React.useEffect(() => {\n    setRpcUrl(configRpcUrl);\n  }, [configRpcUrl, setRpcUrl]);\n\n  const connection: ConnectionState = React.useMemo(() => {\n    if (rpcUrl === undefined) return {};\n    try {\n      const url = new URL(rpcUrl).toString();\n      console.log(\"connection\");\n      return { connection: new Connection(url) };\n    } catch (err) {\n      console.error(err);\n      return {};\n    }\n  }, [rpcUrl]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <ConnectionContext.Provider value={connection}>\n        <BlockhashProvider>\n          <BalanceProvider>{children}</BalanceProvider>\n        </BlockhashProvider>\n      </ConnectionContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport function useRpcUrlState(): State {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useRpcUrlState must be used within a RpcProvider`);\n  }\n  return state;\n}\n\nexport function useConnection(): Connection | undefined {\n  const state = React.useContext(ConnectionContext);\n  if (state === undefined) {\n    throw new Error(`useConnection must be used within a RpcProvider`);\n  }\n  return state.connection;\n}\n"]},"metadata":{},"sourceType":"module"}