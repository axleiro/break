{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{configFromInit,configFromAccounts}from\"./config\";import{sleep,reportError}from\"utils\";import{ConfigStatus}from\"./index\";var SPLIT=function(){var split=parseInt(new URLSearchParams(window.location.search).get(\"split\")||\"\");if(!isNaN(split)){return split;}}();export function fetchWithRetry(_x,_x2,_x3){return _fetchWithRetry.apply(this,arguments);}function _fetchWithRetry(){_fetchWithRetry=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,httpUrlRef,request){var httpUrl,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({status:ConfigStatus.Fetching});httpUrl=httpUrlRef.current;case 2:if(!(httpUrl===httpUrlRef.current)){_context.next=25;break;}response=void 0;_context.t0=request.route;_context.next=_context.t0===\"accounts\"?7:_context.t0===\"init\"?11:14;break;case 7:_context.next=9;return fetchAccounts(httpUrl,request.paymentAccount);case 9:response=_context.sent;return _context.abrupt(\"break\",14);case 11:_context.next=13;return fetchInit(httpUrl);case 13:response=_context.sent;case 14:if(!(httpUrl!==httpUrlRef.current)){_context.next=16;break;}return _context.abrupt(\"break\",25);case 16:if(!(response===\"retry\")){_context.next=21;break;}_context.next=19;return sleep(2000);case 19:_context.next=23;break;case 21:dispatch(response);return _context.abrupt(\"break\",25);case 23:_context.next=2;break;case 25:case\"end\":return _context.stop();}}},_callee);}));return _fetchWithRetry.apply(this,arguments);}function fetchInit(_x4){return _fetchInit.apply(this,arguments);}function _fetchInit(){_fetchInit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(httpUrl){var body,response,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;body=JSON.stringify({split:SPLIT});_context2.next=4;return fetch(new Request(httpUrl+\"/init\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:body}));case 4:response=_context2.sent;_context2.next=7;return response.json();case 7:data=_context2.sent;if(!(!(\"clusterUrl\"in data)||!(\"programId\"in data))){_context2.next=10;break;}throw new Error(\"Received invalid response\");case 10:return _context2.abrupt(\"return\",{status:ConfigStatus.Initialized,config:configFromInit(data)});case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](0);reportError(_context2.t0,\"/init failed\");return _context2.abrupt(\"return\",\"retry\");case 17:case\"end\":return _context2.stop();}}},_callee2,null,[[0,13]]);}));return _fetchInit.apply(this,arguments);}function fetchAccounts(_x5,_x6){return _fetchAccounts.apply(this,arguments);}function _fetchAccounts(){_fetchAccounts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(httpUrl,paymentAccount){var postData,body,response,error,data;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:postData={};if(SPLIT){postData.split=SPLIT;}if(paymentAccount){postData.paymentKey=Buffer.from(paymentAccount.secretKey).toString(\"base64\");}_context3.prev=3;body=JSON.stringify(postData);_context3.next=7;return fetch(new Request(httpUrl+\"/accounts\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:body}));case 7:response=_context3.sent;if(!(response.status===400)){_context3.next=12;break;}return _context3.abrupt(\"return\",{status:ConfigStatus.Failure,accounts:undefined});case 12:if(!(response.status===500)){_context3.next=19;break;}_context3.next=15;return response.text();case 15:error=_context3.sent;throw new Error(error);case 19:_context3.next=21;return response.json();case 21:data=_context3.sent;if(!(!(\"programAccounts\"in data)||!(\"feeAccounts\"in data)||!(\"accountCapacity\"in data))){_context3.next=24;break;}throw new Error(\"Received invalid response\");case 24:return _context3.abrupt(\"return\",{status:ConfigStatus.Ready,accounts:configFromAccounts(data)});case 25:_context3.next=31;break;case 27:_context3.prev=27;_context3.t0=_context3[\"catch\"](3);reportError(_context3.t0,\"/accounts failed\");return _context3.abrupt(\"return\",\"retry\");case 31:case\"end\":return _context3.stop();}}},_callee3,null,[[3,27]]);}));return _fetchAccounts.apply(this,arguments);}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/server/http/request.tsx"],"names":["configFromInit","configFromAccounts","sleep","reportError","ConfigStatus","SPLIT","split","parseInt","URLSearchParams","window","location","search","get","isNaN","fetchWithRetry","dispatch","httpUrlRef","request","status","Fetching","httpUrl","current","response","route","fetchAccounts","paymentAccount","fetchInit","body","JSON","stringify","fetch","Request","method","headers","json","data","Error","Initialized","config","postData","paymentKey","Buffer","from","secretKey","toString","Failure","accounts","undefined","text","error","Ready"],"mappings":"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","sourcesContent":["import { configFromInit, configFromAccounts } from \"./config\";\nimport { sleep, reportError } from \"utils\";\nimport { Action, Dispatch, ConfigStatus } from \"./index\";\nimport { Account } from \"@solana/web3.js\";\n\nconst SPLIT = ((): number | undefined => {\n  const split = parseInt(\n    new URLSearchParams(window.location.search).get(\"split\") || \"\"\n  );\n  if (!isNaN(split)) {\n    return split;\n  }\n})();\n\ntype InitRequest = {\n  route: \"init\";\n};\n\ntype AccountsRequest = {\n  route: \"accounts\";\n  paymentAccount: Account | undefined;\n};\n\ntype Request = AccountsRequest | InitRequest;\n\nexport async function fetchWithRetry(\n  dispatch: Dispatch,\n  httpUrlRef: React.MutableRefObject<string>,\n  request: Request\n) {\n  dispatch({\n    status: ConfigStatus.Fetching,\n  });\n\n  const httpUrl = httpUrlRef.current;\n  while (httpUrl === httpUrlRef.current) {\n    let response: Action | \"retry\";\n    switch (request.route) {\n      case \"accounts\": {\n        response = await fetchAccounts(httpUrl, request.paymentAccount);\n        break;\n      }\n      case \"init\": {\n        response = await fetchInit(httpUrl);\n      }\n    }\n\n    if (httpUrl !== httpUrlRef.current) break;\n    if (response === \"retry\") {\n      await sleep(2000);\n    } else {\n      dispatch(response);\n      break;\n    }\n  }\n}\n\nasync function fetchInit(httpUrl: string): Promise<Action | \"retry\"> {\n  try {\n    const body = JSON.stringify({ split: SPLIT });\n    const response = await fetch(\n      new Request(httpUrl + \"/init\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body,\n      })\n    );\n    const data = await response.json();\n    if (!(\"clusterUrl\" in data) || !(\"programId\" in data)) {\n      throw new Error(\"Received invalid response\");\n    }\n\n    return {\n      status: ConfigStatus.Initialized,\n      config: configFromInit(data),\n    };\n  } catch (err) {\n    reportError(err, \"/init failed\");\n    return \"retry\";\n  }\n}\n\nasync function fetchAccounts(\n  httpUrl: string,\n  paymentAccount: Account | undefined\n): Promise<Action | \"retry\"> {\n  type RefreshData = {\n    split?: number;\n    paymentKey?: string;\n  };\n\n  const postData: RefreshData = {};\n  if (SPLIT) {\n    postData.split = SPLIT;\n  }\n  if (paymentAccount) {\n    postData.paymentKey = Buffer.from(paymentAccount.secretKey).toString(\n      \"base64\"\n    );\n  }\n\n  try {\n    const body = JSON.stringify(postData);\n    const response = await fetch(\n      new Request(httpUrl + \"/accounts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body,\n      })\n    );\n\n    if (response.status === 400) {\n      return { status: ConfigStatus.Failure, accounts: undefined };\n    } else if (response.status === 500) {\n      const error = await response.text();\n      throw new Error(error);\n    } else {\n      const data = await response.json();\n      if (\n        !(\"programAccounts\" in data) ||\n        !(\"feeAccounts\" in data) ||\n        !(\"accountCapacity\" in data)\n      ) {\n        throw new Error(\"Received invalid response\");\n      }\n\n      return { status: ConfigStatus.Ready, accounts: configFromAccounts(data) };\n    }\n  } catch (err) {\n    reportError(err, \"/accounts failed\");\n    return \"retry\";\n  }\n}\n"]},"metadata":{},"sourceType":"module"}