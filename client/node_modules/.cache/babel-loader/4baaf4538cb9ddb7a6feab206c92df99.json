{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/server/index.tsx\";\nimport React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { isLocalHost } from \"../../utils\";\nimport { HttpProvider } from \"./http\";\nimport { SocketProvider } from \"./socket\";\nexport const DEFAULT_SERVER = isLocalHost() ? \"custom\" : \"mainnet-beta\";\nexport const SERVERS = isLocalHost() ? [\"custom\"] : [\"mainnet-beta\", \"testnet\", \"devnet\", \"custom\"];\nconst DEFAULT_CUSTOM_URL = `http://${window.location.hostname}:${process.env.PORT || 8080}`;\nexport function serverName(server) {\n  switch (server) {\n    case \"mainnet-beta\":\n      return \"Mainnet Beta\";\n\n    case \"testnet\":\n      return \"Testnet\";\n\n    case \"devnet\":\n      return \"Devnet\";\n\n    case \"custom\":\n      return \"Custom\";\n  }\n}\n\nfunction parseQuery(query) {\n  const clusterParam = query.get(\"cluster\");\n\n  switch (clusterParam) {\n    case \"devnet\":\n      return \"devnet\";\n\n    case \"testnet\":\n      return \"testnet\";\n\n    case \"mainnet-beta\":\n      return \"mainnet-beta\";\n\n    case \"custom\":\n      return \"custom\";\n\n    default:\n      return DEFAULT_SERVER;\n  }\n}\n\nconst ModalContext = React.createContext(undefined);\nconst ServerContext = React.createContext(undefined);\nexport function ServerProvider({\n  children\n}) {\n  const query = new URLSearchParams(useLocation().search);\n  const serverParam = parseQuery(query);\n  const [server, setServer] = React.useState(serverParam);\n  const [customUrl, setCustomUrl] = React.useState(DEFAULT_CUSTOM_URL);\n  const [showModal, setShowModal] = React.useState(false); // Update state when query params change\n\n  React.useEffect(() => {\n    setServer(serverParam);\n  }, [serverParam]);\n  const modalState = React.useMemo(() => {\n    return [showModal, setShowModal];\n  }, [showModal]);\n  return /*#__PURE__*/React.createElement(ServerContext.Provider, {\n    value: {\n      server,\n      setServer,\n      customUrl,\n      setCustomUrl\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalContext.Provider, {\n    value: modalState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(HttpProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SocketProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, children))));\n}\n\nfunction getServerUrl(server, customUrl) {\n  switch (server) {\n    case \"custom\":\n      {\n        return customUrl;\n      }\n\n    default:\n      {\n        const useHttp = isLocalHost();\n        let slug = server;\n\n        if (server === \"mainnet-beta\") {\n          slug = \"mainnet\";\n        }\n\n        return `${useHttp ? \"http\" : \"https\"}://break-solana-${slug}.herokuapp.com`;\n      }\n  }\n}\n\nexport function useServer() {\n  const context = React.useContext(ServerContext);\n\n  if (!context) {\n    throw new Error(`useServer must be used within a ServerProvider`);\n  }\n\n  const {\n    server,\n    customUrl\n  } = context;\n  const httpUrl = getServerUrl(server, customUrl);\n  const webSocketUrl = httpUrl.replace(\"http\", \"ws\");\n  return {\n    server,\n    httpUrl,\n    webSocketUrl,\n    name: serverName(server)\n  };\n}\nexport function useCustomUrl() {\n  const context = React.useContext(ServerContext);\n\n  if (!context) {\n    throw new Error(`useCustomUrl must be used within a ServerProvider`);\n  }\n\n  return [context.customUrl, context.setCustomUrl];\n}\nexport function useClusterModal() {\n  const context = React.useContext(ModalContext);\n\n  if (!context) {\n    throw new Error(`useClusterModal must be used within a ServerProvider`);\n  }\n\n  return context;\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/server/index.tsx"],"names":["React","useLocation","isLocalHost","HttpProvider","SocketProvider","DEFAULT_SERVER","SERVERS","DEFAULT_CUSTOM_URL","window","location","hostname","process","env","PORT","serverName","server","parseQuery","query","clusterParam","get","ModalContext","createContext","undefined","ServerContext","ServerProvider","children","URLSearchParams","search","serverParam","setServer","useState","customUrl","setCustomUrl","showModal","setShowModal","useEffect","modalState","useMemo","getServerUrl","useHttp","slug","useServer","context","useContext","Error","httpUrl","webSocketUrl","replace","name","useCustomUrl","useClusterModal"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { clusterApiUrl, Cluster } from \"@solana/web3.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { isLocalHost } from \"../../utils\";\nimport { HttpProvider } from \"./http\";\nimport { SocketProvider } from \"./socket\";\n\ntype Server = Cluster | \"custom\";\nexport const DEFAULT_SERVER = isLocalHost() ? \"custom\" : \"mainnet-beta\";\nexport const SERVERS: Server[] = isLocalHost()\n  ? [\"custom\"]\n  : [\"mainnet-beta\", \"testnet\", \"devnet\", \"custom\"];\n\nconst DEFAULT_CUSTOM_URL = `http://${window.location.hostname}:${\n  process.env.PORT || 8080\n}`;\n\nexport function serverName(server: Server): string {\n  switch (server) {\n    case \"mainnet-beta\":\n      return \"Mainnet Beta\";\n    case \"testnet\":\n      return \"Testnet\";\n    case \"devnet\":\n      return \"Devnet\";\n    case \"custom\":\n      return \"Custom\";\n  }\n}\n\nfunction parseQuery(query: URLSearchParams): Server {\n  const clusterParam = query.get(\"cluster\");\n  switch (clusterParam) {\n    case \"devnet\":\n      return \"devnet\";\n    case \"testnet\":\n      return \"testnet\";\n    case \"mainnet-beta\":\n      return \"mainnet-beta\";\n    case \"custom\":\n      return \"custom\";\n    default:\n      return DEFAULT_SERVER;\n  }\n}\n\ntype SetShowModal = React.Dispatch<React.SetStateAction<boolean>>;\ntype ModalState = [boolean, SetShowModal];\nconst ModalContext = React.createContext<ModalState | undefined>(undefined);\ntype SetCustomUrl = React.Dispatch<React.SetStateAction<string>>;\ntype SetServer = React.Dispatch<React.SetStateAction<Server>>;\ntype ServerState = {\n  server: Server;\n  setServer: SetServer;\n  customUrl: string;\n  setCustomUrl: SetCustomUrl;\n};\nconst ServerContext = React.createContext<ServerState | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function ServerProvider({ children }: ProviderProps) {\n  const query = new URLSearchParams(useLocation().search);\n  const serverParam = parseQuery(query);\n  const [server, setServer] = React.useState<Server>(serverParam);\n  const [customUrl, setCustomUrl] = React.useState<string>(DEFAULT_CUSTOM_URL);\n  const [showModal, setShowModal] = React.useState(false);\n\n  // Update state when query params change\n  React.useEffect(() => {\n    setServer(serverParam);\n  }, [serverParam]);\n\n  const modalState: ModalState = React.useMemo(() => {\n    return [showModal, setShowModal];\n  }, [showModal]);\n\n  return (\n    <ServerContext.Provider\n      value={{ server, setServer, customUrl, setCustomUrl }}\n    >\n      <ModalContext.Provider value={modalState}>\n        <HttpProvider>\n          <SocketProvider>{children}</SocketProvider>\n        </HttpProvider>\n      </ModalContext.Provider>\n    </ServerContext.Provider>\n  );\n}\n\nfunction getServerUrl(server: Server, customUrl: string) {\n  switch (server) {\n    case \"custom\": {\n      return customUrl;\n    }\n    default: {\n      const useHttp = isLocalHost();\n      let slug: string = server;\n      if (server === \"mainnet-beta\") {\n        slug = \"mainnet\";\n      }\n      return `${\n        useHttp ? \"http\" : \"https\"\n      }://break-solana-${slug}.herokuapp.com`;\n    }\n  }\n}\n\nexport function useServer() {\n  const context = React.useContext(ServerContext);\n  if (!context) {\n    throw new Error(`useServer must be used within a ServerProvider`);\n  }\n  const { server, customUrl } = context;\n  const httpUrl = getServerUrl(server, customUrl);\n  const webSocketUrl = httpUrl.replace(\"http\", \"ws\");\n\n  return {\n    server,\n    httpUrl,\n    webSocketUrl,\n    name: serverName(server),\n  };\n}\n\nexport function useCustomUrl(): [string, SetCustomUrl] {\n  const context = React.useContext(ServerContext);\n  if (!context) {\n    throw new Error(`useCustomUrl must be used within a ServerProvider`);\n  }\n  return [context.customUrl, context.setCustomUrl];\n}\n\nexport function useClusterModal() {\n  const context = React.useContext(ModalContext);\n  if (!context) {\n    throw new Error(`useClusterModal must be used within a ServerProvider`);\n  }\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}