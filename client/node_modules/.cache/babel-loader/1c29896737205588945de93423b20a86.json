{"ast":null,"code":"import _slicedToArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import*as React from\"react\";import{useCreatedCount}from\"./index\";var TPS_REFRESH_MS=100;var TPS_LOOK_BACK=10;export var TpsContext=/*#__PURE__*/React.createContext(undefined);export function TpsProvider(_ref){var children=_ref.children;var _React$useState=React.useState(0),_React$useState2=_slicedToArray(_React$useState,2),tps=_React$useState2[0],setTps=_React$useState2[1];var createdCount=useCreatedCount();var createdCountRef=React.useRef(0);createdCountRef.current=createdCount;React.useEffect(function(){var recentCounts=[];var timerId=setInterval(function(){if(createdCountRef.current===0){recentCounts.splice(0);setTps(0);return;}recentCounts.push(createdCountRef.current);while(recentCounts.length-1>TPS_LOOK_BACK){recentCounts.shift();}var ticksElapsed=recentCounts.length-1;if(ticksElapsed<=0)return;var oldTxCount=recentCounts[0];var latestTxCount=recentCounts[ticksElapsed];var tps=(latestTxCount-oldTxCount)/(TPS_REFRESH_MS/1000*ticksElapsed);setTps(Math.floor(tps));},TPS_REFRESH_MS);return function(){clearInterval(timerId);};},[]);return/*#__PURE__*/_jsx(TpsContext.Provider,{value:tps,children:children});}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/tps.tsx"],"names":["React","useCreatedCount","TPS_REFRESH_MS","TPS_LOOK_BACK","TpsContext","createContext","undefined","TpsProvider","children","useState","tps","setTps","createdCount","createdCountRef","useRef","current","useEffect","recentCounts","timerId","setInterval","splice","push","length","shift","ticksElapsed","oldTxCount","latestTxCount","Math","floor","clearInterval"],"mappings":"8MAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,eAAT,KAAgC,SAAhC,CAEA,GAAMC,CAAAA,cAAc,CAAG,GAAvB,CACA,GAAMC,CAAAA,aAAa,CAAG,EAAtB,CAEA,MAAO,IAAMC,CAAAA,UAAU,cAAGJ,KAAK,CAACK,aAAN,CAAwCC,SAAxC,CAAnB,CAEP,MAAO,SAASC,CAAAA,WAAT,MAAkD,IAA3BC,CAAAA,QAA2B,MAA3BA,QAA2B,qBACjCR,KAAK,CAACS,QAAN,CAAe,CAAf,CADiC,oDAChDC,GADgD,qBAC3CC,MAD2C,qBAEvD,GAAMC,CAAAA,YAAY,CAAGX,eAAe,EAApC,CACA,GAAMY,CAAAA,eAAe,CAAGb,KAAK,CAACc,MAAN,CAAa,CAAb,CAAxB,CACAD,eAAe,CAACE,OAAhB,CAA0BH,YAA1B,CAEAZ,KAAK,CAACgB,SAAN,CAAgB,UAAM,CACpB,GAAMC,CAAAA,YAAsB,CAAG,EAA/B,CACA,GAAMC,CAAAA,OAAO,CAAGC,WAAW,CAAC,UAAM,CAChC,GAAIN,eAAe,CAACE,OAAhB,GAA4B,CAAhC,CAAmC,CACjCE,YAAY,CAACG,MAAb,CAAoB,CAApB,EACAT,MAAM,CAAC,CAAD,CAAN,CACA,OACD,CAEDM,YAAY,CAACI,IAAb,CAAkBR,eAAe,CAACE,OAAlC,EACA,MAAOE,YAAY,CAACK,MAAb,CAAsB,CAAtB,CAA0BnB,aAAjC,CAAgD,CAC9Cc,YAAY,CAACM,KAAb,GACD,CAED,GAAMC,CAAAA,YAAY,CAAGP,YAAY,CAACK,MAAb,CAAsB,CAA3C,CACA,GAAIE,YAAY,EAAI,CAApB,CAAuB,OAEvB,GAAMC,CAAAA,UAAU,CAAGR,YAAY,CAAC,CAAD,CAA/B,CACA,GAAMS,CAAAA,aAAa,CAAGT,YAAY,CAACO,YAAD,CAAlC,CACA,GAAMd,CAAAA,GAAG,CACP,CAACgB,aAAa,CAAGD,UAAjB,GAAiCvB,cAAc,CAAG,IAAlB,CAA0BsB,YAA1D,CADF,CAEAb,MAAM,CAACgB,IAAI,CAACC,KAAL,CAAWlB,GAAX,CAAD,CAAN,CACD,CApB0B,CAoBxBR,cApBwB,CAA3B,CAqBA,MAAO,WAAM,CACX2B,aAAa,CAACX,OAAD,CAAb,CACD,CAFD,CAGD,CA1BD,CA0BG,EA1BH,EA4BA,mBAAO,KAAC,UAAD,CAAY,QAAZ,EAAqB,KAAK,CAAER,GAA5B,UAAkCF,QAAlC,EAAP,CACD","sourcesContent":["import * as React from \"react\";\nimport { useCreatedCount } from \"./index\";\n\nconst TPS_REFRESH_MS = 100;\nconst TPS_LOOK_BACK = 10;\n\nexport const TpsContext = React.createContext<number | undefined>(undefined);\ntype ProviderProps = { children: React.ReactNode };\nexport function TpsProvider({ children }: ProviderProps) {\n  const [tps, setTps] = React.useState(0);\n  const createdCount = useCreatedCount();\n  const createdCountRef = React.useRef(0);\n  createdCountRef.current = createdCount;\n\n  React.useEffect(() => {\n    const recentCounts: number[] = [];\n    const timerId = setInterval(() => {\n      if (createdCountRef.current === 0) {\n        recentCounts.splice(0);\n        setTps(0);\n        return;\n      }\n\n      recentCounts.push(createdCountRef.current);\n      while (recentCounts.length - 1 > TPS_LOOK_BACK) {\n        recentCounts.shift();\n      }\n\n      const ticksElapsed = recentCounts.length - 1;\n      if (ticksElapsed <= 0) return;\n\n      const oldTxCount = recentCounts[0];\n      const latestTxCount = recentCounts[ticksElapsed];\n      const tps =\n        (latestTxCount - oldTxCount) / ((TPS_REFRESH_MS / 1000) * ticksElapsed);\n      setTps(Math.floor(tps));\n    }, TPS_REFRESH_MS);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  return <TpsContext.Provider value={tps}>{children}</TpsContext.Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}