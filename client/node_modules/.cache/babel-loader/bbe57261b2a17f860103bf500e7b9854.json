{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/create.tsx\";\nimport * as React from \"react\";\nimport bs58 from \"bs58\";\nimport { useTargetSlotRef, useDispatch } from \"./index\";\nimport { useConfig, useAccounts } from \"providers/api\";\nimport { useBlockhash } from \"providers/blockhash\";\nimport { useSocket } from \"providers/socket\";\nimport { reportError } from \"utils\";\nimport { CreateTransactionRPC } from \"../../workers/create-transaction-rpc\";\nconst SEND_TIMEOUT_MS = 45000;\nconst RETRY_INTERVAL_MS = 500;\nexport const CreateTxContext = React.createContext(undefined);\nexport function CreateTxProvider({\n  children\n}) {\n  const createTx = React.useRef(() => {});\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts === null || accounts === void 0 ? void 0 : accounts.programAccounts[0].toBase58(); // Reset counter when program data accounts are refreshed\n\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n  const blockhash = useBlockhash();\n  const dispatch = useDispatch();\n  const socket = useSocket();\n  React.useEffect(() => {\n    createTx.current = () => {\n      if (!blockhash || !socket || !config || !accounts || !targetSlotRef.current) return;\n      const id = idCounter.current;\n\n      if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n        idCounter.current++;\n        createTransaction(blockhash, targetSlotRef.current, config.programId, accounts, id, dispatch, socket);\n      } else {\n        reportError(new Error(\"Account capacity exceeded\"), \"failed to create transaction\");\n      }\n    };\n  }, [blockhash, socket, config, accounts, dispatch, targetSlotRef]);\n  return /*#__PURE__*/React.createElement(CreateTxContext.Provider, {\n    value: createTx,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, children);\n}\nconst workerRPC = new CreateTransactionRPC();\nexport function createTransaction(blockhash, targetSlot, programId, accounts, trackingId, dispatch, socket) {\n  const {\n    feeAccounts,\n    programAccounts\n  } = accounts;\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n  workerRPC.createTransaction({\n    trackingId: trackingId,\n    blockhash: blockhash,\n    programId: programId.toBase58(),\n    programDataAccount: programDataAccount.toBase58(),\n    bitId: bitId,\n    feeAccountSecretKey: feeAccount.secretKey\n  }).then(response => {\n    const {\n      signature,\n      serializedTransaction\n    } = response;\n    const sentAt = performance.now();\n    const pendingTransaction = {\n      sentAt,\n      targetSlot\n    };\n    pendingTransaction.timeoutId = window.setTimeout(() => {\n      dispatch({\n        type: \"timeout\",\n        trackingId\n      });\n    }, SEND_TIMEOUT_MS);\n    const details = {\n      id: bitId,\n      feeAccount: feeAccount.publicKey,\n      programAccount: programDataAccount,\n      signature: bs58.encode(signature)\n    };\n    dispatch({\n      type: \"new\",\n      details,\n      trackingId,\n      pendingTransaction\n    });\n    setTimeout(() => {\n      const retryUntil = new URLSearchParams(window.location.search).get(\"retry_until\");\n\n      if (retryUntil === null || retryUntil !== \"disabled\") {\n        pendingTransaction.retryId = window.setInterval(() => {\n          if (socket.readyState === WebSocket.OPEN) {\n            socket.send(serializedTransaction);\n          }\n        }, RETRY_INTERVAL_MS);\n      }\n    }, 1);\n  }, error => {\n    console.error(error);\n  });\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/create.tsx"],"names":["React","bs58","useTargetSlotRef","useDispatch","useConfig","useAccounts","useBlockhash","useSocket","reportError","CreateTransactionRPC","SEND_TIMEOUT_MS","RETRY_INTERVAL_MS","CreateTxContext","createContext","undefined","CreateTxProvider","children","createTx","useRef","config","accounts","idCounter","targetSlotRef","programDataAccount","programAccounts","toBase58","useEffect","current","blockhash","dispatch","socket","id","accountCapacity","length","createTransaction","programId","Error","workerRPC","targetSlot","trackingId","feeAccounts","bitId","Math","floor","accountIndex","feeAccount","feeAccountSecretKey","secretKey","then","response","signature","serializedTransaction","sentAt","performance","now","pendingTransaction","timeoutId","window","setTimeout","type","details","publicKey","programAccount","encode","retryUntil","URLSearchParams","location","search","get","retryId","setInterval","readyState","WebSocket","OPEN","send","error","console"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  Blockhash,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport {\n  Dispatch,\n  PendingTransaction,\n  TransactionDetails,\n  useTargetSlotRef,\n  useDispatch,\n} from \"./index\";\nimport { AccountsConfig } from \"../api/config\";\nimport { useConfig, useAccounts } from \"providers/api\";\nimport { useBlockhash } from \"providers/blockhash\";\nimport { useSocket } from \"providers/socket\";\nimport { reportError } from \"utils\";\nimport {\n  CreateTransactionRPC,\n  CreateTransactionResponseMessage,\n} from \"../../workers/create-transaction-rpc\";\n\nconst SEND_TIMEOUT_MS = 45000;\nconst RETRY_INTERVAL_MS = 500;\n\nexport const CreateTxContext = React.createContext<\n  React.MutableRefObject<() => void | undefined> | undefined\n>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function CreateTxProvider({ children }: ProviderProps) {\n  const createTx = React.useRef(() => {});\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef<number>(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts?.programAccounts[0].toBase58();\n\n  // Reset counter when program data accounts are refreshed\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n\n  const blockhash = useBlockhash();\n  const dispatch = useDispatch();\n  const socket = useSocket();\n  React.useEffect(() => {\n    createTx.current = () => {\n      if (\n        !blockhash ||\n        !socket ||\n        !config ||\n        !accounts ||\n        !targetSlotRef.current\n      )\n        return;\n      const id = idCounter.current;\n      if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n        idCounter.current++;\n        createTransaction(\n          blockhash,\n          targetSlotRef.current,\n          config.programId,\n          accounts,\n          id,\n          dispatch,\n          socket\n        );\n      } else {\n        reportError(\n          new Error(\"Account capacity exceeded\"),\n          \"failed to create transaction\"\n        );\n      }\n    };\n  }, [blockhash, socket, config, accounts, dispatch, targetSlotRef]);\n\n  return (\n    <CreateTxContext.Provider value={createTx}>\n      {children}\n    </CreateTxContext.Provider>\n  );\n}\n\nconst workerRPC = new CreateTransactionRPC();\n\nexport function createTransaction(\n  blockhash: Blockhash,\n  targetSlot: number,\n  programId: PublicKey,\n  accounts: AccountsConfig,\n  trackingId: number,\n  dispatch: Dispatch,\n  socket: WebSocket\n) {\n  const { feeAccounts, programAccounts } = accounts;\n\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n\n  workerRPC\n    .createTransaction({\n      trackingId: trackingId,\n      blockhash: blockhash,\n      programId: programId.toBase58(),\n      programDataAccount: programDataAccount.toBase58(),\n      bitId: bitId,\n      feeAccountSecretKey: feeAccount.secretKey,\n    })\n    .then(\n      (response: CreateTransactionResponseMessage) => {\n        const { signature, serializedTransaction } = response;\n\n        const sentAt = performance.now();\n\n        const pendingTransaction: PendingTransaction = { sentAt, targetSlot };\n        pendingTransaction.timeoutId = window.setTimeout(() => {\n          dispatch({ type: \"timeout\", trackingId });\n        }, SEND_TIMEOUT_MS);\n\n        const details: TransactionDetails = {\n          id: bitId,\n          feeAccount: feeAccount.publicKey,\n          programAccount: programDataAccount,\n          signature: bs58.encode(signature),\n        };\n\n        dispatch({\n          type: \"new\",\n          details,\n          trackingId,\n          pendingTransaction,\n        });\n\n        setTimeout(() => {\n          const retryUntil = new URLSearchParams(window.location.search).get(\n            \"retry_until\"\n          );\n          if (retryUntil === null || retryUntil !== \"disabled\") {\n            pendingTransaction.retryId = window.setInterval(() => {\n              if (socket.readyState === WebSocket.OPEN) {\n                socket.send(serializedTransaction);\n              }\n            }, RETRY_INTERVAL_MS);\n          }\n        }, 1);\n      },\n      (error: any) => {\n        console.error(error);\n      }\n    );\n}\n"]},"metadata":{},"sourceType":"module"}