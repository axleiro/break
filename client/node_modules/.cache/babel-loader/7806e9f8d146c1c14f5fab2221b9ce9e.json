{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/create.tsx\";\nimport * as React from \"react\";\nimport bs58 from \"bs58\";\nimport { useTargetSlotRef, useDispatch } from \"./index\";\nimport { useConfig, useAccounts } from \"providers/api\";\nimport { reportError } from \"utils\";\nimport { CreateTransactionRPC } from \"../../workers/create-transaction-rpc\";\nimport { useWorkerState } from \"providers/worker\";\nconst SEND_TIMEOUT_MS = 45000;\nconst RETRY_INTERVAL_MS = 500;\nexport const CreateTxContext = React.createContext(undefined);\nexport function CreateTxProvider({\n  children\n}) {\n  const createTx = React.useRef(() => {});\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts === null || accounts === void 0 ? void 0 : accounts.programAccounts[0].toBase58();\n  const workerState = useWorkerState(); // Reset counter when program data accounts are refreshed\n\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    createTx.current = () => {\n      console.log(workerState);\n      if (workerState === \"loading\" || !config || !accounts || !targetSlotRef.current) return;\n      const id = idCounter.current;\n\n      if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n        idCounter.current++;\n        createTransaction(targetSlotRef.current, accounts, id, dispatch);\n      } else {\n        reportError(new Error(\"Account capacity exceeded\"), \"failed to create transaction\");\n      }\n    };\n  }, [config, accounts, workerState, dispatch, targetSlotRef]);\n  return /*#__PURE__*/React.createElement(CreateTxContext.Provider, {\n    value: createTx,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, children);\n}\nconst workerRPC = new CreateTransactionRPC();\nexport function createTransaction(targetSlot, accounts, trackingId, dispatch) {\n  const {\n    feeAccounts,\n    programAccounts\n  } = accounts;\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n  console.log(\"create tx\", trackingId);\n  workerRPC.createTransaction({\n    type: \"create\",\n    trackingId: trackingId\n  }).then(response => {\n    console.log(response);\n    const {\n      signature\n    } = response;\n    const sentAt = performance.now();\n    const pendingTransaction = {\n      sentAt,\n      targetSlot\n    };\n    pendingTransaction.timeoutId = window.setTimeout(() => {\n      dispatch({\n        type: \"timeout\",\n        trackingId\n      });\n    }, SEND_TIMEOUT_MS);\n    const details = {\n      id: bitId,\n      feeAccount: feeAccount.publicKey,\n      programAccount: programDataAccount,\n      signature: bs58.encode(signature)\n    };\n    dispatch({\n      type: \"new\",\n      details,\n      trackingId,\n      pendingTransaction\n    }); // setTimeout(() => {\n    //   const retryUntil = new URLSearchParams(window.location.search).get(\n    //     \"retry_until\"\n    //   );\n    //   if (retryUntil === null || retryUntil !== \"disabled\") {\n    //     pendingTransaction.retryId = window.setInterval(() => {\n    //       if (socket.readyState === WebSocket.OPEN) {\n    //         socket.send(serializedTransaction);\n    //       }\n    //     }, RETRY_INTERVAL_MS);\n    //   }\n    // }, 1);\n  }, error => {\n    console.error(error);\n  });\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/create.tsx"],"names":["React","bs58","useTargetSlotRef","useDispatch","useConfig","useAccounts","reportError","CreateTransactionRPC","useWorkerState","SEND_TIMEOUT_MS","RETRY_INTERVAL_MS","CreateTxContext","createContext","undefined","CreateTxProvider","children","createTx","useRef","config","accounts","idCounter","targetSlotRef","programDataAccount","programAccounts","toBase58","workerState","useEffect","current","dispatch","console","log","id","accountCapacity","length","createTransaction","Error","workerRPC","targetSlot","trackingId","feeAccounts","bitId","Math","floor","accountIndex","feeAccount","type","then","response","signature","sentAt","performance","now","pendingTransaction","timeoutId","window","setTimeout","details","publicKey","programAccount","encode","error"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Blockhash, PublicKey } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport {\n  Dispatch,\n  PendingTransaction,\n  TransactionDetails,\n  useTargetSlotRef,\n  useDispatch,\n} from \"./index\";\nimport { AccountsConfig } from \"../api/config\";\nimport { useConfig, useAccounts } from \"providers/api\";\nimport { reportError } from \"utils\";\nimport {\n  CreateTransactionRPC,\n  CreateTransactionResponseMessage,\n} from \"../../workers/create-transaction-rpc\";\nimport { useWorkerState } from \"providers/worker\";\n\nconst SEND_TIMEOUT_MS = 45000;\nconst RETRY_INTERVAL_MS = 500;\n\nexport const CreateTxContext = React.createContext<\n  React.MutableRefObject<() => void | undefined> | undefined\n>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function CreateTxProvider({ children }: ProviderProps) {\n  const createTx = React.useRef(() => {});\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef<number>(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts?.programAccounts[0].toBase58();\n  const workerState = useWorkerState();\n\n  // Reset counter when program data accounts are refreshed\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    createTx.current = () => {\n      console.log(workerState);\n      if (\n        workerState === \"loading\" ||\n        !config ||\n        !accounts ||\n        !targetSlotRef.current\n      )\n        return;\n      const id = idCounter.current;\n      if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n        idCounter.current++;\n        createTransaction(\n          targetSlotRef.current,\n          accounts,\n          id,\n          dispatch,\n        );\n      } else {\n        reportError(\n          new Error(\"Account capacity exceeded\"),\n          \"failed to create transaction\"\n        );\n      }\n    };\n  }, [config, accounts, workerState, dispatch, targetSlotRef]);\n\n  return (\n    <CreateTxContext.Provider value={createTx}>\n      {children}\n    </CreateTxContext.Provider>\n  );\n}\n\nconst workerRPC = new CreateTransactionRPC();\n\nexport function createTransaction(\n  targetSlot: number,\n  accounts: AccountsConfig,\n  trackingId: number,\n  dispatch: Dispatch,\n) {\n  const { feeAccounts, programAccounts } = accounts;\n\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n\n  console.log(\"create tx\", trackingId);\n\n  workerRPC\n    .createTransaction({\n      type: \"create\",\n      trackingId: trackingId,\n    })\n    .then(\n      (response: CreateTransactionResponseMessage) => {\n        console.log(response);\n        const { signature } = response;\n        const sentAt = performance.now();\n        const pendingTransaction: PendingTransaction = { sentAt, targetSlot };\n        pendingTransaction.timeoutId = window.setTimeout(() => {\n          dispatch({ type: \"timeout\", trackingId });\n        }, SEND_TIMEOUT_MS);\n\n        const details: TransactionDetails = {\n          id: bitId,\n          feeAccount: feeAccount.publicKey,\n          programAccount: programDataAccount,\n          signature: bs58.encode(signature),\n        };\n\n        dispatch({\n          type: \"new\",\n          details,\n          trackingId,\n          pendingTransaction,\n        });\n\n        // setTimeout(() => {\n        //   const retryUntil = new URLSearchParams(window.location.search).get(\n        //     \"retry_until\"\n        //   );\n        //   if (retryUntil === null || retryUntil !== \"disabled\") {\n        //     pendingTransaction.retryId = window.setInterval(() => {\n        //       if (socket.readyState === WebSocket.OPEN) {\n        //         socket.send(serializedTransaction);\n        //       }\n        //     }, RETRY_INTERVAL_MS);\n        //   }\n        // }, 1);\n      },\n      (error: any) => {\n        console.error(error);\n      }\n    );\n}\n"]},"metadata":{},"sourceType":"module"}