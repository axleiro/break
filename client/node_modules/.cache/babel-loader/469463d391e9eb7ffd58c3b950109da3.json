{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/api/index.tsx\";\nimport React from \"react\";\nimport { useServer } from \"providers/server\";\nimport { useBalance } from \"providers/balance\";\nimport { fetchWithRetry } from \"./request\";\nimport { useAccountState } from \"providers/account\";\nexport let ConfigStatus;\n\n(function (ConfigStatus) {\n  ConfigStatus[ConfigStatus[\"Initialized\"] = 0] = \"Initialized\";\n  ConfigStatus[ConfigStatus[\"Fetching\"] = 1] = \"Fetching\";\n  ConfigStatus[ConfigStatus[\"Ready\"] = 2] = \"Ready\";\n  ConfigStatus[ConfigStatus[\"Failure\"] = 3] = \"Failure\";\n})(ConfigStatus || (ConfigStatus = {}));\n\nfunction configReducer(state, action) {\n  switch (action.status) {\n    case ConfigStatus.Ready:\n    case ConfigStatus.Initialized:\n      {\n        return { ...state,\n          ...action\n        };\n      }\n\n    case ConfigStatus.Failure:\n      {\n        if (state.status === ConfigStatus.Fetching) {\n          return { ...state,\n            ...action\n          };\n        } else {\n          return state;\n        }\n      }\n\n    case ConfigStatus.Fetching:\n      {\n        return { ...state,\n          ...action,\n          accounts: undefined\n        };\n      }\n  }\n}\n\nconst StateContext = React.createContext(undefined);\nconst DispatchContext = React.createContext(undefined);\nexport function ApiProvider({\n  children\n}) {\n  const [state, dispatch] = React.useReducer(configReducer, {\n    status: ConfigStatus.Fetching\n  });\n  const {\n    httpUrl\n  } = useServer();\n  const httpUrlRef = React.useRef(httpUrl);\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    initConfig(dispatch, httpUrlRef);\n  }, [httpUrl]);\n  const config = state.config;\n  const paymentRequired = config === null || config === void 0 ? void 0 : config.paymentRequired;\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    if (paymentRequired !== false) return;\n    refreshAccounts(dispatch, httpUrlRef, undefined);\n  }, [httpUrl, paymentRequired]);\n  return /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DispatchContext.Provider, {\n    value: [httpUrlRef, dispatch],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, children));\n}\n\nasync function initConfig(dispatch, httpUrlRef) {\n  return fetchWithRetry(dispatch, httpUrlRef, {\n    route: \"init\"\n  });\n}\n\nasync function refreshAccounts(dispatch, httpUrlRef, paymentAccount) {\n  return fetchWithRetry(dispatch, httpUrlRef, {\n    route: \"accounts\",\n    paymentAccount\n  });\n}\n\nexport function useAccounts() {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useAccounts must be used within a ApiProvider`);\n  }\n\n  return context.accounts;\n}\nexport function useConfig() {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useConfig must be used within a ApiProvider`);\n  }\n\n  return context.config;\n}\nexport function useConnection() {\n  const config = useConfig();\n  return config === null || config === void 0 ? void 0 : config.connection;\n}\nexport function useIsFetching() {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useIsFetching must be used within a ApiProvider`);\n  }\n\n  return context.status === ConfigStatus.Fetching;\n}\nexport function useClusterParam() {\n  var _context$config;\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useClusterParam must be used within a ApiProvider`);\n  }\n\n  const cluster = context === null || context === void 0 ? void 0 : (_context$config = context.config) === null || _context$config === void 0 ? void 0 : _context$config.cluster;\n\n  if (cluster && cluster !== \"mainnet-beta\") {\n    return `cluster=${cluster}`;\n  } else {\n    return \"\";\n  }\n}\nexport function useClearAccounts() {\n  const context = React.useContext(DispatchContext);\n\n  if (!context) {\n    throw new Error(`useClearAccounts must be used within a ApiProvider`);\n  }\n\n  const [, dispatch] = context;\n  return React.useCallback(() => {\n    dispatch({\n      status: ConfigStatus.Fetching\n    });\n    dispatch({\n      status: ConfigStatus.Failure\n    });\n  }, [dispatch]);\n}\nexport function useRefreshAccounts() {\n  const context = React.useContext(DispatchContext);\n\n  if (!context) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n\n  const [httpUrlRef, dispatch] = context;\n  const config = useConfig();\n  const [paymentAccount] = useAccountState();\n  const paymentRequired = config === null || config === void 0 ? void 0 : config.paymentRequired;\n  const balance = useBalance();\n  const cost = config === null || config === void 0 ? void 0 : config.gameCost;\n  return React.useCallback(() => {\n    if (paymentRequired === undefined || cost === undefined) return;\n\n    if (paymentRequired) {\n      if (!paymentAccount || balance === \"loading\" || balance < cost) {\n        dispatch({\n          status: ConfigStatus.Fetching\n        });\n        dispatch({\n          status: ConfigStatus.Failure\n        });\n        return;\n      }\n\n      refreshAccounts(dispatch, httpUrlRef, paymentAccount);\n    } else {\n      refreshAccounts(dispatch, httpUrlRef, undefined);\n    }\n  }, [httpUrlRef, dispatch, paymentAccount, paymentRequired, balance, cost]);\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/api/index.tsx"],"names":["React","useServer","useBalance","fetchWithRetry","useAccountState","ConfigStatus","configReducer","state","action","status","Ready","Initialized","Failure","Fetching","accounts","undefined","StateContext","createContext","DispatchContext","ApiProvider","children","dispatch","useReducer","httpUrl","httpUrlRef","useRef","useEffect","current","initConfig","config","paymentRequired","refreshAccounts","route","paymentAccount","useAccounts","context","useContext","Error","useConfig","useConnection","connection","useIsFetching","useClusterParam","cluster","useClearAccounts","useCallback","useRefreshAccounts","balance","cost","gameCost"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Config, AccountsConfig } from \"./config\";\nimport { useServer } from \"providers/server\";\nimport { useBalance } from \"providers/balance\";\nimport { fetchWithRetry } from \"./request\";\nimport { Account, Connection } from \"@solana/web3.js\";\nimport { useAccountState } from \"providers/account\";\n\nexport enum ConfigStatus {\n  Initialized,\n  Fetching,\n  Ready,\n  Failure,\n}\n\ninterface State {\n  status: ConfigStatus;\n  config?: Config;\n  connection?: Connection;\n  accounts?: AccountsConfig;\n}\n\ninterface Initialized {\n  status: ConfigStatus.Initialized;\n  config: Config;\n}\n\ninterface Fetching {\n  status: ConfigStatus.Fetching;\n}\n\ninterface Ready {\n  status: ConfigStatus.Ready;\n  accounts: AccountsConfig;\n}\n\ninterface Failure {\n  status: ConfigStatus.Failure;\n  config?: undefined;\n  accounts?: undefined;\n}\n\nexport type Action = Initialized | Fetching | Ready | Failure;\nexport type Dispatch = (action: Action) => void;\n\nfunction configReducer(state: State, action: Action): State {\n  switch (action.status) {\n    case ConfigStatus.Ready:\n    case ConfigStatus.Initialized: {\n      return { ...state, ...action };\n    }\n    case ConfigStatus.Failure: {\n      if (state.status === ConfigStatus.Fetching) {\n        return { ...state, ...action };\n      } else {\n        return state;\n      }\n    }\n    case ConfigStatus.Fetching: {\n      return {\n        ...state,\n        ...action,\n        accounts: undefined,\n      };\n    }\n  }\n}\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<\n  [React.MutableRefObject<string>, Dispatch] | undefined\n>(undefined);\n\ntype ApiProviderProps = { children: React.ReactNode };\nexport function ApiProvider({ children }: ApiProviderProps) {\n  const [state, dispatch] = React.useReducer(configReducer, {\n    status: ConfigStatus.Fetching,\n  });\n\n  const { httpUrl } = useServer();\n  const httpUrlRef = React.useRef(httpUrl);\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    initConfig(dispatch, httpUrlRef);\n  }, [httpUrl]);\n\n  const config = state.config;\n  const paymentRequired = config?.paymentRequired;\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    if (paymentRequired !== false) return;\n    refreshAccounts(dispatch, httpUrlRef, undefined);\n  }, [httpUrl, paymentRequired]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={[httpUrlRef, dispatch]}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function initConfig(\n  dispatch: Dispatch,\n  httpUrlRef: React.MutableRefObject<string>\n): Promise<void> {\n  return fetchWithRetry(dispatch, httpUrlRef, { route: \"init\" });\n}\n\nasync function refreshAccounts(\n  dispatch: Dispatch,\n  httpUrlRef: React.MutableRefObject<string>,\n  paymentAccount: Account | undefined\n): Promise<void> {\n  return fetchWithRetry(dispatch, httpUrlRef, {\n    route: \"accounts\",\n    paymentAccount,\n  });\n}\n\nexport function useAccounts() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useAccounts must be used within a ApiProvider`);\n  }\n  return context.accounts;\n}\n\nexport function useConfig() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useConfig must be used within a ApiProvider`);\n  }\n  return context.config;\n}\n\nexport function useConnection() {\n  const config = useConfig();\n  return config?.connection;\n}\n\nexport function useIsFetching() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useIsFetching must be used within a ApiProvider`);\n  }\n  return context.status === ConfigStatus.Fetching;\n}\n\nexport function useClusterParam(): string {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useClusterParam must be used within a ApiProvider`);\n  }\n  const cluster = context?.config?.cluster;\n  if (cluster && cluster !== \"mainnet-beta\") {\n    return `cluster=${cluster}`;\n  } else {\n    return \"\";\n  }\n}\n\nexport function useClearAccounts() {\n  const context = React.useContext(DispatchContext);\n  if (!context) {\n    throw new Error(`useClearAccounts must be used within a ApiProvider`);\n  }\n\n  const [, dispatch] = context;\n  return React.useCallback(() => {\n    dispatch({ status: ConfigStatus.Fetching });\n    dispatch({ status: ConfigStatus.Failure });\n  }, [dispatch]);\n}\n\nexport function useRefreshAccounts() {\n  const context = React.useContext(DispatchContext);\n  if (!context) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n  const [httpUrlRef, dispatch] = context;\n  const config = useConfig();\n  const [paymentAccount] = useAccountState();\n  const paymentRequired = config?.paymentRequired;\n  const balance = useBalance();\n  const cost = config?.gameCost;\n  return React.useCallback(() => {\n    if (paymentRequired === undefined || cost === undefined) return;\n    if (paymentRequired) {\n      if (!paymentAccount || balance === \"loading\" || balance < cost) {\n        dispatch({ status: ConfigStatus.Fetching });\n        dispatch({ status: ConfigStatus.Failure });\n        return;\n      }\n      refreshAccounts(dispatch, httpUrlRef, paymentAccount);\n    } else {\n      refreshAccounts(dispatch, httpUrlRef, undefined);\n    }\n  }, [httpUrlRef, dispatch, paymentAccount, paymentRequired, balance, cost]);\n}\n"]},"metadata":{},"sourceType":"module"}