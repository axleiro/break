{"ast":null,"code":"import{Transaction,TransactionInstruction,PublicKey,Account}from\"@solana/web3.js\";import*as Bytes from\"utils/bytes\";var ctx=self;function createTransaction(message){var trackingId=message.trackingId,blockhash=message.blockhash,programId=message.programId,bitId=message.bitId,feeAccountSecretKey=message.feeAccountSecretKey,programDataAccount=message.programDataAccount;var instruction=new TransactionInstruction({keys:[{pubkey:new PublicKey(programDataAccount),isWritable:true,isSigner:false}],programId:new PublicKey(programId),data:Buffer.from(Bytes.instructionDataFromId(bitId))});var transaction=new Transaction();transaction.add(instruction);transaction.recentBlockhash=blockhash;transaction.sign(new Account(feeAccountSecretKey));var signatureBuffer=transaction.signature;ctx.postMessage({trackingId:trackingId,signature:signatureBuffer,serializedTransaction:transaction.serialize()});}ctx.onmessage=function(event){var message=event.data;try{createTransaction(message);}catch(error){ctx.postMessage({trackingId:message.trackingId,error:error});}};export default{};","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/workers/create-transaction-worker-script.ts"],"names":["Transaction","TransactionInstruction","PublicKey","Account","Bytes","ctx","self","createTransaction","message","trackingId","blockhash","programId","bitId","feeAccountSecretKey","programDataAccount","instruction","keys","pubkey","isWritable","isSigner","data","Buffer","from","instructionDataFromId","transaction","add","recentBlockhash","sign","signatureBuffer","signature","postMessage","serializedTransaction","serialize","onmessage","event","error"],"mappings":"AAAA,OACEA,WADF,CAEEC,sBAFF,CAGEC,SAHF,CAIEC,OAJF,KAKO,iBALP,CAMA,MAAO,GAAKC,CAAAA,KAAZ,KAAuB,aAAvB,CAGA,GAAMC,CAAAA,GAAW,CAAGC,IAApB,CAEA,QAASC,CAAAA,iBAAT,CAA2BC,OAA3B,CAA8D,IAE1DC,CAAAA,UAF0D,CAQxDD,OARwD,CAE1DC,UAF0D,CAG1DC,SAH0D,CAQxDF,OARwD,CAG1DE,SAH0D,CAI1DC,SAJ0D,CAQxDH,OARwD,CAI1DG,SAJ0D,CAK1DC,KAL0D,CAQxDJ,OARwD,CAK1DI,KAL0D,CAM1DC,mBAN0D,CAQxDL,OARwD,CAM1DK,mBAN0D,CAO1DC,kBAP0D,CAQxDN,OARwD,CAO1DM,kBAP0D,CAU5D,GAAMC,CAAAA,WAAW,CAAG,GAAId,CAAAA,sBAAJ,CAA2B,CAC7Ce,IAAI,CAAE,CACJ,CACEC,MAAM,CAAE,GAAIf,CAAAA,SAAJ,CAAcY,kBAAd,CADV,CAEEI,UAAU,CAAE,IAFd,CAGEC,QAAQ,CAAE,KAHZ,CADI,CADuC,CAQ7CR,SAAS,CAAE,GAAIT,CAAAA,SAAJ,CAAcS,SAAd,CARkC,CAS7CS,IAAI,CAAEC,MAAM,CAACC,IAAP,CAAYlB,KAAK,CAACmB,qBAAN,CAA4BX,KAA5B,CAAZ,CATuC,CAA3B,CAApB,CAYA,GAAMY,CAAAA,WAAW,CAAG,GAAIxB,CAAAA,WAAJ,EAApB,CACAwB,WAAW,CAACC,GAAZ,CAAgBV,WAAhB,EACAS,WAAW,CAACE,eAAZ,CAA8BhB,SAA9B,CACAc,WAAW,CAACG,IAAZ,CAAiB,GAAIxB,CAAAA,OAAJ,CAAYU,mBAAZ,CAAjB,EAEA,GAAMe,CAAAA,eAAe,CAAGJ,WAAW,CAACK,SAApC,CAEAxB,GAAG,CAACyB,WAAJ,CAAgB,CACdrB,UAAU,CAAEA,UADE,CAEdoB,SAAS,CAAED,eAFG,CAGdG,qBAAqB,CAAEP,WAAW,CAACQ,SAAZ,EAHT,CAAhB,EAKD,CAED3B,GAAG,CAAC4B,SAAJ,CAAgB,SAACC,KAAD,CAAgB,CAC9B,GAAM1B,CAAAA,OAAiC,CAAG0B,KAAK,CAACd,IAAhD,CAEA,GAAI,CACFb,iBAAiB,CAACC,OAAD,CAAjB,CACD,CAAC,MAAO2B,KAAP,CAAc,CACd9B,GAAG,CAACyB,WAAJ,CAAgB,CACdrB,UAAU,CAAED,OAAO,CAACC,UADN,CAEd0B,KAAK,CAAEA,KAFO,CAAhB,EAID,CACF,CAXD,CAaA,cAAe,EAAf","sourcesContent":["import {\n  Transaction,\n  TransactionInstruction,\n  PublicKey,\n  Account,\n} from \"@solana/web3.js\";\nimport * as Bytes from \"utils/bytes\";\nimport { CreateTransactionMessage } from \"./create-transaction-rpc\";\n\nconst ctx: Worker = self as any;\n\nfunction createTransaction(message: CreateTransactionMessage) {\n  const {\n    trackingId,\n    blockhash,\n    programId,\n    bitId,\n    feeAccountSecretKey,\n    programDataAccount,\n  } = message;\n\n  const instruction = new TransactionInstruction({\n    keys: [\n      {\n        pubkey: new PublicKey(programDataAccount),\n        isWritable: true,\n        isSigner: false,\n      },\n    ],\n    programId: new PublicKey(programId),\n    data: Buffer.from(Bytes.instructionDataFromId(bitId)),\n  });\n\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.recentBlockhash = blockhash;\n  transaction.sign(new Account(feeAccountSecretKey));\n\n  const signatureBuffer = transaction.signature;\n\n  ctx.postMessage({\n    trackingId: trackingId,\n    signature: signatureBuffer,\n    serializedTransaction: transaction.serialize(),\n  });\n}\n\nctx.onmessage = (event: any) => {\n  const message: CreateTransactionMessage = event.data;\n\n  try {\n    createTransaction(message);\n  } catch (error) {\n    ctx.postMessage({\n      trackingId: message.trackingId,\n      error: error,\n    });\n  }\n};\n\nexport default {} as typeof Worker & { new (): Worker };\n"]},"metadata":{},"sourceType":"module"}