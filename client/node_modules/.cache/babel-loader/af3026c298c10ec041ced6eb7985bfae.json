{"ast":null,"code":"import _slicedToArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import{useConnection}from\"./rpc\";import{jsx as _jsx}from\"react/jsx-runtime\";var SlotContext=/*#__PURE__*/React.createContext(undefined);var SlotMetricsContext=/*#__PURE__*/React.createContext(undefined);var SlotMetricsCounter=/*#__PURE__*/React.createContext(undefined);export function useTargetSlotRef(){var slotRef=React.useContext(SlotContext);if(!slotRef){throw new Error(\"useTargetSlotRef must be used within a SlotProvider\");}return slotRef;}export function useSlotTiming(){React.useContext(SlotMetricsCounter);var ref=React.useContext(SlotMetricsContext);if(!ref){throw new Error(\"useSlotMetricsRef must be used within a SlotProvider\");}return ref;}export function SlotProvider(_ref){var children=_ref.children;var connection=useConnection();var targetSlot=React.useRef();var slotMetrics=React.useRef(new Map());var _React$useState=React.useState(0),_React$useState2=_slicedToArray(_React$useState,2),metricsCounter=_React$useState2[0],setCounter=_React$useState2[1];React.useEffect(function(){if(connection===undefined)return;var disabledSlotSubscription=false;var slotSubscription=connection.onSlotChange(function(_ref2){var slot=_ref2.slot;targetSlot.current=slot;});var interval=setInterval(function(){setCounter(function(c){return c+1;});},1000);var slotUpdateSubscription=connection.onSlotUpdate(function(notification){// Remove if slot update api is active\nif(!disabledSlotSubscription){connection.removeSlotChangeListener(slotSubscription);disabledSlotSubscription=true;}var type=notification.type,slot=notification.slot,timestamp=notification.timestamp;if(type===\"firstShredReceived\"){targetSlot.current=Math.max(slot,targetSlot.current||0);slotMetrics.current.set(slot,{firstShred:timestamp});return;}var slotTiming=slotMetrics.current.get(slot);if(!slotTiming){return;}switch(type){case\"allShredsReceived\":{slotTiming.fullSlot=timestamp;break;}case\"startReplay\":{slotTiming.replayStart=timestamp;break;}case\"frozen\":{slotTiming.frozen=timestamp;var entryStats=notification.entry_stats;slotTiming.numEntries=entryStats.numEntries;slotTiming.numTransactions=entryStats.numTransactions;slotTiming.maxTpe=entryStats.maxTxPerEntry;break;}case\"voted\":{slotTiming.voted=timestamp;break;}case\"optimisticConfirmation\":{slotTiming.confirmed=timestamp;break;}case\"root\":{slotTiming.rooted=timestamp;break;}}});return function(){clearInterval(interval);if(!disabledSlotSubscription){connection.removeSlotChangeListener(slotSubscription);}connection.removeSlotUpdateListener(slotUpdateSubscription);};},[connection]);return/*#__PURE__*/_jsx(SlotContext.Provider,{value:targetSlot,children:/*#__PURE__*/_jsx(SlotMetricsContext.Provider,{value:slotMetrics,children:/*#__PURE__*/_jsx(SlotMetricsCounter.Provider,{value:metricsCounter,children:children})})});}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/slot.tsx"],"names":["React","useConnection","SlotContext","createContext","undefined","SlotMetricsContext","SlotMetricsCounter","useTargetSlotRef","slotRef","useContext","Error","useSlotTiming","ref","SlotProvider","children","connection","targetSlot","useRef","slotMetrics","Map","useState","metricsCounter","setCounter","useEffect","disabledSlotSubscription","slotSubscription","onSlotChange","slot","current","interval","setInterval","c","slotUpdateSubscription","onSlotUpdate","notification","removeSlotChangeListener","type","timestamp","Math","max","set","firstShred","slotTiming","get","fullSlot","replayStart","frozen","entryStats","entry_stats","numEntries","numTransactions","maxTpe","maxTxPerEntry","voted","confirmed","rooted","clearInterval","removeSlotUpdateListener"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useConnection } from \"./rpc\";\n\nconst SlotContext = React.createContext<\n  React.MutableRefObject<number | undefined> | undefined\n>(undefined);\n\nconst SlotMetricsContext = React.createContext<\n  React.MutableRefObject<Map<number, SlotTiming>> | undefined\n>(undefined);\n\nconst SlotMetricsCounter = React.createContext<number | undefined>(undefined);\n\nexport type SlotTiming = {\n  firstShred: number;\n  fullSlot?: number;\n  replayStart?: number;\n  frozen?: number;\n  numEntries?: number;\n  numTransactions?: number;\n  maxTpe?: number;\n  voted?: number;\n  confirmed?: number;\n  rooted?: number;\n};\n\nexport function useTargetSlotRef() {\n  const slotRef = React.useContext(SlotContext);\n  if (!slotRef) {\n    throw new Error(`useTargetSlotRef must be used within a SlotProvider`);\n  }\n\n  return slotRef;\n}\n\nexport function useSlotTiming() {\n  React.useContext(SlotMetricsCounter);\n  const ref = React.useContext(SlotMetricsContext);\n  if (!ref) {\n    throw new Error(`useSlotMetricsRef must be used within a SlotProvider`);\n  }\n\n  return ref;\n}\n\ntype ProviderProps = { children: React.ReactNode };\nexport function SlotProvider({ children }: ProviderProps) {\n  const connection = useConnection();\n  const targetSlot = React.useRef<number>();\n  const slotMetrics = React.useRef(new Map<number, SlotTiming>());\n  const [metricsCounter, setCounter] = React.useState(0);\n\n  React.useEffect(() => {\n    if (connection === undefined) return;\n\n    let disabledSlotSubscription = false;\n    const slotSubscription = connection.onSlotChange(({ slot }) => {\n      targetSlot.current = slot;\n    });\n\n    const interval = setInterval(() => {\n      setCounter((c) => c + 1);\n    }, 1000);\n\n    const slotUpdateSubscription = connection.onSlotUpdate((notification) => {\n      // Remove if slot update api is active\n      if (!disabledSlotSubscription) {\n        connection.removeSlotChangeListener(slotSubscription);\n        disabledSlotSubscription = true;\n      }\n\n      const { type, slot, timestamp } = notification;\n      if (type === \"firstShredReceived\") {\n        targetSlot.current = Math.max(slot, targetSlot.current || 0);\n        slotMetrics.current.set(slot, {\n          firstShred: timestamp,\n        });\n        return;\n      }\n\n      const slotTiming = slotMetrics.current.get(slot);\n      if (!slotTiming) {\n        return;\n      }\n\n      switch (type) {\n        case \"allShredsReceived\": {\n          slotTiming.fullSlot = timestamp;\n          break;\n        }\n        case \"startReplay\": {\n          slotTiming.replayStart = timestamp;\n          break;\n        }\n        case \"frozen\": {\n          slotTiming.frozen = timestamp;\n          const entryStats = (notification as any).entry_stats;\n          slotTiming.numEntries = entryStats.numEntries;\n          slotTiming.numTransactions = entryStats.numTransactions;\n          slotTiming.maxTpe = entryStats.maxTxPerEntry;\n          break;\n        }\n        case \"voted\": {\n          slotTiming.voted = timestamp;\n          break;\n        }\n        case \"optimisticConfirmation\": {\n          slotTiming.confirmed = timestamp;\n          break;\n        }\n        case \"root\": {\n          slotTiming.rooted = timestamp;\n          break;\n        }\n      }\n    });\n\n    return () => {\n      clearInterval(interval);\n      if (!disabledSlotSubscription) {\n        connection.removeSlotChangeListener(slotSubscription);\n      }\n      connection.removeSlotUpdateListener(slotUpdateSubscription);\n    };\n  }, [connection]);\n\n  return (\n    <SlotContext.Provider value={targetSlot}>\n      <SlotMetricsContext.Provider value={slotMetrics}>\n        <SlotMetricsCounter.Provider value={metricsCounter}>\n          {children}\n        </SlotMetricsCounter.Provider>\n      </SlotMetricsContext.Provider>\n    </SlotContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}