{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/slot.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useConnection } from \"./rpc\";\nconst SlotContext = /*#__PURE__*/React.createContext(undefined);\nexport function SlotProvider({\n  children\n}) {\n  _s();\n\n  const connection = useConnection();\n  const targetSlot = React.useRef();\n  const slotMetrics = React.useRef(new Map());\n  React.useEffect(() => {\n    if (connection === undefined) return;\n    const slotUpdateSubscription = connection.onSlotUpdate(({\n      type,\n      slot,\n      timestamp\n    }) => {\n      if (type === \"firstShredReceived\") {\n        targetSlot.current = slot;\n      }\n    });\n    return () => {\n      connection.removeSlotUpdateListener(slotUpdateSubscription);\n    };\n  }, [connection]);\n  return /*#__PURE__*/_jsxDEV(SlotContext.Provider, {\n    value: targetSlot,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SlotProvider, \"vUL+Zj3BC756+0/D19auJ277CjU=\", false, function () {\n  return [useConnection];\n});\n\n_c = SlotProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SlotProvider\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/slot.tsx"],"names":["React","useConnection","SlotContext","createContext","undefined","SlotProvider","children","connection","targetSlot","useRef","slotMetrics","Map","useEffect","slotUpdateSubscription","onSlotUpdate","type","slot","timestamp","current","removeSlotUpdateListener"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,QAA8B,OAA9B;AAEA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAElBC,SAFkB,CAApB;AAWA,OAAO,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmD;AAAA;;AACxD,QAAMC,UAAU,GAAGN,aAAa,EAAhC;AACA,QAAMO,UAAU,GAAGR,KAAK,CAACS,MAAN,EAAnB;AACA,QAAMC,WAAW,GAAGV,KAAK,CAACS,MAAN,CAAa,IAAIE,GAAJ,EAAb,CAApB;AAEAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAIL,UAAU,KAAKH,SAAnB,EAA8B;AAC9B,UAAMS,sBAAsB,GAAGN,UAAU,CAACO,YAAX,CAAwB,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA;AAAd,KAAD,KAA+B;AAClF,UAAIF,IAAI,KAAK,oBAAb,EAAmC;AAC/BP,QAAAA,UAAU,CAACU,OAAX,GAAqBF,IAArB;AACH;AACJ,KAJ8B,CAA/B;AAMA,WAAO,MAAM;AACXT,MAAAA,UAAU,CAACY,wBAAX,CAAoCN,sBAApC;AACD,KAFD;AAGD,GAXD,EAWG,CAACN,UAAD,CAXH;AAaA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,UAA7B;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAvBeD,Y;UACKJ,a;;;KADLI,Y","sourcesContent":["import React from \"react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useConnection } from \"./rpc\";\n\nconst SlotContext = React.createContext<\n  React.MutableRefObject<number | undefined> | undefined\n>(undefined);\n\ntype SlotTiming = {\n    firstShred: number;\n    frozen: number;\n    confirmed: number;\n};\n\ntype ProviderProps = { children: React.ReactNode };\nexport function SlotProvider({ children }: ProviderProps) {\n  const connection = useConnection();\n  const targetSlot = React.useRef<number>();\n  const slotMetrics = React.useRef(new Map<number, SlotTiming>());\n\n  React.useEffect(() => {\n    if (connection === undefined) return;\n    const slotUpdateSubscription = connection.onSlotUpdate(({ type, slot, timestamp }) => {\n        if (type === \"firstShredReceived\") {\n            targetSlot.current = slot;\n        }\n    });\n\n    return () => {\n      connection.removeSlotUpdateListener(slotUpdateSubscription);\n    };\n  }, [connection]);\n\n  return (\n    <SlotContext.Provider value={targetSlot}>\n        {children}\n    </SlotContext.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}