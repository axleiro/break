{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React from \"react\";\nexport let ConfigStatus;\n\n(function (ConfigStatus) {\n  ConfigStatus[ConfigStatus[\"Initialized\"] = 0] = \"Initialized\";\n  ConfigStatus[ConfigStatus[\"Fetching\"] = 1] = \"Fetching\";\n  ConfigStatus[ConfigStatus[\"Ready\"] = 2] = \"Ready\";\n  ConfigStatus[ConfigStatus[\"Failure\"] = 3] = \"Failure\";\n})(ConfigStatus || (ConfigStatus = {}));\n\nfunction configReducer(state, action) {\n  switch (action.status) {\n    case ConfigStatus.Ready:\n    case ConfigStatus.Initialized:\n      {\n        return { ...state,\n          ...action\n        };\n      }\n\n    case ConfigStatus.Failure:\n      {\n        if (state.status === ConfigStatus.Fetching) {\n          return { ...state,\n            ...action\n          };\n        } else {\n          return state;\n        }\n      }\n\n    case ConfigStatus.Fetching:\n      {\n        return { ...state,\n          ...action,\n          accounts: undefined\n        };\n      }\n  }\n}\n\nconst StateContext = /*#__PURE__*/React.createContext(undefined);\nexport function useAccounts() {\n  _s();\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useAccounts must be used within a ApiProvider`);\n  }\n\n  return context.accounts;\n}\n\n_s(useAccounts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useConfig() {\n  _s2();\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useConfig must be used within a ApiProvider`);\n  }\n\n  return context.config;\n}\n\n_s2(useConfig, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useIsFetching() {\n  _s3();\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useIsFetching must be used within a ApiProvider`);\n  }\n\n  return context.status === ConfigStatus.Fetching;\n}\n\n_s3(useIsFetching, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useClusterParam() {\n  _s4();\n\n  var _context$config;\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useClusterParam must be used within a ApiProvider`);\n  }\n\n  const cluster = context === null || context === void 0 ? void 0 : (_context$config = context.config) === null || _context$config === void 0 ? void 0 : _context$config.cluster;\n\n  if (cluster && cluster !== \"mainnet-beta\") {\n    return `cluster=${cluster}`;\n  } else {\n    return \"\";\n  }\n}\n\n_s4(useClusterParam, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/server/http/index.tsx"],"names":["React","ConfigStatus","configReducer","state","action","status","Ready","Initialized","Failure","Fetching","accounts","undefined","StateContext","createContext","useAccounts","context","useContext","Error","useConfig","config","useIsFetching","useClusterParam","cluster"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,WAAYC,YAAZ;;WAAYA,Y;AAAAA,EAAAA,Y,CAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;GAAAA,Y,KAAAA,Y;;AAqCZ,SAASC,aAAT,CAAuBC,KAAvB,EAAqCC,MAArC,EAA4D;AAC1D,UAAQA,MAAM,CAACC,MAAf;AACE,SAAKJ,YAAY,CAACK,KAAlB;AACA,SAAKL,YAAY,CAACM,WAAlB;AAA+B;AAC7B,eAAO,EAAE,GAAGJ,KAAL;AAAY,aAAGC;AAAf,SAAP;AACD;;AACD,SAAKH,YAAY,CAACO,OAAlB;AAA2B;AACzB,YAAIL,KAAK,CAACE,MAAN,KAAiBJ,YAAY,CAACQ,QAAlC,EAA4C;AAC1C,iBAAO,EAAE,GAAGN,KAAL;AAAY,eAAGC;AAAf,WAAP;AACD,SAFD,MAEO;AACL,iBAAOD,KAAP;AACD;AACF;;AACD,SAAKF,YAAY,CAACQ,QAAlB;AAA4B;AAC1B,eAAO,EACL,GAAGN,KADE;AAEL,aAAGC,MAFE;AAGLM,UAAAA,QAAQ,EAAEC;AAHL,SAAP;AAKD;AAlBH;AAoBD;;AAED,MAAMC,YAAY,gBAAGZ,KAAK,CAACa,aAAN,CAAuCF,SAAvC,CAArB;AAEA,OAAO,SAASG,WAAT,GAAuB;AAAA;;AAC5B,QAAMC,OAAO,GAAGf,KAAK,CAACgB,UAAN,CAAiBJ,YAAjB,CAAhB;;AACA,MAAI,CAACG,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,CAAW,+CAAX,CAAN;AACD;;AACD,SAAOF,OAAO,CAACL,QAAf;AACD;;GANeI,W;;AAQhB,OAAO,SAASI,SAAT,GAAqB;AAAA;;AAC1B,QAAMH,OAAO,GAAGf,KAAK,CAACgB,UAAN,CAAiBJ,YAAjB,CAAhB;;AACA,MAAI,CAACG,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,CAAW,6CAAX,CAAN;AACD;;AACD,SAAOF,OAAO,CAACI,MAAf;AACD;;IANeD,S;;AAQhB,OAAO,SAASE,aAAT,GAAyB;AAAA;;AAC9B,QAAML,OAAO,GAAGf,KAAK,CAACgB,UAAN,CAAiBJ,YAAjB,CAAhB;;AACA,MAAI,CAACG,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,CAAW,iDAAX,CAAN;AACD;;AACD,SAAOF,OAAO,CAACV,MAAR,KAAmBJ,YAAY,CAACQ,QAAvC;AACD;;IANeW,a;;AAQhB,OAAO,SAASC,eAAT,GAAmC;AAAA;;AAAA;;AACxC,QAAMN,OAAO,GAAGf,KAAK,CAACgB,UAAN,CAAiBJ,YAAjB,CAAhB;;AACA,MAAI,CAACG,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,CAAW,mDAAX,CAAN;AACD;;AACD,QAAMK,OAAO,GAAGP,OAAH,aAAGA,OAAH,0CAAGA,OAAO,CAAEI,MAAZ,oDAAG,gBAAiBG,OAAjC;;AACA,MAAIA,OAAO,IAAIA,OAAO,KAAK,cAA3B,EAA2C;AACzC,WAAQ,WAAUA,OAAQ,EAA1B;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF;;IAXeD,e","sourcesContent":["import React from \"react\";\nimport { Config, AccountsConfig } from \"./config\";\nimport { Connection } from \"@solana/web3.js\";\n\nexport enum ConfigStatus {\n  Initialized,\n  Fetching,\n  Ready,\n  Failure,\n}\n\ninterface State {\n  status: ConfigStatus;\n  config?: Config;\n  connection?: Connection;\n  accounts?: AccountsConfig;\n}\n\ninterface Initialized {\n  status: ConfigStatus.Initialized;\n  config: Config;\n}\n\ninterface Fetching {\n  status: ConfigStatus.Fetching;\n}\n\ninterface Ready {\n  status: ConfigStatus.Ready;\n  accounts: AccountsConfig;\n}\n\ninterface Failure {\n  status: ConfigStatus.Failure;\n  config?: undefined;\n  accounts?: undefined;\n}\n\nexport type Action = Initialized | Fetching | Ready | Failure;\nexport type Dispatch = (action: Action) => void;\n\nfunction configReducer(state: State, action: Action): State {\n  switch (action.status) {\n    case ConfigStatus.Ready:\n    case ConfigStatus.Initialized: {\n      return { ...state, ...action };\n    }\n    case ConfigStatus.Failure: {\n      if (state.status === ConfigStatus.Fetching) {\n        return { ...state, ...action };\n      } else {\n        return state;\n      }\n    }\n    case ConfigStatus.Fetching: {\n      return {\n        ...state,\n        ...action,\n        accounts: undefined,\n      };\n    }\n  }\n}\n\nconst StateContext = React.createContext<State | undefined>(undefined);\n\nexport function useAccounts() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useAccounts must be used within a ApiProvider`);\n  }\n  return context.accounts;\n}\n\nexport function useConfig() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useConfig must be used within a ApiProvider`);\n  }\n  return context.config;\n}\n\nexport function useIsFetching() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useIsFetching must be used within a ApiProvider`);\n  }\n  return context.status === ConfigStatus.Fetching;\n}\n\nexport function useClusterParam(): string {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useClusterParam must be used within a ApiProvider`);\n  }\n  const cluster = context?.config?.cluster;\n  if (cluster && cluster !== \"mainnet-beta\") {\n    return `cluster=${cluster}`;\n  } else {\n    return \"\";\n  }\n}\n"]},"metadata":{},"sourceType":"module"}