{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/balance.tsx\";\nimport * as React from \"react\";\nimport { useConfig } from \"./api\";\nimport { useAccountState } from \"./account\";\nimport { reportError } from \"utils\";\nconst StateContext = React.createContext(undefined);\nexport function BalanceProvider({\n  children\n}) {\n  const [balance, setBalance] = React.useState(\"loading\");\n  const [account] = useAccountState();\n  const config = useConfig();\n  const connection = config === null || config === void 0 ? void 0 : config.connection;\n  const paymentRequired = config === null || config === void 0 ? void 0 : config.paymentRequired;\n  const refreshBalance = React.useCallback(() => {\n    if (account === undefined || connection === undefined || paymentRequired !== true) {\n      setBalance(\"loading\");\n      return;\n    }\n\n    (async () => {\n      try {\n        const balance = await connection.getBalance(account.publicKey, \"singleGossip\");\n        setBalance(balance);\n      } catch (err) {\n        reportError(err, \"Failed to refresh balance\");\n      }\n    })();\n  }, [account, connection, paymentRequired]);\n  React.useEffect(() => {\n    refreshBalance();\n\n    const onChange = () => {\n      if (document.visibilityState !== \"visible\") return;\n      refreshBalance();\n    };\n\n    document.addEventListener(\"visibilitychange\", onChange);\n    return () => document.removeEventListener(\"visibilitychange\", onChange);\n  }, [refreshBalance]);\n  React.useEffect(() => {\n    if (account === undefined || connection === undefined || paymentRequired !== true) return;\n    const subscription = connection.onAccountChange(account.publicKey, accountInfo => setBalance(accountInfo.lamports), \"singleGossip\");\n    return () => {\n      connection.removeAccountChangeListener(subscription);\n    };\n  }, [account, connection, paymentRequired]);\n  return /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: balance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport function useBalance() {\n  const state = React.useContext(StateContext);\n\n  if (state === undefined) {\n    throw new Error(`useBalance must be used within a BalanceProvider`);\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/balance.tsx"],"names":["React","useConfig","useAccountState","reportError","StateContext","createContext","undefined","BalanceProvider","children","balance","setBalance","useState","account","config","connection","paymentRequired","refreshBalance","useCallback","getBalance","publicKey","err","useEffect","onChange","document","visibilityState","addEventListener","removeEventListener","subscription","onAccountChange","accountInfo","lamports","removeAccountChangeListener","useBalance","state","useContext","Error"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,WAAT,QAA4B,OAA5B;AAGA,MAAMC,YAAY,GAAGJ,KAAK,CAACK,aAAN,CAAyCC,SAAzC,CAArB;AAGA,OAAO,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAA8C;AACnD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,KAAK,CAACW,QAAN,CAAwB,SAAxB,CAA9B;AACA,QAAM,CAACC,OAAD,IAAYV,eAAe,EAAjC;AACA,QAAMW,MAAM,GAAGZ,SAAS,EAAxB;AACA,QAAMa,UAAU,GAAGD,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEC,UAA3B;AACA,QAAMC,eAAe,GAAGF,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEE,eAAhC;AAEA,QAAMC,cAAc,GAAGhB,KAAK,CAACiB,WAAN,CAAkB,MAAM;AAC7C,QACEL,OAAO,KAAKN,SAAZ,IACAQ,UAAU,KAAKR,SADf,IAEAS,eAAe,KAAK,IAHtB,EAIE;AACAL,MAAAA,UAAU,CAAC,SAAD,CAAV;AACA;AACD;;AAED,KAAC,YAAY;AACX,UAAI;AACF,cAAMD,OAAO,GAAG,MAAMK,UAAU,CAACI,UAAX,CACpBN,OAAO,CAACO,SADY,EAEpB,cAFoB,CAAtB;AAIAT,QAAAA,UAAU,CAACD,OAAD,CAAV;AACD,OAND,CAME,OAAOW,GAAP,EAAY;AACZjB,QAAAA,WAAW,CAACiB,GAAD,EAAM,2BAAN,CAAX;AACD;AACF,KAVD;AAWD,GArBsB,EAqBpB,CAACR,OAAD,EAAUE,UAAV,EAAsBC,eAAtB,CArBoB,CAAvB;AAuBAf,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AACpBL,IAAAA,cAAc;;AACd,UAAMM,QAAQ,GAAG,MAAM;AACrB,UAAIC,QAAQ,CAACC,eAAT,KAA6B,SAAjC,EAA4C;AAC5CR,MAAAA,cAAc;AACf,KAHD;;AAKAO,IAAAA,QAAQ,CAACE,gBAAT,CAA0B,kBAA1B,EAA8CH,QAA9C;AACA,WAAO,MAAMC,QAAQ,CAACG,mBAAT,CAA6B,kBAA7B,EAAiDJ,QAAjD,CAAb;AACD,GATD,EASG,CAACN,cAAD,CATH;AAWAhB,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AACpB,QACET,OAAO,KAAKN,SAAZ,IACAQ,UAAU,KAAKR,SADf,IAEAS,eAAe,KAAK,IAHtB,EAKE;AACF,UAAMY,YAAY,GAAGb,UAAU,CAACc,eAAX,CACnBhB,OAAO,CAACO,SADW,EAElBU,WAAD,IAAsCnB,UAAU,CAACmB,WAAW,CAACC,QAAb,CAF7B,EAGnB,cAHmB,CAArB;AAMA,WAAO,MAAM;AACXhB,MAAAA,UAAU,CAACiB,2BAAX,CAAuCJ,YAAvC;AACD,KAFD;AAGD,GAhBD,EAgBG,CAACf,OAAD,EAAUE,UAAV,EAAsBC,eAAtB,CAhBH;AAkBA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEN,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwCD,QAAxC,CADF;AAGD;AAED,OAAO,SAASwB,UAAT,GAA+B;AACpC,QAAMC,KAAK,GAAGjC,KAAK,CAACkC,UAAN,CAAiB9B,YAAjB,CAAd;;AACA,MAAI6B,KAAK,KAAK3B,SAAd,EAAyB;AACvB,UAAM,IAAI6B,KAAJ,CAAW,kDAAX,CAAN;AACD;;AACD,SAAOF,KAAP;AACD","sourcesContent":["import * as React from \"react\";\nimport { AccountInfo } from \"@solana/web3.js\";\nimport { useConfig } from \"./api\";\nimport { useAccountState } from \"./account\";\nimport { reportError } from \"utils\";\n\ntype Balance = number | \"loading\";\nconst StateContext = React.createContext<Balance | undefined>(undefined);\n\ntype Props = { children: React.ReactNode };\nexport function BalanceProvider({ children }: Props) {\n  const [balance, setBalance] = React.useState<Balance>(\"loading\");\n  const [account] = useAccountState();\n  const config = useConfig();\n  const connection = config?.connection;\n  const paymentRequired = config?.paymentRequired;\n\n  const refreshBalance = React.useCallback(() => {\n    if (\n      account === undefined ||\n      connection === undefined ||\n      paymentRequired !== true\n    ) {\n      setBalance(\"loading\");\n      return;\n    }\n\n    (async () => {\n      try {\n        const balance = await connection.getBalance(\n          account.publicKey,\n          \"singleGossip\"\n        );\n        setBalance(balance);\n      } catch (err) {\n        reportError(err, \"Failed to refresh balance\");\n      }\n    })();\n  }, [account, connection, paymentRequired]);\n\n  React.useEffect(() => {\n    refreshBalance();\n    const onChange = () => {\n      if (document.visibilityState !== \"visible\") return;\n      refreshBalance();\n    };\n\n    document.addEventListener(\"visibilitychange\", onChange);\n    return () => document.removeEventListener(\"visibilitychange\", onChange);\n  }, [refreshBalance]);\n\n  React.useEffect(() => {\n    if (\n      account === undefined ||\n      connection === undefined ||\n      paymentRequired !== true\n    )\n      return;\n    const subscription = connection.onAccountChange(\n      account.publicKey,\n      (accountInfo: AccountInfo<Buffer>) => setBalance(accountInfo.lamports),\n      \"singleGossip\"\n    );\n\n    return () => {\n      connection.removeAccountChangeListener(subscription);\n    };\n  }, [account, connection, paymentRequired]);\n\n  return (\n    <StateContext.Provider value={balance}>{children}</StateContext.Provider>\n  );\n}\n\nexport function useBalance(): Balance {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useBalance must be used within a BalanceProvider`);\n  }\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}