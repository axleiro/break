{"ast":null,"code":"import { Transaction, TransactionInstruction, PublicKey, Account } from \"@solana/web3.js\";\nimport * as Bytes from \"utils/bytes\";\nconst self = globalThis;\n\nfunction createTransaction(message) {\n  const {\n    trackingId,\n    blockhash,\n    programId,\n    bitId,\n    feeAccountSecretKey,\n    programDataAccount\n  } = message;\n  const instruction = new TransactionInstruction({\n    keys: [{\n      pubkey: new PublicKey(programDataAccount),\n      isWritable: true,\n      isSigner: false\n    }],\n    programId: new PublicKey(programId),\n    data: Buffer.from(Bytes.instructionDataFromId(bitId))\n  });\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.recentBlockhash = blockhash;\n  transaction.sign(new Account(feeAccountSecretKey));\n  const signatureBuffer = transaction.signature;\n  self.postMessage({\n    trackingId: trackingId,\n    signature: signatureBuffer,\n    serializedTransaction: transaction.serialize()\n  });\n}\n\nself.onmessage = event => {\n  const message = event.data;\n\n  try {\n    createTransaction(message);\n  } catch (error) {\n    self.postMessage({\n      trackingId: message.trackingId,\n      error: error\n    });\n  }\n};","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/workers/create-transaction-worker-script.ts"],"names":["Transaction","TransactionInstruction","PublicKey","Account","Bytes","self","globalThis","createTransaction","message","trackingId","blockhash","programId","bitId","feeAccountSecretKey","programDataAccount","instruction","keys","pubkey","isWritable","isSigner","data","Buffer","from","instructionDataFromId","transaction","add","recentBlockhash","sign","signatureBuffer","signature","postMessage","serializedTransaction","serialize","onmessage","event","error"],"mappings":"AAAA,SACEA,WADF,EAEEC,sBAFF,EAGEC,SAHF,EAIEC,OAJF,QAKO,iBALP;AAMA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;AAGA,MAAMC,IAAS,GAAGC,UAAlB;;AAEA,SAASC,iBAAT,CAA2BC,OAA3B,EAA8D;AAC5D,QAAM;AACJC,IAAAA,UADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,KAJI;AAKJC,IAAAA,mBALI;AAMJC,IAAAA;AANI,MAOFN,OAPJ;AASA,QAAMO,WAAW,GAAG,IAAId,sBAAJ,CAA2B;AAC7Ce,IAAAA,IAAI,EAAE,CACJ;AACEC,MAAAA,MAAM,EAAE,IAAIf,SAAJ,CAAcY,kBAAd,CADV;AAEEI,MAAAA,UAAU,EAAE,IAFd;AAGEC,MAAAA,QAAQ,EAAE;AAHZ,KADI,CADuC;AAQ7CR,IAAAA,SAAS,EAAE,IAAIT,SAAJ,CAAcS,SAAd,CARkC;AAS7CS,IAAAA,IAAI,EAAEC,MAAM,CAACC,IAAP,CAAYlB,KAAK,CAACmB,qBAAN,CAA4BX,KAA5B,CAAZ;AATuC,GAA3B,CAApB;AAYA,QAAMY,WAAW,GAAG,IAAIxB,WAAJ,EAApB;AACAwB,EAAAA,WAAW,CAACC,GAAZ,CAAgBV,WAAhB;AACAS,EAAAA,WAAW,CAACE,eAAZ,GAA8BhB,SAA9B;AACAc,EAAAA,WAAW,CAACG,IAAZ,CAAiB,IAAIxB,OAAJ,CAAYU,mBAAZ,CAAjB;AAEA,QAAMe,eAAe,GAAGJ,WAAW,CAACK,SAApC;AAEAxB,EAAAA,IAAI,CAACyB,WAAL,CAAiB;AACfrB,IAAAA,UAAU,EAAEA,UADG;AAEfoB,IAAAA,SAAS,EAAED,eAFI;AAGfG,IAAAA,qBAAqB,EAAEP,WAAW,CAACQ,SAAZ;AAHR,GAAjB;AAKD;;AAED3B,IAAI,CAAC4B,SAAL,GAAkBC,KAAD,IAAgB;AAC/B,QAAM1B,OAAO,GAAG0B,KAAK,CAACd,IAAtB;;AAEA,MAAI;AACFb,IAAAA,iBAAiB,CAACC,OAAD,CAAjB;AACD,GAFD,CAEE,OAAO2B,KAAP,EAAc;AACd9B,IAAAA,IAAI,CAACyB,WAAL,CAAiB;AACfrB,MAAAA,UAAU,EAAED,OAAO,CAACC,UADL;AAEf0B,MAAAA,KAAK,EAAEA;AAFQ,KAAjB;AAID;AACF,CAXD","sourcesContent":["import {\n  Transaction,\n  TransactionInstruction,\n  PublicKey,\n  Account,\n} from \"@solana/web3.js\";\nimport * as Bytes from \"utils/bytes\";\nimport { CreateTransactionMessage } from \"./create-transaction-rpc\";\n\nconst self: any = globalThis;\n\nfunction createTransaction(message: CreateTransactionMessage) {\n  const {\n    trackingId,\n    blockhash,\n    programId,\n    bitId,\n    feeAccountSecretKey,\n    programDataAccount,\n  } = message;\n\n  const instruction = new TransactionInstruction({\n    keys: [\n      {\n        pubkey: new PublicKey(programDataAccount),\n        isWritable: true,\n        isSigner: false,\n      },\n    ],\n    programId: new PublicKey(programId),\n    data: Buffer.from(Bytes.instructionDataFromId(bitId)),\n  });\n\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.recentBlockhash = blockhash;\n  transaction.sign(new Account(feeAccountSecretKey));\n\n  const signatureBuffer = transaction.signature;\n\n  self.postMessage({\n    trackingId: trackingId,\n    signature: signatureBuffer,\n    serializedTransaction: transaction.serialize(),\n  });\n}\n\nself.onmessage = (event: any) => {\n  const message = event.data;\n\n  try {\n    createTransaction(message);\n  } catch (error) {\n    self.postMessage({\n      trackingId: message.trackingId,\n      error: error,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}