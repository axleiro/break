{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/rpc/index.tsx\";\nimport React from \"react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useConfig } from \"providers/server/http\";\nimport { BlockhashProvider } from \"./blockhash\";\nimport { BalanceProvider } from \"./balance\";\nconst StateContext = React.createContext(undefined);\nexport function RpcProvider({\n  children\n}) {\n  var _useConfig;\n\n  const [rpcUrl, setRpcUrl] = React.useState(); // Reset rpc url whenever config is fetched\n\n  const configRpcUrl = (_useConfig = useConfig()) === null || _useConfig === void 0 ? void 0 : _useConfig.rpcUrl;\n  React.useEffect(() => {\n    console.log(\"set rpc url\", {\n      rpcUrl\n    });\n    setRpcUrl(rpcUrl);\n  }, [configRpcUrl]);\n  const state = React.useMemo(() => {\n    return [rpcUrl, setRpcUrl];\n  }, [rpcUrl]);\n  return /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BlockhashProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BalanceProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, children)));\n}\nexport function useRpcUrlState() {\n  const state = React.useContext(StateContext);\n\n  if (state === undefined) {\n    throw new Error(`useRpcUrlState must be used within a RpcProvider`);\n  }\n\n  return state;\n}\nexport function useConnection() {\n  const [url] = useRpcUrlState();\n  return React.useMemo(() => {\n    if (url === undefined) return;\n    console.log(\"new connection\", {\n      url\n    });\n    return new Connection(url);\n  }, [url]);\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/rpc/index.tsx"],"names":["React","Connection","useConfig","BlockhashProvider","BalanceProvider","StateContext","createContext","undefined","RpcProvider","children","rpcUrl","setRpcUrl","useState","configRpcUrl","useEffect","console","log","state","useMemo","useRpcUrlState","useContext","Error","useConnection","url"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,iBAAT,QAAkC,aAAlC;AACA,SAASC,eAAT,QAAgC,WAAhC;AAKA,MAAMC,YAAY,GAAGL,KAAK,CAACM,aAAN,CAAuCC,SAAvC,CAArB;AAGA,OAAO,SAASC,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAkD;AAAA;;AACvD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,KAAK,CAACY,QAAN,EAA5B,CADuD,CAGvD;;AACA,QAAMC,YAAY,iBAAGX,SAAS,EAAZ,+CAAG,WAAaQ,MAAlC;AACAV,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B;AAACN,MAAAA;AAAD,KAA3B;AACAC,IAAAA,SAAS,CAACD,MAAD,CAAT;AACD,GAHD,EAGG,CAACG,YAAD,CAHH;AAKA,QAAMI,KAAY,GAAGjB,KAAK,CAACkB,OAAN,CAAc,MAAM;AACvC,WAAO,CAACR,MAAD,EAASC,SAAT,CAAP;AACD,GAFoB,EAElB,CAACD,MAAD,CAFkB,CAArB;AAIA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEO,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkBR,QAAlB,CADF,CADF,CADF;AAOD;AAED,OAAO,SAASU,cAAT,GAAiC;AACtC,QAAMF,KAAK,GAAGjB,KAAK,CAACoB,UAAN,CAAiBf,YAAjB,CAAd;;AACA,MAAIY,KAAK,KAAKV,SAAd,EAAyB;AACvB,UAAM,IAAIc,KAAJ,CAAW,kDAAX,CAAN;AACD;;AACD,SAAOJ,KAAP;AACD;AAED,OAAO,SAASK,aAAT,GAAiD;AACtD,QAAM,CAACC,GAAD,IAAQJ,cAAc,EAA5B;AACA,SAAOnB,KAAK,CAACkB,OAAN,CAAc,MAAM;AACzB,QAAIK,GAAG,KAAKhB,SAAZ,EAAuB;AACvBQ,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B;AAACO,MAAAA;AAAD,KAA9B;AACA,WAAO,IAAItB,UAAJ,CAAesB,GAAf,CAAP;AACD,GAJM,EAIJ,CAACA,GAAD,CAJI,CAAP;AAKD","sourcesContent":["import React from \"react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useConfig } from \"providers/server/http\";\nimport { BlockhashProvider } from \"./blockhash\";\nimport { BalanceProvider } from \"./balance\";\n\ntype SetUrl = (url: string) => void;\ntype State = [string | undefined, SetUrl];\n\nconst StateContext = React.createContext<State | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function RpcProvider({ children }: ProviderProps) {\n  const [rpcUrl, setRpcUrl] = React.useState<string>();\n\n  // Reset rpc url whenever config is fetched\n  const configRpcUrl = useConfig()?.rpcUrl;\n  React.useEffect(() => {\n    console.log(\"set rpc url\", {rpcUrl});\n    setRpcUrl(rpcUrl);\n  }, [configRpcUrl]);\n\n  const state: State = React.useMemo(() => {\n    return [rpcUrl, setRpcUrl];\n  }, [rpcUrl]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <BlockhashProvider>\n        <BalanceProvider>{children}</BalanceProvider>\n      </BlockhashProvider>\n    </StateContext.Provider>\n  );\n}\n\nexport function useRpcUrlState(): State {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useRpcUrlState must be used within a RpcProvider`);\n  }\n  return state;\n}\n\nexport function useConnection(): Connection | undefined {\n  const [url] = useRpcUrlState();\n  return React.useMemo(() => {\n    if (url === undefined) return;\n    console.log(\"new connection\", {url});\n    return new Connection(url);\n  }, [url]);\n}\n"]},"metadata":{},"sourceType":"module"}