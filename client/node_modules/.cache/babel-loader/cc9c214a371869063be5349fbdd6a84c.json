{"ast":null,"code":"import bs58 from \"bs58\";\nimport { ActionType } from \"./index\";\nimport { CreateTransactionRPC } from \"../../workers/create-transaction-rpc\";\nconst SEND_TIMEOUT_MS = 45000;\nconst RETRY_INTERVAL_MS = 500;\nconst workerRPC = new CreateTransactionRPC();\nexport function createTransaction(blockhash, targetSlot, programId, accounts, trackingId, dispatch, socket) {\n  const {\n    feeAccounts,\n    programAccounts\n  } = accounts;\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n  workerRPC.createTransaction({\n    trackingId: trackingId,\n    blockhash: blockhash,\n    programId: programId.toBase58(),\n    programDataAccount: programDataAccount.toBase58(),\n    bitId: bitId,\n    feeAccountSecretKey: feeAccount.secretKey\n  }).then(response => {\n    const {\n      signature,\n      serializedTransaction\n    } = response;\n    const sentAt = performance.now();\n    const pendingTransaction = {\n      sentAt,\n      targetSlot\n    };\n    pendingTransaction.timeoutId = window.setTimeout(() => {\n      dispatch({\n        type: ActionType.TimeoutTransaction,\n        trackingId\n      });\n    }, SEND_TIMEOUT_MS);\n    const details = {\n      id: bitId,\n      feeAccount: feeAccount.publicKey,\n      programAccount: programDataAccount,\n      signature: bs58.encode(signature)\n    };\n    dispatch({\n      type: ActionType.NewTransaction,\n      details,\n      trackingId,\n      pendingTransaction\n    });\n    setTimeout(() => {\n      const retryUntil = new URLSearchParams(window.location.search).get(\"retry_until\");\n\n      if (retryUntil === null || retryUntil !== \"disabled\") {\n        pendingTransaction.retryId = window.setInterval(() => {\n          if (socket.readyState === WebSocket.OPEN) {\n            socket.send(serializedTransaction);\n          }\n        }, RETRY_INTERVAL_MS);\n      }\n    }, 1);\n  }, error => {\n    console.log(error);\n  });\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/create.tsx"],"names":["bs58","ActionType","CreateTransactionRPC","SEND_TIMEOUT_MS","RETRY_INTERVAL_MS","workerRPC","createTransaction","blockhash","targetSlot","programId","accounts","trackingId","dispatch","socket","feeAccounts","programAccounts","bitId","Math","floor","length","accountIndex","programDataAccount","feeAccount","toBase58","feeAccountSecretKey","secretKey","then","response","signature","serializedTransaction","sentAt","performance","now","pendingTransaction","timeoutId","window","setTimeout","type","TimeoutTransaction","details","id","publicKey","programAccount","encode","NewTransaction","retryUntil","URLSearchParams","location","search","get","retryId","setInterval","readyState","WebSocket","OPEN","send","error","console","log"],"mappings":"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","sourcesContent":["import {\n  Blockhash,\n  PublicKey\n} from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport {\n  Dispatch,\n  PendingTransaction,\n  ActionType,\n  TransactionDetails,\n} from \"./index\";\nimport { AccountsConfig } from \"../api/config\";\nimport { CreateTransactionRPC, CreateTransactionResponseMessage } from \"../../workers/create-transaction-rpc\";\n\nconst SEND_TIMEOUT_MS = 45000;\nconst RETRY_INTERVAL_MS = 500;\n\nconst workerRPC = new CreateTransactionRPC();\n\nexport function createTransaction(\n  blockhash: Blockhash,\n  targetSlot: number,\n  programId: PublicKey,\n  accounts: AccountsConfig,\n  trackingId: number,\n  dispatch: Dispatch,\n  socket: WebSocket\n) {\n\n  const { feeAccounts, programAccounts } = accounts;\n\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n\n  workerRPC.createTransaction({\n    trackingId: trackingId,\n    blockhash: blockhash,\n    programId: programId.toBase58(),\n    programDataAccount: programDataAccount.toBase58(),\n    bitId: bitId,\n    feeAccountSecretKey: feeAccount.secretKey\n  })\n  .then((response: CreateTransactionResponseMessage) => {\n\n    const {\n      signature,\n      serializedTransaction\n    } = response;\n\n    const sentAt = performance.now();\n\n    const pendingTransaction: PendingTransaction = { sentAt, targetSlot };\n    pendingTransaction.timeoutId = window.setTimeout(() => {\n      dispatch({ type: ActionType.TimeoutTransaction, trackingId });\n    }, SEND_TIMEOUT_MS);\n\n    const details: TransactionDetails = {\n      id: bitId,\n      feeAccount: feeAccount.publicKey,\n      programAccount: programDataAccount,\n      signature: bs58.encode(signature),\n    };\n\n    dispatch({\n      type: ActionType.NewTransaction,\n      details,\n      trackingId,\n      pendingTransaction,\n    });\n\n    setTimeout(() => {\n      const retryUntil = new URLSearchParams(window.location.search).get(\n        \"retry_until\"\n      );\n      if (retryUntil === null || retryUntil !== \"disabled\") {\n        pendingTransaction.retryId = window.setInterval(() => {\n          if (socket.readyState === WebSocket.OPEN) {\n            socket.send(serializedTransaction);\n          }\n        }, RETRY_INTERVAL_MS);\n      }\n    }, 1);\n  }, (error: any) => {\n    console.log(error);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}