{"ast":null,"code":"// eslint-disable-next-line import/no-webpack-loader-syntax\nimport Worker from \"worker-loader!./create-transaction-worker-script\";\nexport class WorkerLink {\n  constructor() {\n    this.worker = void 0;\n    this.callbacks = {};\n    this.onReady = void 0;\n    this.onUserCount = void 0;\n    this.worker = new Worker();\n    this.worker.onmessage = this.handleResponse.bind(this);\n  }\n\n  handleResponse(event) {\n    let response = event.data;\n    console.log(\"RESPONSE\", response.type);\n\n    switch (response.type) {\n      case \"ready\":\n        {\n          if (this.onReady) this.onReady();\n          break;\n        }\n\n      case \"users\":\n        {\n          if (this.onUserCount) this.onUserCount(response.count);\n          break;\n        }\n\n      case \"failed\":\n      case \"created\":\n        {\n          if (response.trackingId in this.callbacks) {\n            let callbacks = this.callbacks[response.trackingId];\n            delete this.callbacks[response.trackingId];\n\n            if (\"error\" in response) {\n              callbacks[1](response.error);\n              return;\n            }\n\n            callbacks[0](response);\n          }\n        }\n    }\n  }\n\n  setReadyListener(onReady) {\n    this.onReady = onReady;\n  }\n\n  setUsersListener(onUserCount) {\n    this.onUserCount = onUserCount;\n  }\n\n  send(message) {\n    this.worker.postMessage(message);\n  }\n\n  accounts(message) {\n    this.worker.postMessage(message);\n  }\n\n  createTransaction(message) {\n    return new Promise((resolve, reject) => {\n      this.callbacks[message.trackingId] = [resolve, reject];\n      this.worker.postMessage(message);\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/worker/link.ts"],"names":["Worker","WorkerLink","constructor","worker","callbacks","onReady","onUserCount","onmessage","handleResponse","bind","event","response","data","console","log","type","count","trackingId","error","setReadyListener","setUsersListener","send","message","postMessage","accounts","createTransaction","Promise","resolve","reject"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,kDAAnB;AA8DA,OAAO,MAAMC,UAAN,CAAiB;AAOtBC,EAAAA,WAAW,GAAG;AAAA,SANNC,MAMM;AAAA,SAJNC,SAIM,GAJ4C,EAI5C;AAAA,SAHNC,OAGM;AAAA,SAFNC,WAEM;AACZ,SAAKH,MAAL,GAAc,IAAIH,MAAJ,EAAd;AACA,SAAKG,MAAL,CAAYI,SAAZ,GAAwB,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAxB;AACD;;AAEOD,EAAAA,cAAR,CAAuBE,KAAvB,EAA4C;AAC1C,QAAIC,QAAwB,GAAID,KAAK,CAACE,IAAtC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,QAAQ,CAACI,IAAjC;;AACA,YAAQJ,QAAQ,CAACI,IAAjB;AACE,WAAK,OAAL;AAAc;AACZ,cAAI,KAAKV,OAAT,EAAkB,KAAKA,OAAL;AAClB;AACD;;AACD,WAAK,OAAL;AAAc;AACZ,cAAI,KAAKC,WAAT,EAAsB,KAAKA,WAAL,CAAiBK,QAAQ,CAACK,KAA1B;AACtB;AACD;;AACD,WAAK,QAAL;AACA,WAAK,SAAL;AAAgB;AACd,cAAIL,QAAQ,CAACM,UAAT,IAAuB,KAAKb,SAAhC,EAA2C;AACzC,gBAAIA,SAAS,GAAG,KAAKA,SAAL,CAAeO,QAAQ,CAACM,UAAxB,CAAhB;AACA,mBAAO,KAAKb,SAAL,CAAeO,QAAQ,CAACM,UAAxB,CAAP;;AAEA,gBAAI,WAAWN,QAAf,EAAyB;AACvBP,cAAAA,SAAS,CAAC,CAAD,CAAT,CAAaO,QAAQ,CAACO,KAAtB;AACA;AACD;;AAEDd,YAAAA,SAAS,CAAC,CAAD,CAAT,CAAaO,QAAb;AACD;AACF;AAtBH;AAwBD;;AAEDQ,EAAAA,gBAAgB,CAACd,OAAD,EAAsB;AACpC,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDe,EAAAA,gBAAgB,CAACd,WAAD,EAAuC;AACrD,SAAKA,WAAL,GAAmBA,WAAnB;AACD;;AAEDe,EAAAA,IAAI,CAACC,OAAD,EAAoF;AACtF,SAAKnB,MAAL,CAAYoB,WAAZ,CAAwBD,OAAxB;AACD;;AAEDE,EAAAA,QAAQ,CAACF,OAAD,EAAiC;AACvC,SAAKnB,MAAL,CAAYoB,WAAZ,CAAwBD,OAAxB;AACD;;AAEDG,EAAAA,iBAAiB,CACfH,OADe,EAEsB;AACrC,WAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKxB,SAAL,CAAekB,OAAO,CAACL,UAAvB,IAAqC,CAACU,OAAD,EAAUC,MAAV,CAArC;AACA,WAAKzB,MAAL,CAAYoB,WAAZ,CAAwBD,OAAxB;AACD,KAHM,CAAP;AAID;;AAhEqB","sourcesContent":["// eslint-disable-next-line import/no-webpack-loader-syntax\nimport Worker from \"worker-loader!./create-transaction-worker-script\";\nimport { Blockhash } from \"@solana/web3.js\";\n\nexport type ResponseType = \"ready\" | \"users\" | \"created\" | \"failed\";\n\nexport type ReadyResponse = {\n  type: \"ready\";\n};\n\nexport type UserCountResponse = {\n  type: \"users\";\n  count: number;\n};\n\nexport type CreatedTransactionResponse = {\n  type: \"created\";\n  trackingId: number;\n  signature: Buffer;\n}\n\nexport type CreateFailedResponse = {\n  type: \"failed\";\n  trackingId: number;\n  error: Error;\n}\n\nexport type WorkerResponse = \n  ReadyResponse |\n  UserCountResponse |\n  CreatedTransactionResponse |\n  CreateFailedResponse;\n\nexport type MessageType = \"create\" | \"init\" | \"accounts\" | \"blockhash\";\n\nexport type CreateTransactionMessage = {\n  type: \"create\";\n  trackingId: number;\n}\n\nexport type InitializeWorkerMessage = {\n  type: \"init\";\n  programId: string;\n  clusterUrl: string;\n}\n\nexport type AccountsWorkerMessage = {\n  type: \"accounts\";\n  feeAccounts: Buffer[],\n  programAccounts: string[],\n}\n\nexport type BlockhashWorkerMessage = {\n  type: \"blockhash\";\n  blockhash: Blockhash;\n}\n\nexport type WorkerMessage = \n  CreateTransactionMessage |\n  InitializeWorkerMessage |\n  AccountsWorkerMessage |\n  BlockhashWorkerMessage;\n\nexport class WorkerLink {\n  private worker: Worker;\n\n  private callbacks: { [trackingId: string]: Function[] } = {};\n  private onReady: (() => void) | undefined;\n  private onUserCount: ((count: number) => void) | undefined;\n\n  constructor() {\n    this.worker = new Worker();\n    this.worker.onmessage = this.handleResponse.bind(this);\n  }\n\n  private handleResponse(event: MessageEvent) {\n    let response: WorkerResponse  = event.data;\n    console.log(\"RESPONSE\", response.type);\n    switch (response.type) {\n      case \"ready\": {\n        if (this.onReady) this.onReady();\n        break;\n      }\n      case \"users\": {\n        if (this.onUserCount) this.onUserCount(response.count);\n        break;\n      }\n      case \"failed\":\n      case \"created\": {\n        if (response.trackingId in this.callbacks) {\n          let callbacks = this.callbacks[response.trackingId];\n          delete this.callbacks[response.trackingId];\n\n          if (\"error\" in response) {\n            callbacks[1](response.error);\n            return;\n          }\n\n          callbacks[0](response);\n        }\n      }\n    }\n  }\n\n  setReadyListener(onReady: () => void) {\n    this.onReady = onReady;\n  }\n\n  setUsersListener(onUserCount: (count: number) => void) {\n    this.onUserCount = onUserCount;\n  }\n\n  send(message: InitializeWorkerMessage | AccountsWorkerMessage | BlockhashWorkerMessage) {\n    this.worker.postMessage(message);\n  }\n\n  accounts(message: AccountsWorkerMessage) {\n    this.worker.postMessage(message);\n  }\n\n  createTransaction(\n    message: CreateTransactionMessage\n  ): Promise<CreatedTransactionResponse> {\n    return new Promise((resolve, reject) => {\n      this.callbacks[message.trackingId] = [resolve, reject];\n      this.worker.postMessage(message);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}