{"ast":null,"code":"import{Transaction,TransactionInstruction}from\"@solana/web3.js\";import bs58 from\"bs58\";import*as Bytes from\"utils/bytes\";import{ActionType}from\"./index\";var SEND_TIMEOUT_MS=45000;var RETRY_INTERVAL_MS=500;export function createTransaction(blockhash,programId,accounts,trackingId,dispatch,socket){var feeAccounts=accounts.feeAccounts,programAccounts=accounts.programAccounts;var bitId=Math.floor(trackingId/feeAccounts.length);var accountIndex=trackingId%feeAccounts.length;var programDataAccount=programAccounts[accountIndex];var feeAccount=feeAccounts[accountIndex];var instruction=new TransactionInstruction({keys:[{pubkey:programDataAccount,isWritable:true,isSigner:false}],programId:programId,data:Buffer.from(Bytes.instructionDataFromId(bitId))});var transaction=new Transaction();transaction.add(instruction);var sentAt=performance.now();transaction.recentBlockhash=blockhash;transaction.sign(feeAccount);var signatureBuffer=transaction.signature;if(!signatureBuffer)throw new Error(\"Failed to sign transaction\");var signature=bs58.encode(signatureBuffer);var pendingTransaction={sentAt:sentAt};pendingTransaction.timeoutId=window.setTimeout(function(){dispatch({type:ActionType.TimeoutTransaction,trackingId:trackingId});},SEND_TIMEOUT_MS);var details={id:bitId,feeAccount:feeAccount.publicKey,programAccount:programDataAccount,signature:signature};dispatch({type:ActionType.NewTransaction,details:details,trackingId:trackingId,pendingTransaction:pendingTransaction});setTimeout(function(){var serialized=transaction.serialize();socket.send(serialized);var retryUntil=new URLSearchParams(window.location.search).get(\"retry_until\");if(retryUntil===null||retryUntil!==\"disabled\"){pendingTransaction.retryId=window.setInterval(function(){if(socket.readyState===WebSocket.OPEN){socket.send(serialized);}},RETRY_INTERVAL_MS);}},1);}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/create.tsx"],"names":["Transaction","TransactionInstruction","bs58","Bytes","ActionType","SEND_TIMEOUT_MS","RETRY_INTERVAL_MS","createTransaction","blockhash","programId","accounts","trackingId","dispatch","socket","feeAccounts","programAccounts","bitId","Math","floor","length","accountIndex","programDataAccount","feeAccount","instruction","keys","pubkey","isWritable","isSigner","data","Buffer","from","instructionDataFromId","transaction","add","sentAt","performance","now","recentBlockhash","sign","signatureBuffer","signature","Error","encode","pendingTransaction","timeoutId","window","setTimeout","type","TimeoutTransaction","details","id","publicKey","programAccount","NewTransaction","serialized","serialize","send","retryUntil","URLSearchParams","location","search","get","retryId","setInterval","readyState","WebSocket","OPEN"],"mappings":"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","sourcesContent":["import {\n  Blockhash,\n  Transaction,\n  TransactionInstruction,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport * as Bytes from \"utils/bytes\";\nimport {\n  Dispatch,\n  PendingTransaction,\n  ActionType,\n  TransactionDetails,\n} from \"./index\";\nimport { AccountsConfig } from \"../api/config\";\n\nconst SEND_TIMEOUT_MS = 45000;\nconst RETRY_INTERVAL_MS = 500;\n\nexport function createTransaction(\n  blockhash: Blockhash,\n  programId: PublicKey,\n  accounts: AccountsConfig,\n  trackingId: number,\n  dispatch: Dispatch,\n  socket: WebSocket\n) {\n  const { feeAccounts, programAccounts } = accounts;\n\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n  const instruction = new TransactionInstruction({\n    keys: [{ pubkey: programDataAccount, isWritable: true, isSigner: false }],\n    programId,\n    data: Buffer.from(Bytes.instructionDataFromId(bitId)),\n  });\n\n  const transaction = new Transaction();\n  transaction.add(instruction);\n\n  const sentAt = performance.now();\n  transaction.recentBlockhash = blockhash;\n  transaction.sign(feeAccount);\n  const signatureBuffer = transaction.signature;\n  if (!signatureBuffer) throw new Error(\"Failed to sign transaction\");\n  const signature = bs58.encode(signatureBuffer);\n  const pendingTransaction: PendingTransaction = { sentAt };\n  pendingTransaction.timeoutId = window.setTimeout(() => {\n    dispatch({ type: ActionType.TimeoutTransaction, trackingId });\n  }, SEND_TIMEOUT_MS);\n\n  const details: TransactionDetails = {\n    id: bitId,\n    feeAccount: feeAccount.publicKey,\n    programAccount: programDataAccount,\n    signature,\n  };\n\n  dispatch({\n    type: ActionType.NewTransaction,\n    details,\n    trackingId,\n    pendingTransaction,\n  });\n\n  setTimeout(() => {\n    const serialized = transaction.serialize();\n    socket.send(serialized);\n\n    const retryUntil = new URLSearchParams(window.location.search).get(\n      \"retry_until\"\n    );\n    if (retryUntil === null || retryUntil !== \"disabled\") {\n      pendingTransaction.retryId = window.setInterval(() => {\n        if (socket.readyState === WebSocket.OPEN) {\n          socket.send(serialized);\n        }\n      }, RETRY_INTERVAL_MS);\n    }\n  }, 1);\n}\n"]},"metadata":{},"sourceType":"module"}