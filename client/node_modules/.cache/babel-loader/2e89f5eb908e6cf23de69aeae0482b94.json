{"ast":null,"code":"import _classCallCheck from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";// eslint-disable-next-line import/no-webpack-loader-syntax\nimport CreateTransactionWorker from\"worker-loader!./create-transaction-worker-script\";export var CreateTransactionRPC=/*#__PURE__*/function(){function CreateTransactionRPC(){_classCallCheck(this,CreateTransactionRPC);this.worker=void 0;this.callbacks={};this.onReady=void 0;this.worker=new CreateTransactionWorker();this.worker.onmessage=this.handleMessages.bind(this);}_createClass(CreateTransactionRPC,[{key:\"handleMessages\",value:function handleMessages(event){var message=event.data;if(message===\"ready\"&&this.onReady){this.onReady();}if(message.trackingId in this.callbacks){var callbacks=this.callbacks[message.trackingId];delete this.callbacks[message.trackingId];if(\"error\"in message){callbacks[1](message.error);return;}callbacks[0](message);}}},{key:\"setReadyListener\",value:function setReadyListener(onReady){this.onReady=onReady;}},{key:\"send\",value:function send(message){this.worker.postMessage(message);}},{key:\"accounts\",value:function accounts(message){this.worker.postMessage(message);}},{key:\"createTransaction\",value:function createTransaction(message){var _this=this;return new Promise(function(resolve,reject){_this.callbacks[message.trackingId]=[resolve,reject];_this.worker.postMessage(message);});}}]);return CreateTransactionRPC;}();","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/workers/create-transaction-rpc.ts"],"names":["CreateTransactionWorker","CreateTransactionRPC","worker","callbacks","onReady","onmessage","handleMessages","bind","event","message","data","trackingId","error","postMessage","Promise","resolve","reject"],"mappings":"oUAAA;AACA,MAAOA,CAAAA,uBAAP,KAAoC,kDAApC,CA4CA,UAAaC,CAAAA,oBAAb,yBAME,+BAAc,iDALNC,MAKM,aAHNC,SAGM,CAH4C,EAG5C,MAFNC,OAEM,QACZ,KAAKF,MAAL,CAAc,GAAIF,CAAAA,uBAAJ,EAAd,CACA,KAAKE,MAAL,CAAYG,SAAZ,CAAwB,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAxB,CACD,CATH,uFAWyBC,KAXzB,CAW8C,CAC1C,GAAIC,CAAAA,OAAO,CAAGD,KAAK,CAACE,IAApB,CACA,GAAID,OAAO,GAAK,OAAZ,EAAuB,KAAKL,OAAhC,CAAyC,CACvC,KAAKA,OAAL,GACD,CAED,GAAIK,OAAO,CAACE,UAAR,GAAsB,MAAKR,SAA/B,CAA0C,CACxC,GAAIA,CAAAA,SAAS,CAAG,KAAKA,SAAL,CAAeM,OAAO,CAACE,UAAvB,CAAhB,CACA,MAAO,MAAKR,SAAL,CAAeM,OAAO,CAACE,UAAvB,CAAP,CAEA,GAAI,SAAWF,CAAAA,OAAf,CAAwB,CACtBN,SAAS,CAAC,CAAD,CAAT,CAAaM,OAAO,CAACG,KAArB,EACA,OACD,CAEDT,SAAS,CAAC,CAAD,CAAT,CAAaM,OAAb,EACD,CACF,CA5BH,0DA8BmBL,OA9BnB,CA8BwC,CACpC,KAAKA,OAAL,CAAeA,OAAf,CACD,CAhCH,kCAkCOK,OAlCP,CAkC0F,CACtF,KAAKP,MAAL,CAAYW,WAAZ,CAAwBJ,OAAxB,EACD,CApCH,0CAsCWA,OAtCX,CAsC2C,CACvC,KAAKP,MAAL,CAAYW,WAAZ,CAAwBJ,OAAxB,EACD,CAxCH,4DA2CIA,OA3CJ,CA4C+C,gBAC3C,MAAO,IAAIK,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtC,KAAI,CAACb,SAAL,CAAeM,OAAO,CAACE,UAAvB,EAAqC,CAACI,OAAD,CAAUC,MAAV,CAArC,CACA,KAAI,CAACd,MAAL,CAAYW,WAAZ,CAAwBJ,OAAxB,EACD,CAHM,CAAP,CAID,CAjDH","sourcesContent":["// eslint-disable-next-line import/no-webpack-loader-syntax\nimport CreateTransactionWorker from \"worker-loader!./create-transaction-worker-script\";\nimport { AccountsConfig } from \"providers/api/config\";\nimport { PublicKey, Blockhash } from \"@solana/web3.js\";\n\nexport type CreateTransactionResponseMessage = {\n  trackingId: number;\n  signature: Buffer;\n}\n\nexport type CreateTransactionErrorMessage = {\n  trackingId: string;\n  error: Error;\n}\n\nexport type MessageType = \"create\" | \"init\" | \"accounts\" | \"blockhash\";\n\nexport type CreateTransactionMessage = {\n  type: \"create\";\n  trackingId: number;\n}\n\nexport type InitializeWorkerMessage = {\n  type: \"init\";\n  programId: string;\n  clusterUrl: string;\n}\n\nexport type AccountsWorkerMessage = {\n  type: \"accounts\";\n  feeAccounts: Buffer[],\n  programAccounts: string[],\n}\n\nexport type BlockhashWorkerMessage = {\n  type: \"blockhash\";\n  blockhash: Blockhash;\n}\n\nexport type WorkerMessage = \n  CreateTransactionMessage |\n  InitializeWorkerMessage |\n  AccountsWorkerMessage |\n  BlockhashWorkerMessage;\n\nexport class CreateTransactionRPC {\n  private worker: CreateTransactionWorker;\n\n  private callbacks: { [trackingId: string]: Function[] } = {};\n  private onReady: (() => void) | undefined;\n\n  constructor() {\n    this.worker = new CreateTransactionWorker();\n    this.worker.onmessage = this.handleMessages.bind(this);\n  }\n\n  private handleMessages(event: MessageEvent) {\n    let message = event.data;\n    if (message === \"ready\" && this.onReady) {\n      this.onReady();\n    }\n\n    if (message.trackingId in this.callbacks) {\n      let callbacks = this.callbacks[message.trackingId];\n      delete this.callbacks[message.trackingId];\n\n      if (\"error\" in message) {\n        callbacks[1](message.error);\n        return;\n      }\n\n      callbacks[0](message);\n    }\n  }\n\n  setReadyListener(onReady: () => void) {\n    this.onReady = onReady;\n  }\n\n  send(message: InitializeWorkerMessage | AccountsWorkerMessage | BlockhashWorkerMessage) {\n    this.worker.postMessage(message);\n  }\n\n  accounts(message: AccountsWorkerMessage) {\n    this.worker.postMessage(message);\n  }\n\n  createTransaction(\n    message: CreateTransactionMessage\n  ): Promise<CreateTransactionResponseMessage> {\n    return new Promise((resolve, reject) => {\n      this.callbacks[message.trackingId] = [resolve, reject];\n      this.worker.postMessage(message);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}