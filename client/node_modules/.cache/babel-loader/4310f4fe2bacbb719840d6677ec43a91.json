{"ast":null,"code":"import * as React from \"react\";\nimport { useAccounts, useConnection } from \"../api\";\nimport { useDispatch, ActionType } from \"./index\";\nimport * as Bytes from \"utils/bytes\";\nconst debugMode = new URLSearchParams(window.location.search).has(\"debug\"); // Determine commitment levels to subscribe to. \"singleGossip\" is used\n// to stop tx send retries so it must be returned\n\nconst commitmentParams = () => {\n  if (debugMode) return [\"recent\", \"single\", \"singleGossip\"];\n  const commitment = new URLSearchParams(window.location.search).get(\"commitment\");\n\n  switch (commitment) {\n    case \"recent\":\n    case \"single\":\n    case \"max\":\n    case \"root\":\n      {\n        return [\"singleGossip\", commitment];\n      }\n\n    default:\n      {\n        return [\"singleGossip\"];\n      }\n  }\n};\n\nexport function ConfirmedHelper({\n  children\n}) {\n  const dispatch = useDispatch();\n  const connection = useConnection();\n  const accounts = useAccounts();\n  React.useEffect(() => {\n    if (connection === undefined || accounts === undefined) return;\n    const commitments = commitmentParams();\n    const partitionCount = accounts.programAccounts.length;\n    const accountSubscriptions = accounts.programAccounts.map((account, partition) => commitments.map(commitment => connection.onAccountChange(account, (accountInfo, {\n      slot\n    }) => {\n      const ids = new Set(Bytes.programDataToIds(accountInfo.data));\n      const activeIdPartition = {\n        ids,\n        partition,\n        partitionCount\n      };\n      dispatch({\n        type: ActionType.UpdateIds,\n        activeIdPartition,\n        commitment,\n        estimatedSlot: slot\n      });\n    }, commitment)));\n    return () => {\n      accountSubscriptions.forEach(listeners => {\n        listeners.forEach(listener => {\n          connection.removeAccountChangeListener(listener);\n        });\n      });\n    };\n  }, [dispatch, connection, accounts]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/confirmed.tsx"],"names":["React","useAccounts","useConnection","useDispatch","ActionType","Bytes","debugMode","URLSearchParams","window","location","search","has","commitmentParams","commitment","get","ConfirmedHelper","children","dispatch","connection","accounts","useEffect","undefined","commitments","partitionCount","programAccounts","length","accountSubscriptions","map","account","partition","onAccountChange","accountInfo","slot","ids","Set","programDataToIds","data","activeIdPartition","type","UpdateIds","estimatedSlot","forEach","listeners","listener","removeAccountChangeListener"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,QAA3C;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,SAAxC;AACA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;AAEA,MAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,EAA4CC,GAA5C,CAAgD,OAAhD,CAAlB,C,CAEA;AACA;;AACA,MAAMC,gBAAgB,GAAG,MAAoB;AAC3C,MAAIN,SAAJ,EAAe,OAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,cAArB,CAAP;AACf,QAAMO,UAAU,GAAG,IAAIN,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,EAA4CI,GAA5C,CACjB,YADiB,CAAnB;;AAGA,UAAQD,UAAR;AACE,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,KAAL;AACA,SAAK,MAAL;AAAa;AACX,eAAO,CAAC,cAAD,EAAiBA,UAAjB,CAAP;AACD;;AACD;AAAS;AACP,eAAO,CAAC,cAAD,CAAP;AACD;AATH;AAWD,CAhBD;;AAmBA,OAAO,SAASE,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAA8C;AACnD,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AACA,QAAMe,UAAU,GAAGhB,aAAa,EAAhC;AACA,QAAMiB,QAAQ,GAAGlB,WAAW,EAA5B;AAEAD,EAAAA,KAAK,CAACoB,SAAN,CAAgB,MAAM;AACpB,QAAIF,UAAU,KAAKG,SAAf,IAA4BF,QAAQ,KAAKE,SAA7C,EAAwD;AAExD,UAAMC,WAAW,GAAGV,gBAAgB,EAApC;AACA,UAAMW,cAAc,GAAGJ,QAAQ,CAACK,eAAT,CAAyBC,MAAhD;AAEA,UAAMC,oBAAoB,GAAGP,QAAQ,CAACK,eAAT,CAAyBG,GAAzB,CAC3B,CAACC,OAAD,EAAUC,SAAV,KACEP,WAAW,CAACK,GAAZ,CAAiBd,UAAD,IACdK,UAAU,CAACY,eAAX,CACEF,OADF,EAEE,CAACG,WAAD,EAAmC;AAAEC,MAAAA;AAAF,KAAnC,KAAgD;AAC9C,YAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQ7B,KAAK,CAAC8B,gBAAN,CAAuBJ,WAAW,CAACK,IAAnC,CAAR,CAAZ;AACA,YAAMC,iBAAiB,GAAG;AACxBJ,QAAAA,GADwB;AAExBJ,QAAAA,SAFwB;AAGxBN,QAAAA;AAHwB,OAA1B;AAKAN,MAAAA,QAAQ,CAAC;AACPqB,QAAAA,IAAI,EAAElC,UAAU,CAACmC,SADV;AAEPF,QAAAA,iBAFO;AAGPxB,QAAAA,UAHO;AAIP2B,QAAAA,aAAa,EAAER;AAJR,OAAD,CAAR;AAMD,KAfH,EAgBEnB,UAhBF,CADF,CAFyB,CAA7B;AAwBA,WAAO,MAAM;AACXa,MAAAA,oBAAoB,CAACe,OAArB,CAA8BC,SAAD,IAAe;AAC1CA,QAAAA,SAAS,CAACD,OAAV,CAAmBE,QAAD,IAAc;AAC9BzB,UAAAA,UAAU,CAAC0B,2BAAX,CAAuCD,QAAvC;AACD,SAFD;AAGD,OAJD;AAKD,KAND;AAOD,GArCD,EAqCG,CAAC1B,QAAD,EAAWC,UAAX,EAAuBC,QAAvB,CArCH;AAuCA,sBAAO,0CAAGH,QAAH,CAAP;AACD","sourcesContent":["import * as React from \"react\";\n\nimport { AccountInfo, Commitment } from \"@solana/web3.js\";\nimport { useAccounts, useConnection } from \"../api\";\nimport { useDispatch, ActionType } from \"./index\";\nimport * as Bytes from \"utils/bytes\";\n\nconst debugMode = new URLSearchParams(window.location.search).has(\"debug\");\n\n// Determine commitment levels to subscribe to. \"singleGossip\" is used\n// to stop tx send retries so it must be returned\nconst commitmentParams = (): Commitment[] => {\n  if (debugMode) return [\"recent\", \"single\", \"singleGossip\"];\n  const commitment = new URLSearchParams(window.location.search).get(\n    \"commitment\"\n  );\n  switch (commitment) {\n    case \"recent\":\n    case \"single\":\n    case \"max\":\n    case \"root\": {\n      return [\"singleGossip\", commitment];\n    }\n    default: {\n      return [\"singleGossip\"];\n    }\n  }\n};\n\ntype Props = { children: React.ReactNode };\nexport function ConfirmedHelper({ children }: Props) {\n  const dispatch = useDispatch();\n  const connection = useConnection();\n  const accounts = useAccounts();\n\n  React.useEffect(() => {\n    if (connection === undefined || accounts === undefined) return;\n\n    const commitments = commitmentParams();\n    const partitionCount = accounts.programAccounts.length;\n\n    const accountSubscriptions = accounts.programAccounts.map(\n      (account, partition) =>\n        commitments.map((commitment) =>\n          connection.onAccountChange(\n            account,\n            (accountInfo: AccountInfo<Buffer>, { slot }) => {\n              const ids = new Set(Bytes.programDataToIds(accountInfo.data));\n              const activeIdPartition = {\n                ids,\n                partition,\n                partitionCount,\n              };\n              dispatch({\n                type: ActionType.UpdateIds,\n                activeIdPartition,\n                commitment,\n                estimatedSlot: slot,\n              });\n            },\n            commitment\n          )\n        )\n    );\n\n    return () => {\n      accountSubscriptions.forEach((listeners) => {\n        listeners.forEach((listener) => {\n          connection.removeAccountChangeListener(listener);\n        });\n      });\n    };\n  }, [dispatch, connection, accounts]);\n\n  return <>{children}</>;\n}\n"]},"metadata":{},"sourceType":"module"}