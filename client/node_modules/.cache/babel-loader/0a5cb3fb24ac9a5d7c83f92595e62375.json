{"ast":null,"code":"import _slicedToArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import React from\"react\";import{useLocation}from\"react-router-dom\";import{isLocalHost}from\"../../utils\";import{HttpProvider}from\"./http\";import{SocketProvider}from\"./socket\";export var DEFAULT_SERVER=isLocalHost()?\"custom\":\"mainnet-beta\";export var SERVERS=isLocalHost()?[\"custom\"]:[\"mainnet-beta\",\"testnet\",\"devnet\",\"custom\"];var DEFAULT_CUSTOM_URL=\"http://\".concat(window.location.hostname,\":\").concat(process.env.PORT||8080);export function serverName(server){switch(server){case\"mainnet-beta\":return\"Mainnet Beta\";case\"testnet\":return\"Testnet\";case\"devnet\":return\"Devnet\";case\"custom\":return\"Custom\";}}function parseQuery(query){var clusterParam=query.get(\"cluster\");switch(clusterParam){case\"devnet\":return\"devnet\";case\"testnet\":return\"testnet\";case\"mainnet-beta\":return\"mainnet-beta\";case\"custom\":return\"custom\";default:return DEFAULT_SERVER;}}var ModalContext=/*#__PURE__*/React.createContext(undefined);var ServerContext=/*#__PURE__*/React.createContext(undefined);export function ServerProvider(_ref){var children=_ref.children;var query=new URLSearchParams(useLocation().search);var serverParam=parseQuery(query);var _React$useState=React.useState(serverParam),_React$useState2=_slicedToArray(_React$useState,2),server=_React$useState2[0],setServer=_React$useState2[1];var _React$useState3=React.useState(DEFAULT_CUSTOM_URL),_React$useState4=_slicedToArray(_React$useState3,2),customUrl=_React$useState4[0],setCustomUrl=_React$useState4[1];var _React$useState5=React.useState(false),_React$useState6=_slicedToArray(_React$useState5,2),showModal=_React$useState6[0],setShowModal=_React$useState6[1];// Update state when query params change\nReact.useEffect(function(){setServer(serverParam);},[serverParam]);var modalState=React.useMemo(function(){return[showModal,setShowModal];},[showModal]);return/*#__PURE__*/_jsx(ServerContext.Provider,{value:{server:server,setServer:setServer,customUrl:customUrl,setCustomUrl:setCustomUrl},children:/*#__PURE__*/_jsx(ModalContext.Provider,{value:modalState,children:/*#__PURE__*/_jsx(HttpProvider,{children:/*#__PURE__*/_jsx(SocketProvider,{children:children})})})});}function getServerUrl(server,customUrl){switch(server){case\"custom\":{return customUrl;}default:{var useHttp=isLocalHost();var slug=server;if(server===\"mainnet-beta\"){slug=\"mainnet\";}return\"\".concat(useHttp?\"http\":\"https\",\"://break-solana-\").concat(slug,\".herokuapp.com\");}}}export function useServer(){var context=React.useContext(ServerContext);if(!context){throw new Error(\"useServer must be used within a ServerProvider\");}var server=context.server,customUrl=context.customUrl;var httpUrl=getServerUrl(server,customUrl);var webSocketUrl=httpUrl.replace(\"http\",\"ws\");return{server:server,httpUrl:httpUrl,webSocketUrl:webSocketUrl,name:serverName(server)};}export function useCustomUrl(){var context=React.useContext(ServerContext);if(!context){throw new Error(\"useCustomUrl must be used within a ServerProvider\");}return[context.customUrl,context.setCustomUrl];}export function useClusterModal(){var context=React.useContext(ModalContext);if(!context){throw new Error(\"useClusterModal must be used within a ServerProvider\");}return context;}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/server/index.tsx"],"names":["React","useLocation","isLocalHost","HttpProvider","SocketProvider","DEFAULT_SERVER","SERVERS","DEFAULT_CUSTOM_URL","window","location","hostname","process","env","PORT","serverName","server","parseQuery","query","clusterParam","get","ModalContext","createContext","undefined","ServerContext","ServerProvider","children","URLSearchParams","search","serverParam","useState","setServer","customUrl","setCustomUrl","showModal","setShowModal","useEffect","modalState","useMemo","getServerUrl","useHttp","slug","useServer","context","useContext","Error","httpUrl","webSocketUrl","replace","name","useCustomUrl","useClusterModal"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Cluster } from \"@solana/web3.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { isLocalHost } from \"../../utils\";\nimport { HttpProvider } from \"./http\";\nimport { SocketProvider } from \"./socket\";\n\ntype Server = Cluster | \"custom\";\nexport const DEFAULT_SERVER = isLocalHost() ? \"custom\" : \"mainnet-beta\";\nexport const SERVERS: Server[] = isLocalHost()\n  ? [\"custom\"]\n  : [\"mainnet-beta\", \"testnet\", \"devnet\", \"custom\"];\n\nconst DEFAULT_CUSTOM_URL = `http://${window.location.hostname}:${\n  process.env.PORT || 8080\n}`;\n\nexport function serverName(server: Server): string {\n  switch (server) {\n    case \"mainnet-beta\":\n      return \"Mainnet Beta\";\n    case \"testnet\":\n      return \"Testnet\";\n    case \"devnet\":\n      return \"Devnet\";\n    case \"custom\":\n      return \"Custom\";\n  }\n}\n\nfunction parseQuery(query: URLSearchParams): Server {\n  const clusterParam = query.get(\"cluster\");\n  switch (clusterParam) {\n    case \"devnet\":\n      return \"devnet\";\n    case \"testnet\":\n      return \"testnet\";\n    case \"mainnet-beta\":\n      return \"mainnet-beta\";\n    case \"custom\":\n      return \"custom\";\n    default:\n      return DEFAULT_SERVER;\n  }\n}\n\ntype SetShowModal = React.Dispatch<React.SetStateAction<boolean>>;\ntype ModalState = [boolean, SetShowModal];\nconst ModalContext = React.createContext<ModalState | undefined>(undefined);\ntype SetCustomUrl = React.Dispatch<React.SetStateAction<string>>;\ntype SetServer = React.Dispatch<React.SetStateAction<Server>>;\ntype ServerState = {\n  server: Server;\n  setServer: SetServer;\n  customUrl: string;\n  setCustomUrl: SetCustomUrl;\n};\nconst ServerContext = React.createContext<ServerState | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function ServerProvider({ children }: ProviderProps) {\n  const query = new URLSearchParams(useLocation().search);\n  const serverParam = parseQuery(query);\n  const [server, setServer] = React.useState<Server>(serverParam);\n  const [customUrl, setCustomUrl] = React.useState<string>(DEFAULT_CUSTOM_URL);\n  const [showModal, setShowModal] = React.useState(false);\n\n  // Update state when query params change\n  React.useEffect(() => {\n    setServer(serverParam);\n  }, [serverParam]);\n\n  const modalState: ModalState = React.useMemo(() => {\n    return [showModal, setShowModal];\n  }, [showModal]);\n\n  return (\n    <ServerContext.Provider\n      value={{ server, setServer, customUrl, setCustomUrl }}\n    >\n      <ModalContext.Provider value={modalState}>\n        <HttpProvider>\n          <SocketProvider>{children}</SocketProvider>\n        </HttpProvider>\n      </ModalContext.Provider>\n    </ServerContext.Provider>\n  );\n}\n\nfunction getServerUrl(server: Server, customUrl: string) {\n  switch (server) {\n    case \"custom\": {\n      return customUrl;\n    }\n    default: {\n      const useHttp = isLocalHost();\n      let slug: string = server;\n      if (server === \"mainnet-beta\") {\n        slug = \"mainnet\";\n      }\n      return `${\n        useHttp ? \"http\" : \"https\"\n      }://break-solana-${slug}.herokuapp.com`;\n    }\n  }\n}\n\nexport function useServer() {\n  const context = React.useContext(ServerContext);\n  if (!context) {\n    throw new Error(`useServer must be used within a ServerProvider`);\n  }\n  const { server, customUrl } = context;\n  const httpUrl = getServerUrl(server, customUrl);\n  const webSocketUrl = httpUrl.replace(\"http\", \"ws\");\n\n  return {\n    server,\n    httpUrl,\n    webSocketUrl,\n    name: serverName(server),\n  };\n}\n\nexport function useCustomUrl(): [string, SetCustomUrl] {\n  const context = React.useContext(ServerContext);\n  if (!context) {\n    throw new Error(`useCustomUrl must be used within a ServerProvider`);\n  }\n  return [context.customUrl, context.setCustomUrl];\n}\n\nexport function useClusterModal() {\n  const context = React.useContext(ModalContext);\n  if (!context) {\n    throw new Error(`useClusterModal must be used within a ServerProvider`);\n  }\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}