{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/server/http/index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useServer } from \"providers/server\";\nimport { useBalance } from \"providers/rpc/balance\";\nimport { fetchWithRetry } from \"./request\";\nimport { usePayerState } from \"providers/wallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let ConfigStatus;\n\n(function (ConfigStatus) {\n  ConfigStatus[ConfigStatus[\"Initialized\"] = 0] = \"Initialized\";\n  ConfigStatus[ConfigStatus[\"Fetching\"] = 1] = \"Fetching\";\n  ConfigStatus[ConfigStatus[\"Ready\"] = 2] = \"Ready\";\n  ConfigStatus[ConfigStatus[\"Failure\"] = 3] = \"Failure\";\n})(ConfigStatus || (ConfigStatus = {}));\n\nfunction configReducer(state, action) {\n  switch (action.status) {\n    case ConfigStatus.Ready:\n    case ConfigStatus.Initialized:\n      {\n        return { ...state,\n          ...action\n        };\n      }\n\n    case ConfigStatus.Failure:\n      {\n        if (state.status === ConfigStatus.Fetching) {\n          return { ...state,\n            ...action\n          };\n        } else {\n          return state;\n        }\n      }\n\n    case ConfigStatus.Fetching:\n      {\n        return { ...state,\n          ...action,\n          accounts: undefined\n        };\n      }\n  }\n}\n\nconst StateContext = /*#__PURE__*/React.createContext(undefined);\nconst RefContext = /*#__PURE__*/React.createContext(undefined);\nconst DispatchContext = /*#__PURE__*/React.createContext(undefined);\nexport function HttpProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = React.useReducer(configReducer, {\n    status: ConfigStatus.Fetching\n  });\n  const {\n    httpUrl\n  } = useServer();\n  const httpUrlRef = React.useRef(httpUrl);\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    initConfig(dispatch, httpUrlRef);\n  }, [httpUrl]);\n  const config = state.config;\n  const paymentRequired = config === null || config === void 0 ? void 0 : config.paymentRequired;\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    if (paymentRequired !== false) return;\n    refreshAccounts(dispatch, httpUrlRef, undefined);\n  }, [httpUrl, paymentRequired]);\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(DispatchContext.Provider, {\n      value: dispatch,\n      children: /*#__PURE__*/_jsxDEV(RefContext.Provider, {\n        value: httpUrlRef,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HttpProvider, \"A5D86EJMOlJS5qJt+gmxNIg1/6s=\", false, function () {\n  return [useServer];\n});\n\n_c = HttpProvider;\n\nasync function initConfig(dispatch, httpUrlRef) {\n  return fetchWithRetry(dispatch, httpUrlRef, {\n    route: \"init\"\n  });\n}\n\nasync function refreshAccounts(dispatch, httpUrlRef, paymentAccount) {\n  return fetchWithRetry(dispatch, httpUrlRef, {\n    route: \"accounts\",\n    paymentAccount\n  });\n}\n\nexport function useAccounts() {\n  _s2();\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useAccounts must be used within a ApiProvider`);\n  }\n\n  return context.accounts;\n}\n\n_s2(useAccounts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useConfig() {\n  _s3();\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useConfig must be used within a ApiProvider`);\n  }\n\n  return context.config;\n}\n\n_s3(useConfig, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useIsFetching() {\n  _s4();\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useIsFetching must be used within a ApiProvider`);\n  }\n\n  return context.status === ConfigStatus.Fetching;\n}\n\n_s4(useIsFetching, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useClusterParam() {\n  _s5();\n\n  var _context$config;\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useClusterParam must be used within a ApiProvider`);\n  }\n\n  const cluster = context === null || context === void 0 ? void 0 : (_context$config = context.config) === null || _context$config === void 0 ? void 0 : _context$config.cluster;\n\n  if (cluster && cluster !== \"mainnet-beta\") {\n    return `cluster=${cluster}`;\n  } else {\n    return \"\";\n  }\n}\n\n_s5(useClusterParam, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useClearAccounts() {\n  _s6();\n\n  const dispatch = React.useContext(DispatchContext);\n\n  if (!dispatch) {\n    throw new Error(`useClearAccounts must be used within a ApiProvider`);\n  }\n\n  return React.useCallback(() => {\n    dispatch({\n      status: ConfigStatus.Fetching\n    });\n    dispatch({\n      status: ConfigStatus.Failure\n    });\n  }, [dispatch]);\n}\n\n_s6(useClearAccounts, \"UnyTRIuCzC/6bSg0+y+qywk6VA4=\");\n\nexport function useRefreshAccounts() {\n  _s7();\n\n  const dispatch = React.useContext(DispatchContext);\n\n  if (!dispatch) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n\n  const httpUrlRef = React.useContext(RefContext);\n\n  if (!httpUrlRef) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n\n  const config = useConfig();\n  const [payer] = usePayerState();\n  const paymentRequired = config === null || config === void 0 ? void 0 : config.paymentRequired;\n  const balance = useBalance();\n  const cost = config === null || config === void 0 ? void 0 : config.gameCost;\n  return React.useCallback(() => {\n    if (paymentRequired === undefined || cost === undefined) return;\n\n    if (paymentRequired) {\n      if (!payer || balance === \"loading\" || balance < cost) {\n        dispatch({\n          status: ConfigStatus.Fetching\n        });\n        dispatch({\n          status: ConfigStatus.Failure\n        });\n        return;\n      }\n\n      refreshAccounts(dispatch, httpUrlRef, payer);\n    } else {\n      refreshAccounts(dispatch, httpUrlRef, undefined);\n    }\n  }, [httpUrlRef, dispatch, payer, paymentRequired, balance, cost]);\n}\n\n_s7(useRefreshAccounts, \"XLDj1e0DZc16h2LjvJWP3oWEjrI=\", false, function () {\n  return [useConfig, usePayerState, useBalance];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"HttpProvider\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/server/http/index.tsx"],"names":["React","useServer","useBalance","fetchWithRetry","usePayerState","ConfigStatus","configReducer","state","action","status","Ready","Initialized","Failure","Fetching","accounts","undefined","StateContext","createContext","RefContext","DispatchContext","HttpProvider","children","dispatch","useReducer","httpUrl","httpUrlRef","useRef","useEffect","current","initConfig","config","paymentRequired","refreshAccounts","route","paymentAccount","useAccounts","context","useContext","Error","useConfig","useIsFetching","useClusterParam","cluster","useClearAccounts","useCallback","useRefreshAccounts","payer","balance","cost","gameCost"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Config, AccountsConfig } from \"./config\";\nimport { useServer } from \"providers/server\";\nimport { useBalance } from \"providers/rpc/balance\";\nimport { fetchWithRetry } from \"./request\";\nimport { Account, Connection } from \"@solana/web3.js\";\nimport { usePayerState } from \"providers/wallet\";\n\nexport enum ConfigStatus {\n  Initialized,\n  Fetching,\n  Ready,\n  Failure,\n}\n\ninterface State {\n  status: ConfigStatus;\n  config?: Config;\n  connection?: Connection;\n  accounts?: AccountsConfig;\n}\n\ninterface Initialized {\n  status: ConfigStatus.Initialized;\n  config: Config;\n}\n\ninterface Fetching {\n  status: ConfigStatus.Fetching;\n}\n\ninterface Ready {\n  status: ConfigStatus.Ready;\n  accounts: AccountsConfig;\n}\n\ninterface Failure {\n  status: ConfigStatus.Failure;\n  config?: undefined;\n  accounts?: undefined;\n}\n\nexport type Action = Initialized | Fetching | Ready | Failure;\nexport type Dispatch = (action: Action) => void;\n\nfunction configReducer(state: State, action: Action): State {\n  switch (action.status) {\n    case ConfigStatus.Ready:\n    case ConfigStatus.Initialized: {\n      return { ...state, ...action };\n    }\n    case ConfigStatus.Failure: {\n      if (state.status === ConfigStatus.Fetching) {\n        return { ...state, ...action };\n      } else {\n        return state;\n      }\n    }\n    case ConfigStatus.Fetching: {\n      return {\n        ...state,\n        ...action,\n        accounts: undefined,\n      };\n    }\n  }\n}\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst RefContext = React.createContext<\n  React.MutableRefObject<string> | undefined\n>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ApiProviderProps = { children: React.ReactNode };\nexport function HttpProvider({ children }: ApiProviderProps) {\n  const [state, dispatch] = React.useReducer(configReducer, {\n    status: ConfigStatus.Fetching,\n  });\n\n  const { httpUrl } = useServer();\n  const httpUrlRef = React.useRef(httpUrl);\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    initConfig(dispatch, httpUrlRef);\n  }, [httpUrl]);\n\n  const config = state.config;\n  const paymentRequired = config?.paymentRequired;\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    if (paymentRequired !== false) return;\n    refreshAccounts(dispatch, httpUrlRef, undefined);\n  }, [httpUrl, paymentRequired]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <RefContext.Provider value={httpUrlRef}>{children}</RefContext.Provider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function initConfig(\n  dispatch: Dispatch,\n  httpUrlRef: React.MutableRefObject<string>\n): Promise<void> {\n  return fetchWithRetry(dispatch, httpUrlRef, { route: \"init\" });\n}\n\nasync function refreshAccounts(\n  dispatch: Dispatch,\n  httpUrlRef: React.MutableRefObject<string>,\n  paymentAccount: Account | undefined\n): Promise<void> {\n  return fetchWithRetry(dispatch, httpUrlRef, {\n    route: \"accounts\",\n    paymentAccount,\n  });\n}\n\nexport function useAccounts() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useAccounts must be used within a ApiProvider`);\n  }\n  return context.accounts;\n}\n\nexport function useConfig() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useConfig must be used within a ApiProvider`);\n  }\n  return context.config;\n}\n\nexport function useIsFetching() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useIsFetching must be used within a ApiProvider`);\n  }\n  return context.status === ConfigStatus.Fetching;\n}\n\nexport function useClusterParam(): string {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useClusterParam must be used within a ApiProvider`);\n  }\n  const cluster = context?.config?.cluster;\n  if (cluster && cluster !== \"mainnet-beta\") {\n    return `cluster=${cluster}`;\n  } else {\n    return \"\";\n  }\n}\n\nexport function useClearAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useClearAccounts must be used within a ApiProvider`);\n  }\n\n  return React.useCallback(() => {\n    dispatch({ status: ConfigStatus.Fetching });\n    dispatch({ status: ConfigStatus.Failure });\n  }, [dispatch]);\n}\n\nexport function useRefreshAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n  const httpUrlRef = React.useContext(RefContext);\n  if (!httpUrlRef) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n  const config = useConfig();\n  const [payer] = usePayerState();\n  const paymentRequired = config?.paymentRequired;\n  const balance = useBalance();\n  const cost = config?.gameCost;\n  return React.useCallback(() => {\n    if (paymentRequired === undefined || cost === undefined) return;\n    if (paymentRequired) {\n      if (!payer || balance === \"loading\" || balance < cost) {\n        dispatch({ status: ConfigStatus.Fetching });\n        dispatch({ status: ConfigStatus.Failure });\n        return;\n      }\n      refreshAccounts(dispatch, httpUrlRef, payer);\n    } else {\n      refreshAccounts(dispatch, httpUrlRef, undefined);\n    }\n  }, [httpUrlRef, dispatch, payer, paymentRequired, balance, cost]);\n}\n"]},"metadata":{},"sourceType":"module"}