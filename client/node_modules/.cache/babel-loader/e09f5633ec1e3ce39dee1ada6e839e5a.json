{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { eventToSentryRequest } from '@sentry/core';\nimport { getGlobalObject, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\nimport { BaseTransport } from './base';\nvar global = getGlobalObject();\n/** `fetch` based transport */\n\nvar FetchTransport =\n/** @class */\nfunction (_super) {\n  __extends(FetchTransport, _super);\n\n  function FetchTransport() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  FetchTransport.prototype.sendEvent = function (event) {\n    var _this = this;\n\n    var eventType = event.type || 'event';\n\n    if (this._isRateLimited(eventType)) {\n      return Promise.reject({\n        event: event,\n        reason: \"Transport locked till \" + this._disabledUntil(eventType) + \" due to too many requests.\",\n        status: 429\n      });\n    }\n\n    var sentryReq = eventToSentryRequest(event, this._api);\n    var options = {\n      body: sentryReq.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: supportsReferrerPolicy() ? 'origin' : ''\n    };\n\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer.add(new SyncPromise(function (resolve, reject) {\n      global.fetch(sentryReq.url, options).then(function (response) {\n        var headers = {\n          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n          'retry-after': response.headers.get('Retry-After')\n        };\n\n        _this._handleResponse({\n          eventType: eventType,\n          response: response,\n          headers: headers,\n          resolve: resolve,\n          reject: reject\n        });\n      }).catch(reject);\n    }));\n  };\n\n  return FetchTransport;\n}(BaseTransport);\n\nexport { FetchTransport };","map":{"version":3,"sources":["../../src/transports/fetch.ts"],"names":[],"mappings":";AAAA,SAAS,oBAAT,QAAqC,cAArC;AAEA,SAAS,eAAT,EAA0B,sBAA1B,EAAkD,WAAlD,QAAqE,eAArE;AAEA,SAAS,aAAT,QAA8B,QAA9B;AAEA,IAAM,MAAM,GAAG,eAAe,EAA9B;AAEA;;AACA,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;;AAApC,WAAA,cAAA,GAAA;;AA+CC;AA9CC;;AAEG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,KAAjB,EAA6B;AAA7B,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,SAAS,GAAG,KAAK,CAAC,IAAN,IAAc,OAAhC;;AAEA,QAAI,KAAK,cAAL,CAAoB,SAApB,CAAJ,EAAoC;AAClC,aAAO,OAAO,CAAC,MAAR,CAAe;AACpB,QAAA,KAAK,EAAA,KADe;AAEpB,QAAA,MAAM,EAAE,2BAAyB,KAAK,cAAL,CAAoB,SAApB,CAAzB,GAAuD,4BAF3C;AAGpB,QAAA,MAAM,EAAE;AAHY,OAAf,CAAP;AAKD;;AAED,QAAM,SAAS,GAAG,oBAAoB,CAAC,KAAD,EAAQ,KAAK,IAAb,CAAtC;AACA,QAAM,OAAO,GAAgB;AAC3B,MAAA,IAAI,EAAE,SAAS,CAAC,IADW;AAE3B,MAAA,MAAM,EAAE,MAFmB;AAG3B;AACA;AACA;AACA;AACA,MAAA,cAAc,EAAG,sBAAsB,KAAK,QAAL,GAAgB;AAP5B,KAA7B;;AASA,QAAI,KAAK,OAAL,CAAa,eAAb,KAAiC,SAArC,EAAgD;AAC9C,MAAA,MAAM,CAAC,MAAP,CAAc,OAAd,EAAuB,KAAK,OAAL,CAAa,eAApC;AACD;;AACD,QAAI,KAAK,OAAL,CAAa,OAAb,KAAyB,SAA7B,EAAwC;AACtC,MAAA,OAAO,CAAC,OAAR,GAAkB,KAAK,OAAL,CAAa,OAA/B;AACD;;AAED,WAAO,KAAK,OAAL,CAAa,GAAb,CACL,IAAI,WAAJ,CAA0B,UAAC,OAAD,EAAU,MAAV,EAAgB;AACxC,MAAA,MAAM,CACH,KADH,CACS,SAAS,CAAC,GADnB,EACwB,OADxB,EAEG,IAFH,CAEQ,UAAA,QAAA,EAAQ;AACZ,YAAM,OAAO,GAAG;AACd,kCAAwB,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAqB,sBAArB,CADV;AAEd,yBAAe,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAqB,aAArB;AAFD,SAAhB;;AAIA,QAAA,KAAI,CAAC,eAAL,CAAqB;AAAE,UAAA,SAAS,EAAA,SAAX;AAAa,UAAA,QAAQ,EAAA,QAArB;AAAuB,UAAA,OAAO,EAAA,OAA9B;AAAgC,UAAA,OAAO,EAAA,OAAvC;AAAyC,UAAA,MAAM,EAAA;AAA/C,SAArB;AACD,OARH,EASG,KATH,CASS,MATT;AAUD,KAXD,CADK,CAAP;AAcD,GA1CM;;AA2CT,SAAA,cAAA;AAAC,CA/CD,CAAoC,aAApC,CAAA","sourcesContent":["import { eventToSentryRequest } from '@sentry/core';\nimport { Event, Response } from '@sentry/types';\nimport { getGlobalObject, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\nconst global = getGlobalObject<Window>();\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    const eventType = event.type || 'event';\n\n    if (this._isRateLimited(eventType)) {\n      return Promise.reject({\n        event,\n        reason: `Transport locked till ${this._disabledUntil(eventType)} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const sentryReq = eventToSentryRequest(event, this._api);\n    const options: RequestInit = {\n      body: sentryReq.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        global\n          .fetch(sentryReq.url, options)\n          .then(response => {\n            const headers = {\n              'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n              'retry-after': response.headers.get('Retry-After'),\n            };\n            this._handleResponse({ eventType, response, headers, resolve, reject });\n          })\n          .catch(reject);\n      }),\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}