{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/api/index.tsx\";\nimport React from \"react\";\nimport { useServer } from \"providers/server\";\nimport { useBalance } from \"providers/balance\";\nimport { fetchWithRetry } from \"./request\";\nimport { useAccountState } from \"providers/account\";\nexport let ActionType;\n\n(function (ActionType) {\n  ActionType[ActionType[\"Initialize\"] = 0] = \"Initialize\";\n  ActionType[ActionType[\"FetchInit\"] = 1] = \"FetchInit\";\n  ActionType[ActionType[\"FetchAccounts\"] = 2] = \"FetchAccounts\";\n  ActionType[ActionType[\"Ready\"] = 3] = \"Ready\";\n  ActionType[ActionType[\"Override\"] = 4] = \"Override\";\n  ActionType[ActionType[\"Failure\"] = 5] = \"Failure\";\n})(ActionType || (ActionType = {}));\n\nfunction configReducer(state, action) {\n  if (action.type === ActionType.FetchInit) {\n    return {\n      url: action.url\n    };\n  } else if (action.url !== state.url) {\n    return state;\n  }\n\n  switch (action.type) {\n    case ActionType.Ready:\n    case ActionType.Initialize:\n      {\n        return { ...state,\n          ...action\n        };\n      }\n\n    case ActionType.Override:\n      {\n        return { ...state,\n          ...action\n        };\n      }\n\n    case ActionType.FetchAccounts:\n      {\n        return { ...state,\n          ...action,\n          accounts: undefined\n        };\n      }\n  }\n}\n\nconst StateContext = React.createContext(undefined);\nconst RefContext = React.createContext(undefined);\nconst DispatchContext = React.createContext(undefined);\nexport function ApiProvider({\n  children\n}) {\n  const [state, dispatch] = React.useReducer(configReducer, {});\n  const {\n    httpUrl\n  } = useServer();\n  const httpUrlRef = React.useRef(httpUrl);\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    initConfig(dispatch, httpUrlRef);\n  }, [httpUrl]);\n  const config = state.config;\n  const paymentRequired = config === null || config === void 0 ? void 0 : config.paymentRequired;\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    if (paymentRequired !== false) return;\n    refreshAccounts(dispatch, httpUrlRef, undefined);\n  }, [httpUrl, paymentRequired]);\n  return /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DispatchContext.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(RefContext.Provider, {\n    value: httpUrlRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, children)));\n}\n\nasync function initConfig(dispatch, httpUrlRef) {\n  return fetchWithRetry(dispatch, httpUrlRef, {\n    route: \"init\"\n  });\n}\n\nasync function refreshAccounts(dispatch, httpUrlRef, paymentAccount) {\n  return fetchWithRetry(dispatch, httpUrlRef, {\n    route: \"accounts\",\n    paymentAccount\n  });\n}\n\nexport function useAccounts() {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useAccounts must be used within a ApiProvider`);\n  }\n\n  return context.accounts;\n}\nexport function useConfig() {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useConfig must be used within a ApiProvider`);\n  }\n\n  return context.config;\n}\nexport function useConnection() {\n  const config = useConfig();\n  return config === null || config === void 0 ? void 0 : config.connection;\n}\nexport function useIsReady() {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useIsReady must be used within a ApiProvider`);\n  }\n\n  return context.config !== undefined && context.accounts !== undefined;\n}\nexport function useClusterParam() {\n  var _context$config;\n\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useClusterParam must be used within a ApiProvider`);\n  }\n\n  const cluster = context === null || context === void 0 ? void 0 : (_context$config = context.config) === null || _context$config === void 0 ? void 0 : _context$config.cluster;\n\n  if (cluster && cluster !== \"mainnet-beta\") {\n    return `cluster=${cluster}`;\n  } else {\n    return \"\";\n  }\n}\nexport function useClearAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n\n  if (!dispatch) {\n    throw new Error(`useClearAccounts must be used within a ApiProvider`);\n  }\n\n  return React.useCallback(() => {\n    dispatch({\n      status: ActionType.Fetching\n    });\n    dispatch({\n      status: ActionType.Failure\n    });\n  }, [dispatch]);\n}\nexport function useRefreshAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n\n  if (!dispatch) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n\n  const httpUrlRef = React.useContext(RefContext);\n\n  if (!httpUrlRef) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n\n  const config = useConfig();\n  const [paymentAccount] = useAccountState();\n  const paymentRequired = config === null || config === void 0 ? void 0 : config.paymentRequired;\n  const balance = useBalance();\n  const cost = config === null || config === void 0 ? void 0 : config.gameCost;\n  return React.useCallback(() => {\n    if (paymentRequired === undefined || cost === undefined) return;\n\n    if (paymentRequired) {\n      if (!paymentAccount || balance === \"loading\" || balance < cost) {\n        dispatch({\n          status: ActionType.Fetching\n        });\n        dispatch({\n          status: ActionType.Failure\n        });\n        return;\n      }\n\n      refreshAccounts(dispatch, httpUrlRef, paymentAccount);\n    } else {\n      refreshAccounts(dispatch, httpUrlRef, undefined);\n    }\n  }, [httpUrlRef, dispatch, paymentAccount, paymentRequired, balance, cost]);\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/api/index.tsx"],"names":["React","useServer","useBalance","fetchWithRetry","useAccountState","ActionType","configReducer","state","action","type","FetchInit","url","Ready","Initialize","Override","FetchAccounts","accounts","undefined","StateContext","createContext","RefContext","DispatchContext","ApiProvider","children","dispatch","useReducer","httpUrl","httpUrlRef","useRef","useEffect","current","initConfig","config","paymentRequired","refreshAccounts","route","paymentAccount","useAccounts","context","useContext","Error","useConfig","useConnection","connection","useIsReady","useClusterParam","cluster","useClearAccounts","useCallback","status","Fetching","Failure","useRefreshAccounts","balance","cost","gameCost"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Config, AccountsConfig } from \"./config\";\nimport { useServer } from \"providers/server\";\nimport { useBalance } from \"providers/balance\";\nimport { fetchWithRetry } from \"./request\";\nimport { Account, Connection } from \"@solana/web3.js\";\nimport { useAccountState } from \"providers/account\";\n\nexport enum ActionType {\n  Initialize,\n  FetchInit,\n  FetchAccounts,\n  Ready,\n  Override,\n  Failure,\n}\n\ninterface State {\n  url?: string;\n  config?: Config;\n  connection?: Connection;\n  accounts?: AccountsConfig;\n}\n\ninterface Initialize {\n  type: ActionType.Initialize;\n  url: string;\n  config: Config;\n}\n\ninterface FetchInit {\n  type: ActionType.FetchInit;\n  url: string;\n}\n\ninterface FetchAccounts {\n  type: ActionType.FetchAccounts;\n  url: string;\n}\n\ninterface Override {\n  type: ActionType.Override;\n  url: string;\n  connection: Connection;\n}\n\ninterface Ready {\n  type: ActionType.Ready;\n  url: string;\n  accounts: AccountsConfig;\n}\n\nexport type Action = Initialize | FetchInit | FetchAccounts | Override | Ready;\nexport type Dispatch = (action: Action) => void;\n\nfunction configReducer(state: State, action: Action): State {\n  if (action.type === ActionType.FetchInit) {\n    return { url: action.url };\n  } else if (action.url !== state.url) {\n    return state;\n  }\n\n  switch (action.type) {\n    case ActionType.Ready:\n    case ActionType.Initialize: {\n      return { ...state, ...action };\n    }\n    case ActionType.Override: {\n      return { ...state, ...action };\n    }\n    case ActionType.FetchAccounts: {\n      return {\n        ...state,\n        ...action,\n        accounts: undefined,\n      };\n    }\n  }\n}\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst RefContext = React.createContext<\n  React.MutableRefObject<string> | undefined\n>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ApiProviderProps = { children: React.ReactNode };\nexport function ApiProvider({ children }: ApiProviderProps) {\n  const [state, dispatch] = React.useReducer(configReducer, {});\n\n  const { httpUrl } = useServer();\n  const httpUrlRef = React.useRef(httpUrl);\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    initConfig(dispatch, httpUrlRef);\n  }, [httpUrl]);\n\n  const config = state.config;\n  const paymentRequired = config?.paymentRequired;\n  React.useEffect(() => {\n    httpUrlRef.current = httpUrl;\n    if (paymentRequired !== false) return;\n    refreshAccounts(dispatch, httpUrlRef, undefined);\n  }, [httpUrl, paymentRequired]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <RefContext.Provider value={httpUrlRef}>{children}</RefContext.Provider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function initConfig(\n  dispatch: Dispatch,\n  httpUrlRef: React.MutableRefObject<string>\n): Promise<void> {\n  return fetchWithRetry(dispatch, httpUrlRef, { route: \"init\" });\n}\n\nasync function refreshAccounts(\n  dispatch: Dispatch,\n  httpUrlRef: React.MutableRefObject<string>,\n  paymentAccount: Account | undefined\n): Promise<void> {\n  return fetchWithRetry(dispatch, httpUrlRef, {\n    route: \"accounts\",\n    paymentAccount,\n  });\n}\n\nexport function useAccounts() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useAccounts must be used within a ApiProvider`);\n  }\n  return context.accounts;\n}\n\nexport function useConfig() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useConfig must be used within a ApiProvider`);\n  }\n  return context.config;\n}\n\nexport function useConnection() {\n  const config = useConfig();\n  return config?.connection;\n}\n\nexport function useIsReady() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useIsReady must be used within a ApiProvider`);\n  }\n  return context.config !== undefined && context.accounts !== undefined;\n}\n\nexport function useClusterParam(): string {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useClusterParam must be used within a ApiProvider`);\n  }\n  const cluster = context?.config?.cluster;\n  if (cluster && cluster !== \"mainnet-beta\") {\n    return `cluster=${cluster}`;\n  } else {\n    return \"\";\n  }\n}\n\nexport function useClearAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useClearAccounts must be used within a ApiProvider`);\n  }\n\n  return React.useCallback(() => {\n    dispatch({ status: ActionType.Fetching });\n    dispatch({ status: ActionType.Failure });\n  }, [dispatch]);\n}\n\nexport function useRefreshAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n  const httpUrlRef = React.useContext(RefContext);\n  if (!httpUrlRef) {\n    throw new Error(`useRefreshAccounts must be used within a ApiProvider`);\n  }\n  const config = useConfig();\n  const [paymentAccount] = useAccountState();\n  const paymentRequired = config?.paymentRequired;\n  const balance = useBalance();\n  const cost = config?.gameCost;\n  return React.useCallback(() => {\n    if (paymentRequired === undefined || cost === undefined) return;\n    if (paymentRequired) {\n      if (!paymentAccount || balance === \"loading\" || balance < cost) {\n        dispatch({ status: ActionType.Fetching });\n        dispatch({ status: ActionType.Failure });\n        return;\n      }\n      refreshAccounts(dispatch, httpUrlRef, paymentAccount);\n    } else {\n      refreshAccounts(dispatch, httpUrlRef, undefined);\n    }\n  }, [httpUrlRef, dispatch, paymentAccount, paymentRequired, balance, cost]);\n}\n"]},"metadata":{},"sourceType":"module"}