{"ast":null,"code":"import * as React from \"react\";\nimport { useAccounts, useConnection } from \"../api\";\nimport { useDispatch, COMMITMENT_PARAM } from \"./index\";\nexport const DEBUG_MODE = new URLSearchParams(window.location.search).has(\"debug\"); // Determine commitment levels to subscribe to. \"singleGossip\" is used\n// to stop tx send retries so it must be returned\n\nconst subscribedCommitments = () => {\n  if (DEBUG_MODE) return [\"recent\", \"single\", \"singleGossip\"];\n\n  switch (COMMITMENT_PARAM) {\n    case \"recent\":\n    case \"single\":\n      {\n        return [COMMITMENT_PARAM, \"singleGossip\"];\n      }\n\n    default:\n      {\n        return [\"singleGossip\"];\n      }\n  }\n};\n\nexport function ConfirmedHelper({\n  children\n}) {\n  const dispatch = useDispatch();\n  const connection = useConnection();\n  const accounts = useAccounts(); // React.useEffect(() => {\n  //   if (connection === undefined || accounts === undefined) return;\n  //   const commitments = subscribedCommitments();\n  //   const partitionCount = accounts.programAccounts.length;\n  //   const accountSubscriptions = accounts.programAccounts.map(\n  //     (account, partition) =>\n  //       commitments.map((commitment) =>\n  //         connection.onAccountChange(\n  //           account,\n  //           (accountInfo: AccountInfo<Buffer>, { slot }) => {\n  //             const ids = new Set(Bytes.programDataToIds(accountInfo.data));\n  //             const activeIdPartition = {\n  //               ids,\n  //               partition,\n  //               partitionCount,\n  //             };\n  //             dispatch({\n  //               type: \"update\",\n  //               activeIdPartition,\n  //               commitment,\n  //               estimatedSlot: slot,\n  //               receivedAt: performance.now(),\n  //             });\n  //           },\n  //           commitment\n  //         )\n  //       )\n  //   );\n  //   return () => {\n  //     accountSubscriptions.forEach((listeners) => {\n  //       listeners.forEach((listener) => {\n  //         connection.removeAccountChangeListener(listener);\n  //       });\n  //     });\n  //   };\n  // }, [dispatch, connection, accounts]);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/confirmed.tsx"],"names":["React","useAccounts","useConnection","useDispatch","COMMITMENT_PARAM","DEBUG_MODE","URLSearchParams","window","location","search","has","subscribedCommitments","ConfirmedHelper","children","dispatch","connection","accounts"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,QAA3C;AACA,SAASC,WAAT,EAAyCC,gBAAzC,QAAiE,SAAjE;AAGA,OAAO,MAAMC,UAAU,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,EAA4CC,GAA5C,CACxB,OADwB,CAAnB,C,CAIP;AACA;;AACA,MAAMC,qBAAqB,GAAG,MAA2B;AACvD,MAAIN,UAAJ,EAAgB,OAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,cAArB,CAAP;;AAChB,UAAQD,gBAAR;AACE,SAAK,QAAL;AACA,SAAK,QAAL;AAAe;AACb,eAAO,CAACA,gBAAD,EAAmB,cAAnB,CAAP;AACD;;AACD;AAAS;AACP,eAAO,CAAC,cAAD,CAAP;AACD;AAPH;AASD,CAXD;;AAcA,OAAO,SAASQ,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAA8C;AACnD,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,UAAU,GAAGb,aAAa,EAAhC;AACA,QAAMc,QAAQ,GAAGf,WAAW,EAA5B,CAHmD,CAKnD;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAO,0CAAGY,QAAH,CAAP;AACD","sourcesContent":["import * as React from \"react\";\n\nimport { AccountInfo } from \"@solana/web3.js\";\nimport { useAccounts, useConnection } from \"../api\";\nimport { useDispatch, TrackedCommitment, COMMITMENT_PARAM } from \"./index\";\nimport * as Bytes from \"utils/bytes\";\n\nexport const DEBUG_MODE = new URLSearchParams(window.location.search).has(\n  \"debug\"\n);\n\n// Determine commitment levels to subscribe to. \"singleGossip\" is used\n// to stop tx send retries so it must be returned\nconst subscribedCommitments = (): TrackedCommitment[] => {\n  if (DEBUG_MODE) return [\"recent\", \"single\", \"singleGossip\"];\n  switch (COMMITMENT_PARAM) {\n    case \"recent\":\n    case \"single\": {\n      return [COMMITMENT_PARAM, \"singleGossip\"];\n    }\n    default: {\n      return [\"singleGossip\"];\n    }\n  }\n};\n\ntype Props = { children: React.ReactNode };\nexport function ConfirmedHelper({ children }: Props) {\n  const dispatch = useDispatch();\n  const connection = useConnection();\n  const accounts = useAccounts();\n\n  // React.useEffect(() => {\n  //   if (connection === undefined || accounts === undefined) return;\n\n  //   const commitments = subscribedCommitments();\n  //   const partitionCount = accounts.programAccounts.length;\n\n  //   const accountSubscriptions = accounts.programAccounts.map(\n  //     (account, partition) =>\n  //       commitments.map((commitment) =>\n  //         connection.onAccountChange(\n  //           account,\n  //           (accountInfo: AccountInfo<Buffer>, { slot }) => {\n  //             const ids = new Set(Bytes.programDataToIds(accountInfo.data));\n  //             const activeIdPartition = {\n  //               ids,\n  //               partition,\n  //               partitionCount,\n  //             };\n  //             dispatch({\n  //               type: \"update\",\n  //               activeIdPartition,\n  //               commitment,\n  //               estimatedSlot: slot,\n  //               receivedAt: performance.now(),\n  //             });\n  //           },\n  //           commitment\n  //         )\n  //       )\n  //   );\n\n  //   return () => {\n  //     accountSubscriptions.forEach((listeners) => {\n  //       listeners.forEach((listener) => {\n  //         connection.removeAccountChangeListener(listener);\n  //       });\n  //     });\n  //   };\n  // }, [dispatch, connection, accounts]);\n\n  return <>{children}</>;\n}\n"]},"metadata":{},"sourceType":"module"}