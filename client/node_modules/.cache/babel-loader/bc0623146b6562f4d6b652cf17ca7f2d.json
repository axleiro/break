{"ast":null,"code":"import*as React from\"react\";import bs58 from\"bs58\";import{useTargetSlotRef,useDispatch}from\"./index\";import{useConfig,useAccounts}from\"providers/api\";import{reportError}from\"utils\";import{useWorkerState,WORKER}from\"providers/worker\";var SEND_TIMEOUT_MS=45000;var RETRY_INTERVAL_MS=500;export var CreateTxContext=React.createContext(undefined);export function CreateTxProvider(_ref){var children=_ref.children;var createTx=React.useRef(function(){});var config=useConfig();var accounts=useAccounts();var idCounter=React.useRef(0);var targetSlotRef=useTargetSlotRef();var programDataAccount=accounts===null||accounts===void 0?void 0:accounts.programAccounts[0].toBase58();var workerState=useWorkerState();// Reset counter when program data accounts are refreshed\nReact.useEffect(function(){idCounter.current=0;},[programDataAccount]);var dispatch=useDispatch();React.useEffect(function(){createTx.current=function(){if(workerState===\"loading\"||!config||!accounts||!targetSlotRef.current)return;var id=idCounter.current;if(id<accounts.accountCapacity*accounts.programAccounts.length){idCounter.current++;createTransaction(targetSlotRef.current,accounts,id,dispatch);}else{reportError(new Error(\"Account capacity exceeded\"),\"failed to create transaction\");}};},[config,accounts,workerState,dispatch,targetSlotRef]);return/*#__PURE__*/React.createElement(CreateTxContext.Provider,{value:createTx},children);}export function createTransaction(targetSlot,accounts,trackingId,dispatch){var feeAccounts=accounts.feeAccounts,programAccounts=accounts.programAccounts;var bitId=Math.floor(trackingId/feeAccounts.length);var accountIndex=trackingId%feeAccounts.length;var programDataAccount=programAccounts[accountIndex];var feeAccount=feeAccounts[accountIndex];WORKER.createTransaction({type:\"create\",trackingId:trackingId}).then(function(response){var signature=response.signature;var sentAt=performance.now();var pendingTransaction={sentAt:sentAt,targetSlot:targetSlot};pendingTransaction.timeoutId=window.setTimeout(function(){dispatch({type:\"timeout\",trackingId:trackingId});},SEND_TIMEOUT_MS);var details={id:bitId,feeAccount:feeAccount.publicKey,programAccount:programDataAccount,signature:bs58.encode(signature)};dispatch({type:\"new\",details:details,trackingId:trackingId,pendingTransaction:pendingTransaction});// setTimeout(() => {\n//   const retryUntil = new URLSearchParams(window.location.search).get(\n//     \"retry_until\"\n//   );\n//   if (retryUntil === null || retryUntil !== \"disabled\") {\n//     pendingTransaction.retryId = window.setInterval(() => {\n//       if (socket.readyState === WebSocket.OPEN) {\n//         socket.send(serializedTransaction);\n//       }\n//     }, RETRY_INTERVAL_MS);\n//   }\n// }, 1);\n},function(error){console.error(error);});}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/create.tsx"],"names":["React","bs58","useTargetSlotRef","useDispatch","useConfig","useAccounts","reportError","useWorkerState","WORKER","SEND_TIMEOUT_MS","RETRY_INTERVAL_MS","CreateTxContext","createContext","undefined","CreateTxProvider","children","createTx","useRef","config","accounts","idCounter","targetSlotRef","programDataAccount","programAccounts","toBase58","workerState","useEffect","current","dispatch","id","accountCapacity","length","createTransaction","Error","targetSlot","trackingId","feeAccounts","bitId","Math","floor","accountIndex","feeAccount","type","then","response","signature","sentAt","performance","now","pendingTransaction","timeoutId","window","setTimeout","details","publicKey","programAccount","encode","error","console"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Blockhash, PublicKey } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport {\n  Dispatch,\n  PendingTransaction,\n  TransactionDetails,\n  useTargetSlotRef,\n  useDispatch,\n} from \"./index\";\nimport { AccountsConfig } from \"../api/config\";\nimport { useConfig, useAccounts } from \"providers/api\";\nimport { reportError } from \"utils\";\nimport {\n  CreateTransactionRPC,\n  CreateTransactionResponseMessage,\n} from \"../../workers/create-transaction-rpc\";\nimport { useWorkerState, WORKER } from \"providers/worker\";\n\nconst SEND_TIMEOUT_MS = 45000;\nconst RETRY_INTERVAL_MS = 500;\n\nexport const CreateTxContext = React.createContext<\n  React.MutableRefObject<() => void | undefined> | undefined\n>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function CreateTxProvider({ children }: ProviderProps) {\n  const createTx = React.useRef(() => {});\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef<number>(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts?.programAccounts[0].toBase58();\n  const workerState = useWorkerState();\n\n  // Reset counter when program data accounts are refreshed\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    createTx.current = () => {\n      if (\n        workerState === \"loading\" ||\n        !config ||\n        !accounts ||\n        !targetSlotRef.current\n      )\n        return;\n      const id = idCounter.current;\n      if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n        idCounter.current++;\n        createTransaction(\n          targetSlotRef.current,\n          accounts,\n          id,\n          dispatch,\n        );\n      } else {\n        reportError(\n          new Error(\"Account capacity exceeded\"),\n          \"failed to create transaction\"\n        );\n      }\n    };\n  }, [config, accounts, workerState, dispatch, targetSlotRef]);\n\n  return (\n    <CreateTxContext.Provider value={createTx}>\n      {children}\n    </CreateTxContext.Provider>\n  );\n}\n\nexport function createTransaction(\n  targetSlot: number,\n  accounts: AccountsConfig,\n  trackingId: number,\n  dispatch: Dispatch,\n) {\n  const { feeAccounts, programAccounts } = accounts;\n\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n\n  WORKER\n    .createTransaction({\n      type: \"create\",\n      trackingId: trackingId,\n    })\n    .then(\n      (response: CreateTransactionResponseMessage) => {\n        const { signature } = response;\n        const sentAt = performance.now();\n        const pendingTransaction: PendingTransaction = { sentAt, targetSlot };\n        pendingTransaction.timeoutId = window.setTimeout(() => {\n          dispatch({ type: \"timeout\", trackingId });\n        }, SEND_TIMEOUT_MS);\n\n        const details: TransactionDetails = {\n          id: bitId,\n          feeAccount: feeAccount.publicKey,\n          programAccount: programDataAccount,\n          signature: bs58.encode(signature),\n        };\n\n        dispatch({\n          type: \"new\",\n          details,\n          trackingId,\n          pendingTransaction,\n        });\n\n        // setTimeout(() => {\n        //   const retryUntil = new URLSearchParams(window.location.search).get(\n        //     \"retry_until\"\n        //   );\n        //   if (retryUntil === null || retryUntil !== \"disabled\") {\n        //     pendingTransaction.retryId = window.setInterval(() => {\n        //       if (socket.readyState === WebSocket.OPEN) {\n        //         socket.send(serializedTransaction);\n        //       }\n        //     }, RETRY_INTERVAL_MS);\n        //   }\n        // }, 1);\n      },\n      (error: any) => {\n        console.error(error);\n      }\n    );\n}\n"]},"metadata":{},"sourceType":"module"}