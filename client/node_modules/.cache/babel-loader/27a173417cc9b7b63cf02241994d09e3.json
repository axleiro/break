{"ast":null,"code":"// eslint-disable-next-line import/no-webpack-loader-syntax\nimport CreateTransactionWorker from \"worker-loader!./create-transaction-worker-script\";\nexport class CreateTransactionRPC {\n  constructor() {\n    this.worker = void 0;\n    this.callbacks = {};\n    this.onReady = void 0;\n    this.worker = new CreateTransactionWorker();\n    this.worker.onmessage = this.handleMessages.bind(this);\n  }\n\n  handleMessages(event) {\n    let message = event.data;\n\n    if (message === \"ready\" && this.onReady) {\n      this.onReady();\n    }\n\n    if (message.trackingId in this.callbacks) {\n      let callbacks = this.callbacks[message.trackingId];\n      delete this.callbacks[message.trackingId];\n\n      if (\"error\" in message) {\n        callbacks[1](message.error);\n        return;\n      }\n\n      callbacks[0](message);\n    }\n  }\n\n  setReadyListener(onReady) {\n    this.onReady = onReady;\n  }\n\n  initialize(message) {\n    this.worker.postMessage(message);\n  }\n\n  createTransaction(message) {\n    return new Promise((resolve, reject) => {\n      this.callbacks[message.trackingId] = [resolve, reject];\n      this.worker.postMessage(message);\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/workers/create-transaction-rpc.ts"],"names":["CreateTransactionWorker","CreateTransactionRPC","constructor","worker","callbacks","onReady","onmessage","handleMessages","bind","event","message","data","trackingId","error","setReadyListener","initialize","postMessage","createTransaction","Promise","resolve","reject"],"mappings":"AAAA;AACA,OAAOA,uBAAP,MAAoC,kDAApC;AAsBA,OAAO,MAAMC,oBAAN,CAA2B;AAMhCC,EAAAA,WAAW,GAAG;AAAA,SALNC,MAKM;AAAA,SAHNC,SAGM,GAH4C,EAG5C;AAAA,SAFNC,OAEM;AACZ,SAAKF,MAAL,GAAc,IAAIH,uBAAJ,EAAd;AACA,SAAKG,MAAL,CAAYG,SAAZ,GAAwB,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAxB;AACD;;AAEOD,EAAAA,cAAR,CAAuBE,KAAvB,EAA4C;AAC1C,QAAIC,OAAO,GAAGD,KAAK,CAACE,IAApB;;AACA,QAAID,OAAO,KAAK,OAAZ,IAAuB,KAAKL,OAAhC,EAAyC;AACvC,WAAKA,OAAL;AACD;;AAED,QAAIK,OAAO,CAACE,UAAR,IAAsB,KAAKR,SAA/B,EAA0C;AACxC,UAAIA,SAAS,GAAG,KAAKA,SAAL,CAAeM,OAAO,CAACE,UAAvB,CAAhB;AACA,aAAO,KAAKR,SAAL,CAAeM,OAAO,CAACE,UAAvB,CAAP;;AAEA,UAAI,WAAWF,OAAf,EAAwB;AACtBN,QAAAA,SAAS,CAAC,CAAD,CAAT,CAAaM,OAAO,CAACG,KAArB;AACA;AACD;;AAEDT,MAAAA,SAAS,CAAC,CAAD,CAAT,CAAaM,OAAb;AACD;AACF;;AAEDI,EAAAA,gBAAgB,CAACT,OAAD,EAAsB;AACpC,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDU,EAAAA,UAAU,CAACL,OAAD,EAAmC;AAC3C,SAAKP,MAAL,CAAYa,WAAZ,CAAwBN,OAAxB;AACD;;AAEDO,EAAAA,iBAAiB,CACfP,OADe,EAE4B;AAC3C,WAAO,IAAIQ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKhB,SAAL,CAAeM,OAAO,CAACE,UAAvB,IAAqC,CAACO,OAAD,EAAUC,MAAV,CAArC;AACA,WAAKjB,MAAL,CAAYa,WAAZ,CAAwBN,OAAxB;AACD,KAHM,CAAP;AAID;;AA7C+B","sourcesContent":["// eslint-disable-next-line import/no-webpack-loader-syntax\nimport CreateTransactionWorker from \"worker-loader!./create-transaction-worker-script\";\n\nexport type CreateTransactionMessage = {\n  trackingId: number;\n}\n\nexport type CreateTransactionResponseMessage = {\n  trackingId: number;\n  signature: Buffer;\n}\n\nexport type InitializeWorkerMessage = {\n  programId: string;\n  feeAccountSecretKey: Buffer;\n  programDataAccounts: string[];\n}\n\nexport type CreateTransactionErrorMessage = {\n  trackingId: string;\n  error: Error;\n}\n\nexport class CreateTransactionRPC {\n  private worker: CreateTransactionWorker;\n\n  private callbacks: { [trackingId: string]: Function[] } = {};\n  private onReady: (() => void) | undefined;\n\n  constructor() {\n    this.worker = new CreateTransactionWorker();\n    this.worker.onmessage = this.handleMessages.bind(this);\n  }\n\n  private handleMessages(event: MessageEvent) {\n    let message = event.data;\n    if (message === \"ready\" && this.onReady) {\n      this.onReady();\n    }\n\n    if (message.trackingId in this.callbacks) {\n      let callbacks = this.callbacks[message.trackingId];\n      delete this.callbacks[message.trackingId];\n\n      if (\"error\" in message) {\n        callbacks[1](message.error);\n        return;\n      }\n\n      callbacks[0](message);\n    }\n  }\n\n  setReadyListener(onReady: () => void) {\n    this.onReady = onReady;\n  }\n\n  initialize(message: InitializeWorkerMessage) {\n    this.worker.postMessage(message);\n  }\n\n  createTransaction(\n    message: CreateTransactionMessage\n  ): Promise<CreateTransactionResponseMessage> {\n    return new Promise((resolve, reject) => {\n      this.callbacks[message.trackingId] = [resolve, reject];\n      this.worker.postMessage(message);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}