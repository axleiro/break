{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/index.tsx\";\nimport * as React from \"react\";\nimport { useConfig, useAccounts, useConnection } from \"../api\";\nimport { useBlockhash } from \"../blockhash\";\nimport { ConfirmedHelper } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { createTransaction } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useSocket } from \"../socket\";\nimport { reportError } from \"utils\";\nexport const COMMITMENT_PARAM = (() => {\n  const commitment = new URLSearchParams(window.location.search).get(\"commitment\");\n\n  switch (commitment) {\n    case \"recent\":\n    case \"single\":\n      {\n        return commitment;\n      }\n\n    default:\n      {\n        return \"singleGossip\";\n      }\n  }\n})();\nexport let ActionType;\n\n(function (ActionType) {\n  ActionType[ActionType[\"NewTransaction\"] = 0] = \"NewTransaction\";\n  ActionType[ActionType[\"UpdateIds\"] = 1] = \"UpdateIds\";\n  ActionType[ActionType[\"TimeoutTransaction\"] = 2] = \"TimeoutTransaction\";\n  ActionType[ActionType[\"ResetState\"] = 3] = \"ResetState\";\n  ActionType[ActionType[\"RecordRoot\"] = 4] = \"RecordRoot\";\n})(ActionType || (ActionType = {}));\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ActionType.NewTransaction:\n      {\n        const {\n          details,\n          pendingTransaction\n        } = action;\n        return [...state, {\n          details,\n          status: \"pending\",\n          pending: pendingTransaction\n        }];\n      }\n\n    case ActionType.TimeoutTransaction:\n      {\n        const trackingId = action.trackingId;\n        if (trackingId >= state.length) return state;\n        const timeout = state[trackingId];\n        if (timeout.status !== \"pending\") return state;\n        clearInterval(timeout.pending.retryId);\n        return state.map(tx => {\n          if (tx.details.signature === timeout.details.signature) {\n            return {\n              status: \"timeout\",\n              details: tx.details\n            };\n          } else {\n            return tx;\n          }\n        });\n      }\n\n    case ActionType.UpdateIds:\n      {\n        const {\n          ids,\n          partition,\n          partitionCount\n        } = action.activeIdPartition;\n        return state.map((tx, trackingId) => {\n          if (trackingId % partitionCount !== partition) return tx;\n          const id = Math.floor(trackingId / partitionCount);\n\n          if (tx.status === \"pending\" && ids.has(id)) {\n            // Optimistically confirmed, no need to continue retry\n            if (action.commitment === \"singleGossip\" || action.commitment === \"single\") {\n              clearInterval(tx.pending.retryId);\n            }\n\n            return {\n              status: \"success\",\n              details: tx.details,\n              slot: {\n                target: tx.pending.targetSlot,\n                estimated: action.estimatedSlot\n              },\n              timing: {\n                sentAt: tx.pending.sentAt,\n                [action.commitment]: timeElapsed(tx.pending.sentAt)\n              },\n              pending: { ...tx.pending\n              }\n            };\n          } else if (tx.status === \"success\") {\n            if (ids.has(id)) {\n              // Already recorded conf time\n              if (tx.timing[action.commitment] !== undefined) {\n                return tx;\n              } // Optimistically confirmed, no need to continue retry\n\n\n              if (tx.pending && (action.commitment === \"singleGossip\" || action.commitment === \"single\")) {\n                clearInterval(tx.pending.retryId);\n              }\n\n              return { ...tx,\n                timing: { ...tx.timing,\n                  [action.commitment]: timeElapsed(tx.timing.sentAt)\n                }\n              };\n            } else if (tx.pending && !ids.has(id)) {\n              return {\n                status: \"pending\",\n                details: tx.details,\n                pending: { ...tx.pending\n                }\n              };\n            }\n          }\n\n          return tx;\n        });\n      }\n\n    case ActionType.ResetState:\n      {\n        state.forEach(tx => {\n          if (tx.status === \"pending\") {\n            clearTimeout(tx.pending.timeoutId);\n            clearInterval(tx.pending.retryId);\n          } else if (tx.status === \"success\" && tx.pending) {\n            clearTimeout(tx.pending.timeoutId);\n            clearInterval(tx.pending.retryId);\n          }\n        });\n        return [];\n      }\n  }\n}\n\nconst SlotContext = React.createContext(undefined);\nconst StateContext = React.createContext(undefined);\nconst DispatchContext = React.createContext(undefined);\nexport function TransactionsProvider({\n  children\n}) {\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n  const targetSlot = React.useRef();\n  React.useEffect(() => {\n    dispatch({\n      type: ActionType.ResetState\n    });\n    if (connection === undefined) return;\n    const slotSubscription = connection.onSlotChange(({\n      slot\n    }) => {\n      targetSlot.current = slot;\n    });\n    return () => {\n      connection.removeSlotChangeListener(slotSubscription);\n    };\n  }, [connection]);\n  return /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DispatchContext.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SlotContext.Provider, {\n    value: targetSlot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SelectedTxProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ConfirmedHelper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TpsProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 15\n    }\n  }, children))))));\n}\n\nfunction timeElapsed(sentAt) {\n  const now = performance.now();\n  return parseFloat(((now - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  const dispatch = React.useContext(DispatchContext);\n\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\nexport function useTargetSlotRef() {\n  const dispatch = React.useContext(SlotContext);\n\n  if (!dispatch) {\n    throw new Error(`useTargetSlotRef must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\nexport function useTransactions() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useTransactions must be used within a TransactionsProvider`);\n  }\n\n  return state;\n}\nexport function useConfirmedCount() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useConfirmedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.filter(({\n    status\n  }) => status === \"success\").length;\n}\nexport function useDroppedCount() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useDroppedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.filter(({\n    status\n  }) => status === \"timeout\").length;\n}\nexport function useAvgConfirmationTime() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useAvgConfirmationTime must be used within a TransactionsProvider`);\n  }\n\n  const confirmed = state.reduce((confirmed, tx) => {\n    if (tx.status === \"success\") {\n      const confTime = tx.timing[COMMITMENT_PARAM];\n      if (confTime !== undefined) confirmed.push(confTime);\n    }\n\n    return confirmed;\n  }, []);\n  const count = confirmed.length;\n  if (count === 0) return 0;\n  const sum = confirmed.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\nexport function useCreatedCount() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useCreatedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.length;\n}\nexport function useTps() {\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined) throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\nexport function useCreateTx() {\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts === null || accounts === void 0 ? void 0 : accounts.programAccounts[0].toBase58(); // Reset counter when program data accounts are refreshed\n\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n  const blockhash = useBlockhash();\n  const dispatch = useDispatch();\n  const socket = useSocket();\n  return React.useCallback(() => {\n    if (!blockhash || !socket || !config || !accounts || !targetSlotRef.current) return;\n    const id = idCounter.current;\n\n    if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n      idCounter.current++;\n      createTransaction(blockhash, targetSlotRef.current, config.programId, accounts, id, dispatch, socket);\n    } else {\n      reportError(new Error(\"Account capacity exceeded\"), \"failed to create transaction\");\n    }\n  }, [blockhash, socket, config, accounts, dispatch, targetSlotRef]);\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/index.tsx"],"names":["React","useConfig","useAccounts","useConnection","useBlockhash","ConfirmedHelper","TpsProvider","TpsContext","createTransaction","SelectedTxProvider","useSocket","reportError","COMMITMENT_PARAM","commitment","URLSearchParams","window","location","search","get","ActionType","reducer","state","action","type","NewTransaction","details","pendingTransaction","status","pending","TimeoutTransaction","trackingId","length","timeout","clearInterval","retryId","map","tx","signature","UpdateIds","ids","partition","partitionCount","activeIdPartition","id","Math","floor","has","slot","target","targetSlot","estimated","estimatedSlot","timing","sentAt","timeElapsed","undefined","ResetState","forEach","clearTimeout","timeoutId","SlotContext","createContext","StateContext","DispatchContext","TransactionsProvider","children","dispatch","useReducer","connection","useRef","useEffect","slotSubscription","onSlotChange","current","removeSlotChangeListener","now","performance","parseFloat","toFixed","useDispatch","useContext","Error","useTargetSlotRef","useTransactions","useConfirmedCount","filter","useDroppedCount","useAvgConfirmationTime","confirmed","reduce","confTime","push","count","sum","time","useCreatedCount","useTps","tps","useCreateTx","config","accounts","idCounter","targetSlotRef","programDataAccount","programAccounts","toBase58","blockhash","socket","useCallback","accountCapacity","programId"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,aAAjC,QAAsD,QAAtD;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,iBAAT,QAAkC,UAAlC;AACA,SAASC,kBAAT,QAAmC,YAAnC;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,WAAT,QAA4B,OAA5B;AAmCA,OAAO,MAAMC,gBAAgB,GAAG,CAAC,MAAyB;AACxD,QAAMC,UAAU,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,EAA4CC,GAA5C,CACjB,YADiB,CAAnB;;AAGA,UAAQL,UAAR;AACE,SAAK,QAAL;AACA,SAAK,QAAL;AAAe;AACb,eAAOA,UAAP;AACD;;AACD;AAAS;AACP,eAAO,cAAP;AACD;AAPH;AASD,CAb+B,GAAzB;AAgCP,WAAYM,UAAZ;;WAAYA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;GAAAA,U,KAAAA,U;;AA0CZ,SAASC,OAAT,CAAiBC,KAAjB,EAA+BC,MAA/B,EAAsD;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,UAAU,CAACK,cAAhB;AAAgC;AAC9B,cAAM;AAAEC,UAAAA,OAAF;AAAWC,UAAAA;AAAX,YAAkCJ,MAAxC;AACA,eAAO,CACL,GAAGD,KADE,EAEL;AACEI,UAAAA,OADF;AAEEE,UAAAA,MAAM,EAAE,SAFV;AAGEC,UAAAA,OAAO,EAAEF;AAHX,SAFK,CAAP;AAQD;;AAED,SAAKP,UAAU,CAACU,kBAAhB;AAAoC;AAClC,cAAMC,UAAU,GAAGR,MAAM,CAACQ,UAA1B;AACA,YAAIA,UAAU,IAAIT,KAAK,CAACU,MAAxB,EAAgC,OAAOV,KAAP;AAChC,cAAMW,OAAO,GAAGX,KAAK,CAACS,UAAD,CAArB;AACA,YAAIE,OAAO,CAACL,MAAR,KAAmB,SAAvB,EAAkC,OAAON,KAAP;AAClCY,QAAAA,aAAa,CAACD,OAAO,CAACJ,OAAR,CAAgBM,OAAjB,CAAb;AAEA,eAAOb,KAAK,CAACc,GAAN,CAAWC,EAAD,IAAQ;AACvB,cAAIA,EAAE,CAACX,OAAH,CAAWY,SAAX,KAAyBL,OAAO,CAACP,OAAR,CAAgBY,SAA7C,EAAwD;AACtD,mBAAO;AACLV,cAAAA,MAAM,EAAE,SADH;AAELF,cAAAA,OAAO,EAAEW,EAAE,CAACX;AAFP,aAAP;AAID,WALD,MAKO;AACL,mBAAOW,EAAP;AACD;AACF,SATM,CAAP;AAUD;;AAED,SAAKjB,UAAU,CAACmB,SAAhB;AAA2B;AACzB,cAAM;AAAEC,UAAAA,GAAF;AAAOC,UAAAA,SAAP;AAAkBC,UAAAA;AAAlB,YAAqCnB,MAAM,CAACoB,iBAAlD;AACA,eAAOrB,KAAK,CAACc,GAAN,CAAU,CAACC,EAAD,EAAKN,UAAL,KAAoB;AACnC,cAAIA,UAAU,GAAGW,cAAb,KAAgCD,SAApC,EAA+C,OAAOJ,EAAP;AAC/C,gBAAMO,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWf,UAAU,GAAGW,cAAxB,CAAX;;AACA,cAAIL,EAAE,CAACT,MAAH,KAAc,SAAd,IAA2BY,GAAG,CAACO,GAAJ,CAAQH,EAAR,CAA/B,EAA4C;AAC1C;AACA,gBAAIrB,MAAM,CAACT,UAAP,KAAsB,cAAtB,IAAwCS,MAAM,CAACT,UAAP,KAAsB,QAAlE,EAA4E;AAC1EoB,cAAAA,aAAa,CAACG,EAAE,CAACR,OAAH,CAAWM,OAAZ,CAAb;AACD;;AAED,mBAAO;AACLP,cAAAA,MAAM,EAAE,SADH;AAELF,cAAAA,OAAO,EAAEW,EAAE,CAACX,OAFP;AAGLsB,cAAAA,IAAI,EAAE;AACJC,gBAAAA,MAAM,EAAEZ,EAAE,CAACR,OAAH,CAAWqB,UADf;AAEJC,gBAAAA,SAAS,EAAE5B,MAAM,CAAC6B;AAFd,eAHD;AAOLC,cAAAA,MAAM,EAAE;AACNC,gBAAAA,MAAM,EAAEjB,EAAE,CAACR,OAAH,CAAWyB,MADb;AAEN,iBAAC/B,MAAM,CAACT,UAAR,GAAqByC,WAAW,CAAClB,EAAE,CAACR,OAAH,CAAWyB,MAAZ;AAF1B,eAPH;AAWLzB,cAAAA,OAAO,EAAE,EAAE,GAAGQ,EAAE,CAACR;AAAR;AAXJ,aAAP;AAaD,WAnBD,MAmBO,IAAIQ,EAAE,CAACT,MAAH,KAAc,SAAlB,EAA6B;AAClC,gBAAIY,GAAG,CAACO,GAAJ,CAAQH,EAAR,CAAJ,EAAiB;AACf;AACA,kBAAIP,EAAE,CAACgB,MAAH,CAAU9B,MAAM,CAACT,UAAjB,MAAiC0C,SAArC,EAAgD;AAC9C,uBAAOnB,EAAP;AACD,eAJc,CAMf;;;AACA,kBAAIA,EAAE,CAACR,OAAH,KAAeN,MAAM,CAACT,UAAP,KAAsB,cAAtB,IAAwCS,MAAM,CAACT,UAAP,KAAsB,QAA7E,CAAJ,EAA4F;AAC1FoB,gBAAAA,aAAa,CAACG,EAAE,CAACR,OAAH,CAAWM,OAAZ,CAAb;AACD;;AAED,qBAAO,EACL,GAAGE,EADE;AAELgB,gBAAAA,MAAM,EAAE,EACN,GAAGhB,EAAE,CAACgB,MADA;AAEN,mBAAC9B,MAAM,CAACT,UAAR,GAAqByC,WAAW,CAAClB,EAAE,CAACgB,MAAH,CAAUC,MAAX;AAF1B;AAFH,eAAP;AAOD,aAlBD,MAkBO,IAAIjB,EAAE,CAACR,OAAH,IAAc,CAACW,GAAG,CAACO,GAAJ,CAAQH,EAAR,CAAnB,EAAgC;AACrC,qBAAO;AACLhB,gBAAAA,MAAM,EAAE,SADH;AAELF,gBAAAA,OAAO,EAAEW,EAAE,CAACX,OAFP;AAGLG,gBAAAA,OAAO,EAAE,EAAE,GAAGQ,EAAE,CAACR;AAAR;AAHJ,eAAP;AAKD;AACF;;AACD,iBAAOQ,EAAP;AACD,SAlDM,CAAP;AAmDD;;AAED,SAAKjB,UAAU,CAACqC,UAAhB;AAA4B;AAC1BnC,QAAAA,KAAK,CAACoC,OAAN,CAAerB,EAAD,IAAQ;AACpB,cAAIA,EAAE,CAACT,MAAH,KAAc,SAAlB,EAA6B;AAC3B+B,YAAAA,YAAY,CAACtB,EAAE,CAACR,OAAH,CAAW+B,SAAZ,CAAZ;AACA1B,YAAAA,aAAa,CAACG,EAAE,CAACR,OAAH,CAAWM,OAAZ,CAAb;AACD,WAHD,MAGO,IAAIE,EAAE,CAACT,MAAH,KAAc,SAAd,IAA2BS,EAAE,CAACR,OAAlC,EAA2C;AAChD8B,YAAAA,YAAY,CAACtB,EAAE,CAACR,OAAH,CAAW+B,SAAZ,CAAZ;AACA1B,YAAAA,aAAa,CAACG,EAAE,CAACR,OAAH,CAAWM,OAAZ,CAAb;AACD;AACF,SARD;AASA,eAAO,EAAP;AACD;AAlGH;AAoGD;;AAGD,MAAM0B,WAAW,GAAG5D,KAAK,CAAC6D,aAAN,CAElBN,SAFkB,CAApB;AAGA,MAAMO,YAAY,GAAG9D,KAAK,CAAC6D,aAAN,CAAuCN,SAAvC,CAArB;AACA,MAAMQ,eAAe,GAAG/D,KAAK,CAAC6D,aAAN,CAA0CN,SAA1C,CAAxB;AAGA,OAAO,SAASS,oBAAT,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA2D;AAChE,QAAM,CAAC5C,KAAD,EAAQ6C,QAAR,IAAoBlE,KAAK,CAACmE,UAAN,CAAiB/C,OAAjB,EAA0B,EAA1B,CAA1B;AACA,QAAMgD,UAAU,GAAGjE,aAAa,EAAhC;AACA,QAAM8C,UAAU,GAAGjD,KAAK,CAACqE,MAAN,EAAnB;AAEArE,EAAAA,KAAK,CAACsE,SAAN,CAAgB,MAAM;AACpBJ,IAAAA,QAAQ,CAAC;AACP3C,MAAAA,IAAI,EAAEJ,UAAU,CAACqC;AADV,KAAD,CAAR;AAIA,QAAIY,UAAU,KAAKb,SAAnB,EAA8B;AAC9B,UAAMgB,gBAAgB,GAAGH,UAAU,CAACI,YAAX,CAAwB,CAAC;AAAEzB,MAAAA;AAAF,KAAD,KAAc;AAC7DE,MAAAA,UAAU,CAACwB,OAAX,GAAqB1B,IAArB;AACD,KAFwB,CAAzB;AAIA,WAAO,MAAM;AACXqB,MAAAA,UAAU,CAACM,wBAAX,CAAoCH,gBAApC;AACD,KAFD;AAGD,GAbD,EAaG,CAACH,UAAD,CAbH;AAeA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE/C,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE6C,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEjB,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcgB,QAAd,CADF,CADF,CADF,CADF,CADF,CADF;AAaD;;AAED,SAASX,WAAT,CAAqBD,MAArB,EAA6C;AAC3C,QAAMsB,GAAG,GAAGC,WAAW,CAACD,GAAZ,EAAZ;AACA,SAAOE,UAAU,CAAC,CAAC,CAACF,GAAG,GAAGtB,MAAP,IAAiB,IAAlB,EAAwByB,OAAxB,CAAgC,CAAhC,CAAD,CAAjB;AACD;;AAED,OAAO,SAASC,WAAT,GAAuB;AAC5B,QAAMb,QAAQ,GAAGlE,KAAK,CAACgF,UAAN,CAAiBjB,eAAjB,CAAjB;;AACA,MAAI,CAACG,QAAL,EAAe;AACb,UAAM,IAAIe,KAAJ,CAAW,wDAAX,CAAN;AACD;;AAED,SAAOf,QAAP;AACD;AAED,OAAO,SAASgB,gBAAT,GAA4B;AACjC,QAAMhB,QAAQ,GAAGlE,KAAK,CAACgF,UAAN,CAAiBpB,WAAjB,CAAjB;;AACA,MAAI,CAACM,QAAL,EAAe;AACb,UAAM,IAAIe,KAAJ,CACH,6DADG,CAAN;AAGD;;AAED,SAAOf,QAAP;AACD;AAED,OAAO,SAASiB,eAAT,GAA2B;AAChC,QAAM9D,KAAK,GAAGrB,KAAK,CAACgF,UAAN,CAAiBlB,YAAjB,CAAd;;AACA,MAAI,CAACzC,KAAL,EAAY;AACV,UAAM,IAAI4D,KAAJ,CACH,4DADG,CAAN;AAGD;;AAED,SAAO5D,KAAP;AACD;AAED,OAAO,SAAS+D,iBAAT,GAA6B;AAClC,QAAM/D,KAAK,GAAGrB,KAAK,CAACgF,UAAN,CAAiBlB,YAAjB,CAAd;;AACA,MAAI,CAACzC,KAAL,EAAY;AACV,UAAM,IAAI4D,KAAJ,CACH,8DADG,CAAN;AAGD;;AACD,SAAO5D,KAAK,CAACgE,MAAN,CAAa,CAAC;AAAE1D,IAAAA;AAAF,GAAD,KAAgBA,MAAM,KAAK,SAAxC,EAAmDI,MAA1D;AACD;AAED,OAAO,SAASuD,eAAT,GAA2B;AAChC,QAAMjE,KAAK,GAAGrB,KAAK,CAACgF,UAAN,CAAiBlB,YAAjB,CAAd;;AACA,MAAI,CAACzC,KAAL,EAAY;AACV,UAAM,IAAI4D,KAAJ,CACH,4DADG,CAAN;AAGD;;AACD,SAAO5D,KAAK,CAACgE,MAAN,CAAa,CAAC;AAAE1D,IAAAA;AAAF,GAAD,KAAgBA,MAAM,KAAK,SAAxC,EAAmDI,MAA1D;AACD;AAED,OAAO,SAASwD,sBAAT,GAAkC;AACvC,QAAMlE,KAAK,GAAGrB,KAAK,CAACgF,UAAN,CAAiBlB,YAAjB,CAAd;;AACA,MAAI,CAACzC,KAAL,EAAY;AACV,UAAM,IAAI4D,KAAJ,CACH,mEADG,CAAN;AAGD;;AAED,QAAMO,SAAS,GAAGnE,KAAK,CAACoE,MAAN,CAAa,CAACD,SAAD,EAAsBpD,EAAtB,KAA6B;AAC1D,QAAIA,EAAE,CAACT,MAAH,KAAc,SAAlB,EAA6B;AAC3B,YAAM+D,QAAQ,GAAGtD,EAAE,CAACgB,MAAH,CAAUxC,gBAAV,CAAjB;AACA,UAAI8E,QAAQ,KAAKnC,SAAjB,EAA4BiC,SAAS,CAACG,IAAV,CAAeD,QAAf;AAC7B;;AACD,WAAOF,SAAP;AACD,GANiB,EAMf,EANe,CAAlB;AAQA,QAAMI,KAAK,GAAGJ,SAAS,CAACzD,MAAxB;AACA,MAAI6D,KAAK,KAAK,CAAd,EAAiB,OAAO,CAAP;AACjB,QAAMC,GAAG,GAAGL,SAAS,CAACC,MAAV,CAAiB,CAACI,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAtC,EAA4C,CAA5C,CAAZ;AACA,SAAOD,GAAG,GAAGD,KAAb;AACD;AAED,OAAO,SAASG,eAAT,GAA2B;AAChC,QAAM1E,KAAK,GAAGrB,KAAK,CAACgF,UAAN,CAAiBlB,YAAjB,CAAd;;AACA,MAAI,CAACzC,KAAL,EAAY;AACV,UAAM,IAAI4D,KAAJ,CACH,4DADG,CAAN;AAGD;;AACD,SAAO5D,KAAK,CAACU,MAAb;AACD;AAED,OAAO,SAASiE,MAAT,GAAkB;AACvB,QAAMC,GAAG,GAAGjG,KAAK,CAACgF,UAAN,CAAiBzE,UAAjB,CAAZ;AACA,MAAI0F,GAAG,KAAK1C,SAAZ,EACE,MAAM,IAAI0B,KAAJ,CAAW,mDAAX,CAAN;AACF,SAAOgB,GAAP;AACD;AAED,OAAO,SAASC,WAAT,GAAuB;AAC5B,QAAMC,MAAM,GAAGlG,SAAS,EAAxB;AACA,QAAMmG,QAAQ,GAAGlG,WAAW,EAA5B;AACA,QAAMmG,SAAS,GAAGrG,KAAK,CAACqE,MAAN,CAAqB,CAArB,CAAlB;AACA,QAAMiC,aAAa,GAAGpB,gBAAgB,EAAtC;AACA,QAAMqB,kBAAkB,GAAGH,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEI,eAAV,CAA0B,CAA1B,EAA6BC,QAA7B,EAA3B,CAL4B,CAO5B;;AACAzG,EAAAA,KAAK,CAACsE,SAAN,CAAgB,MAAM;AACpB+B,IAAAA,SAAS,CAAC5B,OAAV,GAAoB,CAApB;AACD,GAFD,EAEG,CAAC8B,kBAAD,CAFH;AAIA,QAAMG,SAAS,GAAGtG,YAAY,EAA9B;AACA,QAAM8D,QAAQ,GAAGa,WAAW,EAA5B;AACA,QAAM4B,MAAM,GAAGjG,SAAS,EAAxB;AACA,SAAOV,KAAK,CAAC4G,WAAN,CAAkB,MAAM;AAC7B,QAAI,CAACF,SAAD,IAAc,CAACC,MAAf,IAAyB,CAACR,MAA1B,IAAoC,CAACC,QAArC,IAAiD,CAACE,aAAa,CAAC7B,OAApE,EACE;AACF,UAAM9B,EAAE,GAAG0D,SAAS,CAAC5B,OAArB;;AACA,QAAI9B,EAAE,GAAGyD,QAAQ,CAACS,eAAT,GAA2BT,QAAQ,CAACI,eAAT,CAAyBzE,MAA7D,EAAqE;AACnEsE,MAAAA,SAAS,CAAC5B,OAAV;AACAjE,MAAAA,iBAAiB,CACfkG,SADe,EAEfJ,aAAa,CAAC7B,OAFC,EAGf0B,MAAM,CAACW,SAHQ,EAIfV,QAJe,EAKfzD,EALe,EAMfuB,QANe,EAOfyC,MAPe,CAAjB;AASD,KAXD,MAWO;AACLhG,MAAAA,WAAW,CACT,IAAIsE,KAAJ,CAAU,2BAAV,CADS,EAET,8BAFS,CAAX;AAID;AACF,GArBM,EAqBJ,CAACyB,SAAD,EAAYC,MAAZ,EAAoBR,MAApB,EAA4BC,QAA5B,EAAsClC,QAAtC,EAAgDoC,aAAhD,CArBI,CAAP;AAsBD","sourcesContent":["import * as React from \"react\";\nimport { TransactionSignature, PublicKey } from \"@solana/web3.js\";\nimport { useConfig, useAccounts, useConnection } from \"../api\";\nimport { useBlockhash } from \"../blockhash\";\nimport { ConfirmedHelper } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { createTransaction } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useSocket } from \"../socket\";\nimport { reportError } from \"utils\";\n\nexport type PendingTransaction = {\n  sentAt: number;\n  targetSlot: number;\n  retryId?: number;\n  timeoutId?: number;\n};\n\nexport type TransactionDetails = {\n  id: number;\n  feeAccount: PublicKey;\n  programAccount: PublicKey;\n  signature: TransactionSignature;\n};\n\ntype Timing = {\n  sentAt: number;\n  recent?: number;\n  single?: number;\n  singleGossip?: number;\n};\n\ntype SuccessState = {\n  status: \"success\";\n  details: TransactionDetails;\n  slot: {\n    target: number;\n    landed?: number;\n    estimated: number;\n  };\n  timing: Timing;\n  pending?: PendingTransaction;\n};\n\nexport const COMMITMENT_PARAM = ((): TrackedCommitment => {\n  const commitment = new URLSearchParams(window.location.search).get(\n    \"commitment\"\n  );\n  switch (commitment) {\n    case \"recent\":\n    case \"single\": {\n      return commitment;\n    }\n    default: {\n      return \"singleGossip\";\n    }\n  }\n})();\n\nexport type TrackedCommitment = \"single\" | \"singleGossip\" | \"recent\";\n\ntype TimeoutState = {\n  status: \"timeout\";\n  details: TransactionDetails;\n};\n\ntype PendingState = {\n  status: \"pending\";\n  pending: PendingTransaction;\n  details: TransactionDetails;\n};\n\nexport type TransactionStatus = \"success\" | \"timeout\" | \"pending\";\n\nexport type TransactionState = SuccessState | TimeoutState | PendingState;\n\nexport enum ActionType {\n  NewTransaction,\n  UpdateIds,\n  TimeoutTransaction,\n  ResetState,\n  RecordRoot,\n}\n\ntype UpdateIds = {\n  type: ActionType.UpdateIds;\n  activeIdPartition: {\n    ids: Set<number>;\n    partition: number;\n    partitionCount: number;\n  };\n  commitment: TrackedCommitment;\n  estimatedSlot: number;\n};\n\ntype NewTransaction = {\n  type: ActionType.NewTransaction;\n  trackingId: number;\n  details: TransactionDetails;\n  pendingTransaction: PendingTransaction;\n};\n\ntype TimeoutTransaction = {\n  type: ActionType.TimeoutTransaction;\n  trackingId: number;\n};\n\ntype ResetState = {\n  type: ActionType.ResetState;\n};\n\ntype Action =\n  | NewTransaction\n  | UpdateIds\n  | TimeoutTransaction\n  | ResetState;\n\ntype State = TransactionState[];\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case ActionType.NewTransaction: {\n      const { details, pendingTransaction } = action;\n      return [\n        ...state,\n        {\n          details,\n          status: \"pending\",\n          pending: pendingTransaction,\n        },\n      ];\n    }\n\n    case ActionType.TimeoutTransaction: {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const timeout = state[trackingId];\n      if (timeout.status !== \"pending\") return state;\n      clearInterval(timeout.pending.retryId);\n\n      return state.map((tx) => {\n        if (tx.details.signature === timeout.details.signature) {\n          return {\n            status: \"timeout\",\n            details: tx.details,\n          };\n        } else {\n          return tx;\n        }\n      });\n    }\n\n    case ActionType.UpdateIds: {\n      const { ids, partition, partitionCount } = action.activeIdPartition;\n      return state.map((tx, trackingId) => {\n        if (trackingId % partitionCount !== partition) return tx;\n        const id = Math.floor(trackingId / partitionCount);\n        if (tx.status === \"pending\" && ids.has(id)) {\n          // Optimistically confirmed, no need to continue retry\n          if (action.commitment === \"singleGossip\" || action.commitment === \"single\") {\n            clearInterval(tx.pending.retryId);\n          }\n\n          return {\n            status: \"success\",\n            details: tx.details,\n            slot: {\n              target: tx.pending.targetSlot,\n              estimated: action.estimatedSlot,\n            },\n            timing: {\n              sentAt: tx.pending.sentAt,\n              [action.commitment]: timeElapsed(tx.pending.sentAt)\n            },\n            pending: { ...tx.pending },\n          };\n        } else if (tx.status === \"success\") {\n          if (ids.has(id)) {\n            // Already recorded conf time\n            if (tx.timing[action.commitment] !== undefined) {\n              return tx;\n            }\n\n            // Optimistically confirmed, no need to continue retry\n            if (tx.pending && (action.commitment === \"singleGossip\" || action.commitment === \"single\")) {\n              clearInterval(tx.pending.retryId);\n            }\n\n            return {\n              ...tx,\n              timing: {\n                ...tx.timing,\n                [action.commitment]: timeElapsed(tx.timing.sentAt)\n              },\n            };\n          } else if (tx.pending && !ids.has(id)) {\n            return {\n              status: \"pending\",\n              details: tx.details,\n              pending: { ...tx.pending },\n            };\n          }\n        } \n        return tx;\n      });\n    }\n\n    case ActionType.ResetState: {\n      state.forEach((tx) => {\n        if (tx.status === \"pending\") {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        } else if (tx.status === \"success\" && tx.pending) {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        }\n      });\n      return [];\n    }\n  }\n}\n\nexport type Dispatch = (action: Action) => void;\nconst SlotContext = React.createContext<\n  React.MutableRefObject<number | undefined> | undefined\n>(undefined);\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function TransactionsProvider({ children }: ProviderProps) {\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n  const targetSlot = React.useRef<number>();\n\n  React.useEffect(() => {\n    dispatch({\n      type: ActionType.ResetState,\n    });\n\n    if (connection === undefined) return;\n    const slotSubscription = connection.onSlotChange(({ slot }) => {\n      targetSlot.current = slot;\n    });\n\n    return () => {\n      connection.removeSlotChangeListener(slotSubscription);\n    };\n  }, [connection]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <SlotContext.Provider value={targetSlot}>\n          <SelectedTxProvider>\n            <ConfirmedHelper>\n              <TpsProvider>{children}</TpsProvider>\n            </ConfirmedHelper>\n          </SelectedTxProvider>\n        </SlotContext.Provider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nfunction timeElapsed(sentAt: number): number {\n  const now = performance.now();\n  return parseFloat(((now - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\n\nexport function useTargetSlotRef() {\n  const dispatch = React.useContext(SlotContext);\n  if (!dispatch) {\n    throw new Error(\n      `useTargetSlotRef must be used within a TransactionsProvider`\n    );\n  }\n\n  return dispatch;\n}\n\nexport function useTransactions() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useTransactions must be used within a TransactionsProvider`\n    );\n  }\n\n  return state;\n}\n\nexport function useConfirmedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useConfirmedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"success\").length;\n}\n\nexport function useDroppedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useDroppedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"timeout\").length;\n}\n\nexport function useAvgConfirmationTime() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useAvgConfirmationTime must be used within a TransactionsProvider`\n    );\n  }\n\n  const confirmed = state.reduce((confirmed: number[], tx) => {\n    if (tx.status === \"success\") {\n      const confTime = tx.timing[COMMITMENT_PARAM];\n      if (confTime !== undefined) confirmed.push(confTime);\n    }\n    return confirmed;\n  }, []);\n\n  const count = confirmed.length;\n  if (count === 0) return 0;\n  const sum = confirmed.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\n\nexport function useCreatedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useCreatedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.length;\n}\n\nexport function useTps() {\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined)\n    throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\n\nexport function useCreateTx() {\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef<number>(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts?.programAccounts[0].toBase58();\n\n  // Reset counter when program data accounts are refreshed\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n\n  const blockhash = useBlockhash();\n  const dispatch = useDispatch();\n  const socket = useSocket();\n  return React.useCallback(() => {\n    if (!blockhash || !socket || !config || !accounts || !targetSlotRef.current)\n      return;\n    const id = idCounter.current;\n    if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n      idCounter.current++;\n      createTransaction(\n        blockhash,\n        targetSlotRef.current,\n        config.programId,\n        accounts,\n        id,\n        dispatch,\n        socket\n      );\n    } else {\n      reportError(\n        new Error(\"Account capacity exceeded\"),\n        \"failed to create transaction\"\n      );\n    }\n  }, [blockhash, socket, config, accounts, dispatch, targetSlotRef]);\n}\n"]},"metadata":{},"sourceType":"module"}