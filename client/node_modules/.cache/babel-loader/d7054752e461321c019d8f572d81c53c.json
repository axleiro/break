{"ast":null,"code":"import*as React from\"react\";import bs58 from\"bs58\";import{useTargetSlotRef,useDispatch}from\"./index\";import{CreateTransactionRPC}from\"../../workers/create-transaction-rpc\";import{useConfig,useAccounts}from\"providers/server/http\";import{useBlockhash}from\"providers/rpc/blockhash\";import{useSocket}from\"providers/server/socket\";import{reportError}from\"utils\";var SEND_TIMEOUT_MS=45000;var RETRY_INTERVAL_MS=500;var workerRPC=new CreateTransactionRPC();export var CreateTxContext=React.createContext(undefined);export function CreateTxProvider(_ref){var children=_ref.children;var createTx=React.useRef(function(){});var config=useConfig();var accounts=useAccounts();var idCounter=React.useRef(0);var targetSlotRef=useTargetSlotRef();var programDataAccount=accounts===null||accounts===void 0?void 0:accounts.programAccounts[0].toBase58();// Reset counter when program data accounts are refreshed\nReact.useEffect(function(){idCounter.current=0;},[programDataAccount]);var blockhash=useBlockhash();var dispatch=useDispatch();var socket=useSocket();React.useEffect(function(){createTx.current=function(){if(!blockhash||!socket||!config||!accounts||!targetSlotRef.current)return;var id=idCounter.current;if(id<accounts.accountCapacity*accounts.programAccounts.length){idCounter.current++;createTransaction(blockhash,targetSlotRef.current,config.programId,accounts,id,dispatch,socket);}else{reportError(new Error(\"Account capacity exceeded\"),\"failed to create transaction\");}};},[blockhash,socket,config,accounts,dispatch,targetSlotRef]);return/*#__PURE__*/React.createElement(CreateTxContext.Provider,{value:createTx},children);}export function createTransaction(blockhash,targetSlot,programId,accounts,trackingId,dispatch,socket){var feeAccounts=accounts.feeAccounts,programAccounts=accounts.programAccounts;var bitId=Math.floor(trackingId/feeAccounts.length);var accountIndex=trackingId%feeAccounts.length;var programDataAccount=programAccounts[accountIndex];var feeAccount=feeAccounts[accountIndex];workerRPC.createTransaction({trackingId:trackingId,blockhash:blockhash,programId:programId.toBase58(),programDataAccount:programDataAccount.toBase58(),bitId:bitId,feeAccountSecretKey:feeAccount.secretKey}).then(function(response){var signature=response.signature,serializedTransaction=response.serializedTransaction;socket.send(serializedTransaction);var sentAt=performance.now();var pendingTransaction={sentAt:sentAt,targetSlot:targetSlot};pendingTransaction.timeoutId=window.setTimeout(function(){dispatch({type:\"timeout\",trackingId:trackingId});},SEND_TIMEOUT_MS);var details={id:bitId,feeAccount:feeAccount.publicKey,programAccount:programDataAccount,signature:bs58.encode(signature)};dispatch({type:\"new\",details:details,trackingId:trackingId,pendingTransaction:pendingTransaction});var retryUntil=new URLSearchParams(window.location.search).get(\"retry_until\");if(retryUntil===null||retryUntil!==\"disabled\"){pendingTransaction.retryId=window.setInterval(function(){if(socket.readyState===WebSocket.OPEN){socket.send(serializedTransaction);}},RETRY_INTERVAL_MS);}},function(error){console.error(error);});}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/create.tsx"],"names":["React","bs58","useTargetSlotRef","useDispatch","CreateTransactionRPC","useConfig","useAccounts","useBlockhash","useSocket","reportError","SEND_TIMEOUT_MS","RETRY_INTERVAL_MS","workerRPC","CreateTxContext","createContext","undefined","CreateTxProvider","children","createTx","useRef","config","accounts","idCounter","targetSlotRef","programDataAccount","programAccounts","toBase58","useEffect","current","blockhash","dispatch","socket","id","accountCapacity","length","createTransaction","programId","Error","targetSlot","trackingId","feeAccounts","bitId","Math","floor","accountIndex","feeAccount","feeAccountSecretKey","secretKey","then","response","signature","serializedTransaction","send","sentAt","performance","now","pendingTransaction","timeoutId","window","setTimeout","type","details","publicKey","programAccount","encode","retryUntil","URLSearchParams","location","search","get","retryId","setInterval","readyState","WebSocket","OPEN","error","console"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Blockhash, PublicKey } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport {\n  Dispatch,\n  PendingTransaction,\n  TransactionDetails,\n  useTargetSlotRef,\n  useDispatch,\n} from \"./index\";\nimport { AccountsConfig } from \"../server/http/config\";\nimport {\n  CreateTransactionRPC,\n  CreateTransactionResponseMessage,\n} from \"../../workers/create-transaction-rpc\";\nimport { useConfig, useAccounts } from \"providers/server/http\";\nimport { useBlockhash } from \"providers/rpc/blockhash\";\nimport { useSocket } from \"providers/server/socket\";\nimport { reportError } from \"utils\";\n\nconst SEND_TIMEOUT_MS = 45000;\nconst RETRY_INTERVAL_MS = 500;\n\nconst workerRPC = new CreateTransactionRPC();\nexport const CreateTxContext = React.createContext<\n  React.MutableRefObject<() => void | undefined> | undefined\n>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function CreateTxProvider({ children }: ProviderProps) {\n  const createTx = React.useRef(() => {});\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef<number>(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts?.programAccounts[0].toBase58();\n\n  // Reset counter when program data accounts are refreshed\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n\n  const blockhash = useBlockhash();\n  const dispatch = useDispatch();\n  const socket = useSocket();\n  React.useEffect(() => {\n    createTx.current = () => {\n      if (\n        !blockhash ||\n        !socket ||\n        !config ||\n        !accounts ||\n        !targetSlotRef.current\n      )\n        return;\n      const id = idCounter.current;\n      if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n        idCounter.current++;\n        createTransaction(\n          blockhash,\n          targetSlotRef.current,\n          config.programId,\n          accounts,\n          id,\n          dispatch,\n          socket\n        );\n      } else {\n        reportError(\n          new Error(\"Account capacity exceeded\"),\n          \"failed to create transaction\"\n        );\n      }\n    };\n  }, [blockhash, socket, config, accounts, dispatch, targetSlotRef]);\n\n  return (\n    <CreateTxContext.Provider value={createTx}>\n      {children}\n    </CreateTxContext.Provider>\n  );\n}\n\nexport function createTransaction(\n  blockhash: Blockhash,\n  targetSlot: number,\n  programId: PublicKey,\n  accounts: AccountsConfig,\n  trackingId: number,\n  dispatch: Dispatch,\n  socket: WebSocket\n) {\n  const { feeAccounts, programAccounts } = accounts;\n\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n\n  workerRPC\n    .createTransaction({\n      trackingId: trackingId,\n      blockhash: blockhash,\n      programId: programId.toBase58(),\n      programDataAccount: programDataAccount.toBase58(),\n      bitId: bitId,\n      feeAccountSecretKey: feeAccount.secretKey,\n    })\n    .then(\n      (response: CreateTransactionResponseMessage) => {\n        const { signature, serializedTransaction } = response;\n\n        socket.send(serializedTransaction);\n        const sentAt = performance.now();\n\n        const pendingTransaction: PendingTransaction = { sentAt, targetSlot };\n        pendingTransaction.timeoutId = window.setTimeout(() => {\n          dispatch({ type: \"timeout\", trackingId });\n        }, SEND_TIMEOUT_MS);\n\n        const details: TransactionDetails = {\n          id: bitId,\n          feeAccount: feeAccount.publicKey,\n          programAccount: programDataAccount,\n          signature: bs58.encode(signature),\n        };\n\n        dispatch({\n          type: \"new\",\n          details,\n          trackingId,\n          pendingTransaction,\n        });\n\n        const retryUntil = new URLSearchParams(window.location.search).get(\n          \"retry_until\"\n        );\n        if (retryUntil === null || retryUntil !== \"disabled\") {\n          pendingTransaction.retryId = window.setInterval(() => {\n            if (socket.readyState === WebSocket.OPEN) {\n              socket.send(serializedTransaction);\n            }\n          }, RETRY_INTERVAL_MS);\n        }\n      },\n      (error: any) => {\n        console.error(error);\n      }\n    );\n}\n"]},"metadata":{},"sourceType":"module"}