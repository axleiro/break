{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/worker.tsx\";\nimport * as React from \"react\";\nimport { CreateTransactionRPC } from \"workers/create-transaction-rpc\";\nimport { useConfig, useAccounts } from \"./api\";\nimport { useBlockhash } from \"./blockhash\";\nconst StateContext = React.createContext(undefined);\nexport const WORKER = new CreateTransactionRPC();\nexport function WorkerProvider({\n  children\n}) {\n  const [state, setState] = React.useState(\"loading\");\n  const blockhash = useBlockhash();\n  React.useEffect(() => {\n    if (blockhash) WORKER.send({\n      type: \"blockhash\",\n      blockhash\n    });\n  }, [blockhash]);\n  const accounts = useAccounts();\n  React.useEffect(() => {\n    if (accounts) WORKER.send({\n      type: \"accounts\",\n      feeAccounts: accounts.feeAccounts.map(a => a.secretKey),\n      programAccounts: accounts.programAccounts.map(a => a.toBase58())\n    });\n  }, [accounts]);\n  const config = useConfig();\n  const programId = config === null || config === void 0 ? void 0 : config.programId;\n  const clusterUrl = config === null || config === void 0 ? void 0 : config.clusterUrl;\n  React.useEffect(() => {\n    if (programId && clusterUrl) {\n      WORKER.send({\n        type: \"init\",\n        programId: programId.toBase58(),\n        clusterUrl\n      });\n    }\n  }, [programId, clusterUrl]);\n  React.useEffect(() => {\n    WORKER.setReadyListener(() => {\n      setState(\"ready\");\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport function useWorkerState() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useWorkerState must be used within a WorkerProvider`);\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/worker.tsx"],"names":["React","CreateTransactionRPC","useConfig","useAccounts","useBlockhash","StateContext","createContext","undefined","WORKER","WorkerProvider","children","state","setState","useState","blockhash","useEffect","send","type","accounts","feeAccounts","map","a","secretKey","programAccounts","toBase58","config","programId","clusterUrl","setReadyListener","useWorkerState","useContext","Error"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,oBAAT,QAAqC,gCAArC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,OAAvC;AACA,SAASC,YAAT,QAA6B,aAA7B;AAGA,MAAMC,YAAY,GAAGL,KAAK,CAACM,aAAN,CAAuCC,SAAvC,CAArB;AAEA,OAAO,MAAMC,MAAM,GAAG,IAAIP,oBAAJ,EAAf;AAGP,OAAO,SAASQ,cAAT,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAAqD;AAC1D,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,KAAK,CAACa,QAAN,CAAsB,SAAtB,CAA1B;AAEA,QAAMC,SAAS,GAAGV,YAAY,EAA9B;AACAJ,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AAClB,QAAID,SAAJ,EAAeN,MAAM,CAACQ,IAAP,CAAY;AAACC,MAAAA,IAAI,EAAE,WAAP;AAAoBH,MAAAA;AAApB,KAAZ;AAClB,GAFD,EAEG,CAACA,SAAD,CAFH;AAIA,QAAMI,QAAQ,GAAGf,WAAW,EAA5B;AACAH,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AAClB,QAAIG,QAAJ,EAAcV,MAAM,CAACQ,IAAP,CAAY;AAACC,MAAAA,IAAI,EAAE,UAAP;AAC1BE,MAAAA,WAAW,EAAED,QAAQ,CAACC,WAAT,CAAqBC,GAArB,CAAyBC,CAAC,IAAIA,CAAC,CAACC,SAAhC,CADa;AAE1BC,MAAAA,eAAe,EAAEL,QAAQ,CAACK,eAAT,CAAyBH,GAAzB,CAA6BC,CAAC,IAAIA,CAAC,CAACG,QAAF,EAAlC;AAFS,KAAZ;AAIjB,GALD,EAKG,CAACN,QAAD,CALH;AAOA,QAAMO,MAAM,GAAGvB,SAAS,EAAxB;AACA,QAAMwB,SAAS,GAAGD,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEC,SAA1B;AACA,QAAMC,UAAU,GAAGF,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEE,UAA3B;AACA3B,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AAClB,QAAIW,SAAS,IAAIC,UAAjB,EAA6B;AAC3BnB,MAAAA,MAAM,CAACQ,IAAP,CAAY;AAAEC,QAAAA,IAAI,EAAE,MAAR;AAAgBS,QAAAA,SAAS,EAAEA,SAAS,CAACF,QAAV,EAA3B;AAAiDG,QAAAA;AAAjD,OAAZ;AACD;AACJ,GAJD,EAIG,CAACD,SAAD,EAAYC,UAAZ,CAJH;AAMA3B,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AAClBP,IAAAA,MAAM,CAACoB,gBAAP,CAAwB,MAAM;AAC5BhB,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACD,KAFD;AAGH,GAJD,EAIG,EAJH;AAMA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAED,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,QADL,CADF;AAKD;AAED,OAAO,SAASmB,cAAT,GAA0B;AAC/B,QAAMlB,KAAK,GAAGX,KAAK,CAAC8B,UAAN,CAAiBzB,YAAjB,CAAd;;AACA,MAAI,CAACM,KAAL,EAAY;AACV,UAAM,IAAIoB,KAAJ,CAAW,qDAAX,CAAN;AACD;;AAED,SAAOpB,KAAP;AACD","sourcesContent":["import * as React from \"react\";\nimport { CreateTransactionRPC } from \"workers/create-transaction-rpc\";\nimport { useConfig, useAccounts } from \"./api\";\nimport { useBlockhash } from \"./blockhash\";\n\ntype State = \"loading\" | \"ready\";\nconst StateContext = React.createContext<State | undefined>(undefined);\n\nexport const WORKER = new CreateTransactionRPC();\n\ntype ProviderProps = { children: React.ReactNode };\nexport function WorkerProvider({ children }: ProviderProps) {\n  const [state, setState] = React.useState<State>(\"loading\");\n\n  const blockhash = useBlockhash();\n  React.useEffect(() => {\n      if (blockhash) WORKER.send({type: \"blockhash\", blockhash});\n  }, [blockhash]);\n\n  const accounts = useAccounts();\n  React.useEffect(() => {\n      if (accounts) WORKER.send({type: \"accounts\",\n      feeAccounts: accounts.feeAccounts.map(a => a.secretKey),\n      programAccounts: accounts.programAccounts.map(a => a.toBase58())\n    });\n  }, [accounts]);\n\n  const config = useConfig();\n  const programId = config?.programId;\n  const clusterUrl = config?.clusterUrl;\n  React.useEffect(() => {\n      if (programId && clusterUrl) {\n        WORKER.send({ type: \"init\", programId: programId.toBase58(), clusterUrl });\n      }\n  }, [programId, clusterUrl]);\n\n  React.useEffect(() => {\n      WORKER.setReadyListener(() => {\n        setState(\"ready\");\n      })\n  }, []);\n\n  return (\n    <StateContext.Provider value={state}>\n        {children}\n    </StateContext.Provider>\n  );\n}\n\nexport function useWorkerState() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(`useWorkerState must be used within a WorkerProvider`);\n  }\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}