{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/create.tsx\";\nimport * as React from \"react\";\nimport bs58 from \"bs58\";\nimport { useTargetSlotRef, useDispatch } from \"./index\";\nimport { useConfig, useAccounts } from \"providers/api\";\nimport { reportError } from \"utils\";\nimport { useWorkerState, WORKER } from \"providers/worker\";\nconst SEND_TIMEOUT_MS = 45000;\nconst RETRY_INTERVAL_MS = 500;\nexport const CreateTxContext = React.createContext(undefined);\nexport function CreateTxProvider({\n  children\n}) {\n  const createTx = React.useRef(() => {});\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts === null || accounts === void 0 ? void 0 : accounts.programAccounts[0].toBase58();\n  const workerState = useWorkerState(); // Reset counter when program data accounts are refreshed\n\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    createTx.current = () => {\n      if (workerState === \"loading\" || !config || !accounts || !targetSlotRef.current) return;\n      const id = idCounter.current;\n\n      if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n        idCounter.current++;\n        createTransaction(targetSlotRef.current, accounts, id, dispatch);\n      } else {\n        reportError(new Error(\"Account capacity exceeded\"), \"failed to create transaction\");\n      }\n    };\n  }, [config, accounts, workerState, dispatch, targetSlotRef]);\n  return /*#__PURE__*/React.createElement(CreateTxContext.Provider, {\n    value: createTx,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport function createTransaction(targetSlot, accounts, trackingId, dispatch) {\n  const {\n    feeAccounts,\n    programAccounts\n  } = accounts;\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n  WORKER.createTransaction({\n    type: \"create\",\n    trackingId: trackingId\n  }).then(response => {\n    const {\n      signature\n    } = response;\n    const sentAt = performance.now();\n    const pendingTransaction = {\n      sentAt,\n      targetSlot\n    };\n    pendingTransaction.timeoutId = window.setTimeout(() => {\n      dispatch({\n        type: \"timeout\",\n        trackingId\n      });\n    }, SEND_TIMEOUT_MS);\n    const details = {\n      id: bitId,\n      feeAccount: feeAccount.publicKey,\n      programAccount: programDataAccount,\n      signature: bs58.encode(signature)\n    };\n    dispatch({\n      type: \"new\",\n      details,\n      trackingId,\n      pendingTransaction\n    }); // setTimeout(() => {\n    //   const retryUntil = new URLSearchParams(window.location.search).get(\n    //     \"retry_until\"\n    //   );\n    //   if (retryUntil === null || retryUntil !== \"disabled\") {\n    //     pendingTransaction.retryId = window.setInterval(() => {\n    //       if (socket.readyState === WebSocket.OPEN) {\n    //         socket.send(serializedTransaction);\n    //       }\n    //     }, RETRY_INTERVAL_MS);\n    //   }\n    // }, 1);\n  }, error => {\n    console.error(error);\n  });\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/create.tsx"],"names":["React","bs58","useTargetSlotRef","useDispatch","useConfig","useAccounts","reportError","useWorkerState","WORKER","SEND_TIMEOUT_MS","RETRY_INTERVAL_MS","CreateTxContext","createContext","undefined","CreateTxProvider","children","createTx","useRef","config","accounts","idCounter","targetSlotRef","programDataAccount","programAccounts","toBase58","workerState","useEffect","current","dispatch","id","accountCapacity","length","createTransaction","Error","targetSlot","trackingId","feeAccounts","bitId","Math","floor","accountIndex","feeAccount","type","then","response","signature","sentAt","performance","now","pendingTransaction","timeoutId","window","setTimeout","details","publicKey","programAccount","encode","error","console"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Blockhash, PublicKey } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport {\n  Dispatch,\n  PendingTransaction,\n  TransactionDetails,\n  useTargetSlotRef,\n  useDispatch,\n} from \"./index\";\nimport { AccountsConfig } from \"../api/config\";\nimport { useConfig, useAccounts } from \"providers/api\";\nimport { reportError } from \"utils\";\nimport {\n  CreateTransactionRPC,\n  CreateTransactionResponseMessage,\n} from \"../../workers/create-transaction-rpc\";\nimport { useWorkerState, WORKER } from \"providers/worker\";\n\nconst SEND_TIMEOUT_MS = 45000;\nconst RETRY_INTERVAL_MS = 500;\n\nexport const CreateTxContext = React.createContext<\n  React.MutableRefObject<() => void | undefined> | undefined\n>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function CreateTxProvider({ children }: ProviderProps) {\n  const createTx = React.useRef(() => {});\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef<number>(0);\n  const targetSlotRef = useTargetSlotRef();\n  const programDataAccount = accounts?.programAccounts[0].toBase58();\n  const workerState = useWorkerState();\n\n  // Reset counter when program data accounts are refreshed\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    createTx.current = () => {\n      if (\n        workerState === \"loading\" ||\n        !config ||\n        !accounts ||\n        !targetSlotRef.current\n      )\n        return;\n      const id = idCounter.current;\n      if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n        idCounter.current++;\n        createTransaction(\n          targetSlotRef.current,\n          accounts,\n          id,\n          dispatch,\n        );\n      } else {\n        reportError(\n          new Error(\"Account capacity exceeded\"),\n          \"failed to create transaction\"\n        );\n      }\n    };\n  }, [config, accounts, workerState, dispatch, targetSlotRef]);\n\n  return (\n    <CreateTxContext.Provider value={createTx}>\n      {children}\n    </CreateTxContext.Provider>\n  );\n}\n\nexport function createTransaction(\n  targetSlot: number,\n  accounts: AccountsConfig,\n  trackingId: number,\n  dispatch: Dispatch,\n) {\n  const { feeAccounts, programAccounts } = accounts;\n\n  const bitId = Math.floor(trackingId / feeAccounts.length);\n  const accountIndex = trackingId % feeAccounts.length;\n  const programDataAccount = programAccounts[accountIndex];\n  const feeAccount = feeAccounts[accountIndex];\n\n  WORKER\n    .createTransaction({\n      type: \"create\",\n      trackingId: trackingId,\n    })\n    .then(\n      (response: CreateTransactionResponseMessage) => {\n        const { signature } = response;\n        const sentAt = performance.now();\n        const pendingTransaction: PendingTransaction = { sentAt, targetSlot };\n        pendingTransaction.timeoutId = window.setTimeout(() => {\n          dispatch({ type: \"timeout\", trackingId });\n        }, SEND_TIMEOUT_MS);\n\n        const details: TransactionDetails = {\n          id: bitId,\n          feeAccount: feeAccount.publicKey,\n          programAccount: programDataAccount,\n          signature: bs58.encode(signature),\n        };\n\n        dispatch({\n          type: \"new\",\n          details,\n          trackingId,\n          pendingTransaction,\n        });\n\n        // setTimeout(() => {\n        //   const retryUntil = new URLSearchParams(window.location.search).get(\n        //     \"retry_until\"\n        //   );\n        //   if (retryUntil === null || retryUntil !== \"disabled\") {\n        //     pendingTransaction.retryId = window.setInterval(() => {\n        //       if (socket.readyState === WebSocket.OPEN) {\n        //         socket.send(serializedTransaction);\n        //       }\n        //     }, RETRY_INTERVAL_MS);\n        //   }\n        // }, 1);\n      },\n      (error: any) => {\n        console.error(error);\n      }\n    );\n}\n"]},"metadata":{},"sourceType":"module"}