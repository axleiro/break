{"ast":null,"code":"import _slicedToArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import*as React from\"react\";import{useConfig,useAccounts,useConnection}from\"../api\";import{useBlockhash}from\"../blockhash\";import{ConfirmedHelper}from\"./confirmed\";import{TpsProvider,TpsContext}from\"./tps\";import{createTransaction}from\"./create\";import{SelectedTxProvider}from\"./selected\";import{useSocket}from\"../socket\";import{reportError}from\"utils\";export var ActionType;(function(ActionType){ActionType[ActionType[\"NewTransaction\"]=0]=\"NewTransaction\";ActionType[ActionType[\"UpdateIds\"]=1]=\"UpdateIds\";ActionType[ActionType[\"TimeoutTransaction\"]=2]=\"TimeoutTransaction\";ActionType[ActionType[\"ResetState\"]=3]=\"ResetState\";ActionType[ActionType[\"RecordRoot\"]=4]=\"RecordRoot\";})(ActionType||(ActionType={}));function reducer(state,action){switch(action.type){case ActionType.NewTransaction:{var details=action.details,pendingTransaction=action.pendingTransaction;console.log(\"ELAPSED\",timeElapsed(pendingTransaction.sentAt));return[].concat(_toConsumableArray(state),[{details:details,status:\"pending\",pending:pendingTransaction}]);}case ActionType.TimeoutTransaction:{var trackingId=action.trackingId;if(trackingId>=state.length)return state;var timeout=state[trackingId];if(timeout.status!==\"pending\")return state;clearInterval(timeout.pending.retryId);return state.map(function(tx){if(tx.details.signature===timeout.details.signature){return{status:\"timeout\",details:tx.details};}else{return tx;}});}case ActionType.UpdateIds:{var _action$activeIdParti=action.activeIdPartition,ids=_action$activeIdParti.ids,partition=_action$activeIdParti.partition,partitionCount=_action$activeIdParti.partitionCount;return state.map(function(tx,trackingId){if(trackingId%partitionCount!==partition)return tx;var id=Math.floor(trackingId/partitionCount);if(tx.status===\"pending\"&&ids.has(id)){var confirmationTime=timeElapsed(tx.pending.sentAt);var retryUntil=new URLSearchParams(window.location.search).get(\"retry_until\");if(retryUntil===\"confirmed\")clearInterval(tx.pending.retryId);return{status:\"success\",details:tx.details,slot:action.slot,confirmationTime:confirmationTime,pending:_objectSpread({},tx.pending)};}else if(tx.status===\"success\"&&tx.pending&&!ids.has(id)){return{status:\"pending\",details:tx.details,pending:_objectSpread({},tx.pending)};}return tx;});}case ActionType.ResetState:{state.forEach(function(tx){if(tx.status===\"pending\"){clearTimeout(tx.pending.timeoutId);clearInterval(tx.pending.retryId);}else if(tx.status===\"success\"&&tx.pending){clearTimeout(tx.pending.timeoutId);clearInterval(tx.pending.retryId);}});return[];}case ActionType.RecordRoot:{var foundRooted=state.find(function(tx){return tx.status===\"success\"&&tx.pending&&tx.slot===action.root;});if(!foundRooted)return state;return state.map(function(tx){if(tx.status===\"success\"&&tx.pending&&tx.slot===action.root){clearInterval(tx.pending.retryId);clearTimeout(tx.pending.timeoutId);return _objectSpread(_objectSpread({},tx),{},{pending:undefined});}else{return tx;}});}}}var StateContext=React.createContext(undefined);var DispatchContext=React.createContext(undefined);export function TransactionsProvider(_ref){var children=_ref.children;var _React$useReducer=React.useReducer(reducer,[]),_React$useReducer2=_slicedToArray(_React$useReducer,2),state=_React$useReducer2[0],dispatch=_React$useReducer2[1];var connection=useConnection();React.useEffect(function(){dispatch({type:ActionType.ResetState});if(connection===undefined)return;var rootSubscription=connection.onRootChange(function(root){return dispatch({type:ActionType.RecordRoot,root:root});});return function(){connection.removeRootChangeListener(rootSubscription);};},[connection]);return/*#__PURE__*/React.createElement(StateContext.Provider,{value:state},/*#__PURE__*/React.createElement(DispatchContext.Provider,{value:dispatch},/*#__PURE__*/React.createElement(SelectedTxProvider,null,/*#__PURE__*/React.createElement(ConfirmedHelper,null,/*#__PURE__*/React.createElement(TpsProvider,null,children)))));}function timeElapsed(sentAt){var now=performance.now();return parseFloat(((now-sentAt)/1000).toFixed(3));}export function useDispatch(){var dispatch=React.useContext(DispatchContext);if(!dispatch){throw new Error(\"useDispatch must be used within a TransactionsProvider\");}return dispatch;}export function useTransactions(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useTransactions must be used within a TransactionsProvider\");}return state;}export function useConfirmedCount(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useConfirmedCount must be used within a TransactionsProvider\");}return state.filter(function(_ref2){var status=_ref2.status;return status===\"success\";}).length;}export function useDroppedCount(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useDroppedCount must be used within a TransactionsProvider\");}return state.filter(function(_ref3){var status=_ref3.status;return status===\"timeout\";}).length;}export function useAvgConfirmationTime(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useAvgConfirmationTime must be used within a TransactionsProvider\");}var confirmed=state.reduce(function(confirmed,tx){if(tx.status===\"success\"){confirmed.push(tx.confirmationTime);}return confirmed;},[]);var count=confirmed.length;if(count===0)return 0;var sum=confirmed.reduce(function(sum,time){return sum+time;},0);return sum/count;}export function useCreatedCount(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useCreatedCount must be used within a TransactionsProvider\");}return state.length;}export function useTps(){var tps=React.useContext(TpsContext);if(tps===undefined)throw new Error(\"useTps must be used within a TransactionsProvider\");return tps;}export function useCreateTx(){var config=useConfig();var accounts=useAccounts();var idCounter=React.useRef(0);var programDataAccount=accounts===null||accounts===void 0?void 0:accounts.programAccounts[0].toBase58();// Reset counter when program data accounts are refreshed\nReact.useEffect(function(){idCounter.current=0;},[programDataAccount]);var blockhash=useBlockhash();var dispatch=useDispatch();var socket=useSocket();return React.useCallback(function(){if(!blockhash||!socket||!config||!accounts)return;var id=idCounter.current;if(id<accounts.accountCapacity*accounts.programAccounts.length){idCounter.current++;createTransaction(blockhash,config.programId,accounts,id,dispatch,socket);}else{reportError(new Error(\"Account capacity exceeded\"),\"failed to create transaction\");}},[blockhash,socket,config,accounts,dispatch]);}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/index.tsx"],"names":["React","useConfig","useAccounts","useConnection","useBlockhash","ConfirmedHelper","TpsProvider","TpsContext","createTransaction","SelectedTxProvider","useSocket","reportError","ActionType","reducer","state","action","type","NewTransaction","details","pendingTransaction","console","log","timeElapsed","sentAt","status","pending","TimeoutTransaction","trackingId","length","timeout","clearInterval","retryId","map","tx","signature","UpdateIds","activeIdPartition","ids","partition","partitionCount","id","Math","floor","has","confirmationTime","retryUntil","URLSearchParams","window","location","search","get","slot","ResetState","forEach","clearTimeout","timeoutId","RecordRoot","foundRooted","find","root","undefined","StateContext","createContext","DispatchContext","TransactionsProvider","children","useReducer","dispatch","connection","useEffect","rootSubscription","onRootChange","removeRootChangeListener","now","performance","parseFloat","toFixed","useDispatch","useContext","Error","useTransactions","useConfirmedCount","filter","useDroppedCount","useAvgConfirmationTime","confirmed","reduce","push","count","sum","time","useCreatedCount","useTps","tps","useCreateTx","config","accounts","idCounter","useRef","programDataAccount","programAccounts","toBase58","current","blockhash","socket","useCallback","accountCapacity","programId"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { TransactionSignature, PublicKey } from \"@solana/web3.js\";\nimport { useConfig, useAccounts, useConnection } from \"../api\";\nimport { useBlockhash } from \"../blockhash\";\nimport { ConfirmedHelper } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { createTransaction } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useSocket } from \"../socket\";\nimport { reportError } from \"utils\";\n\nexport type PendingTransaction = {\n  sentAt: number;\n  retryId?: number;\n  timeoutId?: number;\n};\n\nexport type TransactionDetails = {\n  id: number;\n  feeAccount: PublicKey;\n  programAccount: PublicKey;\n  signature: TransactionSignature;\n};\n\ntype SuccessState = {\n  status: \"success\";\n  details: TransactionDetails;\n  slot: number;\n  confirmationTime: number;\n  pending?: PendingTransaction;\n};\n\ntype TimeoutState = {\n  status: \"timeout\";\n  details: TransactionDetails;\n};\n\ntype PendingState = {\n  status: \"pending\";\n  pending: PendingTransaction;\n  details: TransactionDetails;\n};\n\nexport type TransactionStatus = \"success\" | \"timeout\" | \"pending\";\n\nexport type TransactionState = SuccessState | TimeoutState | PendingState;\n\nexport enum ActionType {\n  NewTransaction,\n  UpdateIds,\n  TimeoutTransaction,\n  ResetState,\n  RecordRoot,\n}\n\ntype UpdateIds = {\n  type: ActionType.UpdateIds;\n  activeIdPartition: {\n    ids: Set<number>;\n    partition: number;\n    partitionCount: number;\n  };\n  slot: number;\n};\n\ntype NewTransaction = {\n  type: ActionType.NewTransaction;\n  trackingId: number;\n  details: TransactionDetails;\n  pendingTransaction: PendingTransaction;\n};\n\ntype TimeoutTransaction = {\n  type: ActionType.TimeoutTransaction;\n  trackingId: number;\n};\n\ntype ResetState = {\n  type: ActionType.ResetState;\n};\n\ntype RecordRoot = {\n  type: ActionType.RecordRoot;\n  root: number;\n};\n\ntype Action =\n  | NewTransaction\n  | UpdateIds\n  | TimeoutTransaction\n  | ResetState\n  | RecordRoot;\n\ntype State = TransactionState[];\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case ActionType.NewTransaction: {\n      const { details, pendingTransaction } = action;\n      console.log(\"ELAPSED\", timeElapsed(pendingTransaction.sentAt));\n      return [\n        ...state,\n        {\n          details,\n          status: \"pending\",\n          pending: pendingTransaction,\n        },\n      ];\n    }\n\n    case ActionType.TimeoutTransaction: {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const timeout = state[trackingId];\n      if (timeout.status !== \"pending\") return state;\n      clearInterval(timeout.pending.retryId);\n\n      return state.map((tx) => {\n        if (tx.details.signature === timeout.details.signature) {\n          return {\n            status: \"timeout\",\n            details: tx.details,\n          };\n        } else {\n          return tx;\n        }\n      });\n    }\n\n    case ActionType.UpdateIds: {\n      const { ids, partition, partitionCount } = action.activeIdPartition;\n      return state.map((tx, trackingId) => {\n        if (trackingId % partitionCount !== partition) return tx;\n        const id = Math.floor(trackingId / partitionCount);\n        if (tx.status === \"pending\" && ids.has(id)) {\n          const confirmationTime = timeElapsed(tx.pending.sentAt);\n          const retryUntil = new URLSearchParams(window.location.search).get(\n            \"retry_until\"\n          );\n          if (retryUntil === \"confirmed\") clearInterval(tx.pending.retryId);\n          return {\n            status: \"success\",\n            details: tx.details,\n            slot: action.slot,\n            confirmationTime,\n            pending: { ...tx.pending },\n          };\n        } else if (tx.status === \"success\" && tx.pending && !ids.has(id)) {\n          return {\n            status: \"pending\",\n            details: tx.details,\n            pending: { ...tx.pending },\n          };\n        }\n        return tx;\n      });\n    }\n\n    case ActionType.ResetState: {\n      state.forEach((tx) => {\n        if (tx.status === \"pending\") {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        } else if (tx.status === \"success\" && tx.pending) {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        }\n      });\n      return [];\n    }\n\n    case ActionType.RecordRoot: {\n      const foundRooted = state.find((tx) => {\n        return tx.status === \"success\" && tx.pending && tx.slot === action.root;\n      });\n      if (!foundRooted) return state;\n\n      return state.map((tx) => {\n        if (tx.status === \"success\" && tx.pending && tx.slot === action.root) {\n          clearInterval(tx.pending.retryId);\n          clearTimeout(tx.pending.timeoutId);\n          return {\n            ...tx,\n            pending: undefined,\n          };\n        } else {\n          return tx;\n        }\n      });\n    }\n  }\n}\n\nexport type Dispatch = (action: Action) => void;\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function TransactionsProvider({ children }: ProviderProps) {\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n\n  React.useEffect(() => {\n    dispatch({\n      type: ActionType.ResetState,\n    });\n\n    if (connection === undefined) return;\n    const rootSubscription = connection.onRootChange((root: number) =>\n      dispatch({ type: ActionType.RecordRoot, root })\n    );\n\n    return () => {\n      connection.removeRootChangeListener(rootSubscription);\n    };\n  }, [connection]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <SelectedTxProvider>\n          <ConfirmedHelper>\n            <TpsProvider>{children}</TpsProvider>\n          </ConfirmedHelper>\n        </SelectedTxProvider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nfunction timeElapsed(sentAt: number): number {\n  const now = performance.now();\n  return parseFloat(((now - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\n\nexport function useTransactions() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useTransactions must be used within a TransactionsProvider`\n    );\n  }\n\n  return state;\n}\n\nexport function useConfirmedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useConfirmedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"success\").length;\n}\n\nexport function useDroppedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useDroppedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"timeout\").length;\n}\n\nexport function useAvgConfirmationTime() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useAvgConfirmationTime must be used within a TransactionsProvider`\n    );\n  }\n\n  const confirmed = state.reduce((confirmed: number[], tx) => {\n    if (tx.status === \"success\") {\n      confirmed.push(tx.confirmationTime);\n    }\n    return confirmed;\n  }, []);\n\n  const count = confirmed.length;\n  if (count === 0) return 0;\n  const sum = confirmed.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\n\nexport function useCreatedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useCreatedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.length;\n}\n\nexport function useTps() {\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined)\n    throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\n\nexport function useCreateTx() {\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef<number>(0);\n  const programDataAccount = accounts?.programAccounts[0].toBase58();\n\n  // Reset counter when program data accounts are refreshed\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n\n  const blockhash = useBlockhash();\n  const dispatch = useDispatch();\n  const socket = useSocket();\n  return React.useCallback(() => {\n    if (!blockhash || !socket || !config || !accounts) return;\n    const id = idCounter.current;\n    if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n      idCounter.current++;\n      createTransaction(\n        blockhash,\n        config.programId,\n        accounts,\n        id,\n        dispatch,\n        socket\n      );\n    } else {\n      reportError(\n        new Error(\"Account capacity exceeded\"),\n        \"failed to create transaction\"\n      );\n    }\n  }, [blockhash, socket, config, accounts, dispatch]);\n}\n"]},"metadata":{},"sourceType":"module"}