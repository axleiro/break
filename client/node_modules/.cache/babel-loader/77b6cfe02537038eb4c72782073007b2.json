{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import*as React from\"react\";import{useConfig}from\"../server/http\";import{usePayerState}from\"../wallet\";import{reportError}from\"utils\";import{useConnection}from\".\";import{jsx as _jsx}from\"react/jsx-runtime\";var StateContext=/*#__PURE__*/React.createContext(undefined);export function BalanceProvider(_ref){var children=_ref.children;var _React$useState=React.useState(\"loading\"),_React$useState2=_slicedToArray(_React$useState,2),balance=_React$useState2[0],setBalance=_React$useState2[1];var _usePayerState=usePayerState(),_usePayerState2=_slicedToArray(_usePayerState,1),payer=_usePayerState2[0];var config=useConfig();var connection=useConnection();var paymentRequired=config===null||config===void 0?void 0:config.paymentRequired;var refreshBalance=React.useCallback(function(){if(payer===undefined||connection===undefined||paymentRequired!==true){setBalance(\"loading\");return;}_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _balance;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return connection.getBalance(payer.publicKey,\"singleGossip\");case 3:_balance=_context.sent;setBalance(_balance);_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);reportError(_context.t0,\"Failed to refresh balance\");case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}))();},[payer,connection,paymentRequired]);React.useEffect(function(){refreshBalance();var onChange=function onChange(){if(document.visibilityState!==\"visible\")return;refreshBalance();};document.addEventListener(\"visibilitychange\",onChange);return function(){return document.removeEventListener(\"visibilitychange\",onChange);};},[refreshBalance]);React.useEffect(function(){if(payer===undefined||connection===undefined||paymentRequired!==true)return;var subscription=connection.onAccountChange(payer.publicKey,function(accountInfo){return setBalance(accountInfo.lamports);},\"singleGossip\");return function(){connection.removeAccountChangeListener(subscription);};},[payer,connection,paymentRequired]);return/*#__PURE__*/_jsx(StateContext.Provider,{value:balance,children:children});}export function useBalance(){var state=React.useContext(StateContext);if(state===undefined){throw new Error(\"useBalance must be used within a BalanceProvider\");}return state;}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/rpc/balance.tsx"],"names":["React","useConfig","usePayerState","reportError","useConnection","StateContext","createContext","undefined","BalanceProvider","children","useState","balance","setBalance","payer","config","connection","paymentRequired","refreshBalance","useCallback","getBalance","publicKey","useEffect","onChange","document","visibilityState","addEventListener","removeEventListener","subscription","onAccountChange","accountInfo","lamports","removeAccountChangeListener","useBalance","state","useContext","Error"],"mappings":"seAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CAEA,OAASC,SAAT,KAA0B,gBAA1B,CACA,OAASC,aAAT,KAA8B,WAA9B,CACA,OAASC,WAAT,KAA4B,OAA5B,CACA,OAASC,aAAT,KAA8B,GAA9B,C,2CAGA,GAAMC,CAAAA,YAAY,cAAGL,KAAK,CAACM,aAAN,CAAyCC,SAAzC,CAArB,CAGA,MAAO,SAASC,CAAAA,eAAT,MAA8C,IAAnBC,CAAAA,QAAmB,MAAnBA,QAAmB,qBACrBT,KAAK,CAACU,QAAN,CAAwB,SAAxB,CADqB,oDAC5CC,OAD4C,qBACnCC,UADmC,wCAEnCV,aAAa,EAFsB,kDAE5CW,KAF4C,oBAGnD,GAAMC,CAAAA,MAAM,CAAGb,SAAS,EAAxB,CACA,GAAMc,CAAAA,UAAU,CAAGX,aAAa,EAAhC,CACA,GAAMY,CAAAA,eAAe,CAAGF,MAAH,SAAGA,MAAH,iBAAGA,MAAM,CAAEE,eAAhC,CAEA,GAAMC,CAAAA,cAAc,CAAGjB,KAAK,CAACkB,WAAN,CAAkB,UAAM,CAC7C,GACEL,KAAK,GAAKN,SAAV,EACAQ,UAAU,GAAKR,SADf,EAEAS,eAAe,GAAK,IAHtB,CAIE,CACAJ,UAAU,CAAC,SAAD,CAAV,CACA,OACD,CAED,wDAAC,sLAEyBG,CAAAA,UAAU,CAACI,UAAX,CACpBN,KAAK,CAACO,SADc,CAEpB,cAFoB,CAFzB,QAEST,QAFT,eAMGC,UAAU,CAACD,QAAD,CAAV,CANH,+EAQGR,WAAW,aAAM,2BAAN,CAAX,CARH,oEAAD,KAWD,CArBsB,CAqBpB,CAACU,KAAD,CAAQE,UAAR,CAAoBC,eAApB,CArBoB,CAAvB,CAuBAhB,KAAK,CAACqB,SAAN,CAAgB,UAAM,CACpBJ,cAAc,GACd,GAAMK,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,GAAIC,QAAQ,CAACC,eAAT,GAA6B,SAAjC,CAA4C,OAC5CP,cAAc,GACf,CAHD,CAKAM,QAAQ,CAACE,gBAAT,CAA0B,kBAA1B,CAA8CH,QAA9C,EACA,MAAO,kBAAMC,CAAAA,QAAQ,CAACG,mBAAT,CAA6B,kBAA7B,CAAiDJ,QAAjD,CAAN,EAAP,CACD,CATD,CASG,CAACL,cAAD,CATH,EAWAjB,KAAK,CAACqB,SAAN,CAAgB,UAAM,CACpB,GACER,KAAK,GAAKN,SAAV,EACAQ,UAAU,GAAKR,SADf,EAEAS,eAAe,GAAK,IAHtB,CAKE,OACF,GAAMW,CAAAA,YAAY,CAAGZ,UAAU,CAACa,eAAX,CACnBf,KAAK,CAACO,SADa,CAEnB,SAACS,WAAD,QAAsCjB,CAAAA,UAAU,CAACiB,WAAW,CAACC,QAAb,CAAhD,EAFmB,CAGnB,cAHmB,CAArB,CAMA,MAAO,WAAM,CACXf,UAAU,CAACgB,2BAAX,CAAuCJ,YAAvC,EACD,CAFD,CAGD,CAhBD,CAgBG,CAACd,KAAD,CAAQE,UAAR,CAAoBC,eAApB,CAhBH,EAkBA,mBACE,KAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAEL,OAA9B,UAAwCF,QAAxC,EADF,CAGD,CAED,MAAO,SAASuB,CAAAA,UAAT,EAA+B,CACpC,GAAMC,CAAAA,KAAK,CAAGjC,KAAK,CAACkC,UAAN,CAAiB7B,YAAjB,CAAd,CACA,GAAI4B,KAAK,GAAK1B,SAAd,CAAyB,CACvB,KAAM,IAAI4B,CAAAA,KAAJ,oDAAN,CACD,CACD,MAAOF,CAAAA,KAAP,CACD","sourcesContent":["import * as React from \"react\";\nimport { AccountInfo } from \"@solana/web3.js\";\nimport { useConfig } from \"../server/http\";\nimport { usePayerState } from \"../wallet\";\nimport { reportError } from \"utils\";\nimport { useConnection } from \".\";\n\ntype Balance = number | \"loading\";\nconst StateContext = React.createContext<Balance | undefined>(undefined);\n\ntype Props = { children: React.ReactNode };\nexport function BalanceProvider({ children }: Props) {\n  const [balance, setBalance] = React.useState<Balance>(\"loading\");\n  const [payer] = usePayerState();\n  const config = useConfig();\n  const connection = useConnection();\n  const paymentRequired = config?.paymentRequired;\n\n  const refreshBalance = React.useCallback(() => {\n    if (\n      payer === undefined ||\n      connection === undefined ||\n      paymentRequired !== true\n    ) {\n      setBalance(\"loading\");\n      return;\n    }\n\n    (async () => {\n      try {\n        const balance = await connection.getBalance(\n          payer.publicKey,\n          \"singleGossip\"\n        );\n        setBalance(balance);\n      } catch (err) {\n        reportError(err, \"Failed to refresh balance\");\n      }\n    })();\n  }, [payer, connection, paymentRequired]);\n\n  React.useEffect(() => {\n    refreshBalance();\n    const onChange = () => {\n      if (document.visibilityState !== \"visible\") return;\n      refreshBalance();\n    };\n\n    document.addEventListener(\"visibilitychange\", onChange);\n    return () => document.removeEventListener(\"visibilitychange\", onChange);\n  }, [refreshBalance]);\n\n  React.useEffect(() => {\n    if (\n      payer === undefined ||\n      connection === undefined ||\n      paymentRequired !== true\n    )\n      return;\n    const subscription = connection.onAccountChange(\n      payer.publicKey,\n      (accountInfo: AccountInfo<Buffer>) => setBalance(accountInfo.lamports),\n      \"singleGossip\"\n    );\n\n    return () => {\n      connection.removeAccountChangeListener(subscription);\n    };\n  }, [payer, connection, paymentRequired]);\n\n  return (\n    <StateContext.Provider value={balance}>{children}</StateContext.Provider>\n  );\n}\n\nexport function useBalance(): Balance {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useBalance must be used within a BalanceProvider`);\n  }\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}