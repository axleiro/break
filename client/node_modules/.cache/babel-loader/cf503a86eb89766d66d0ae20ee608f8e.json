{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/components/ClusterModal.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDebounceCallback } from \"@react-hook/debounce\";\nimport { useServer, serverName, useClusterModal, SERVERS, DEFAULT_SERVER, useCustomUrl } from \"../providers/server\";\nimport { useRpcUrlState } from \"providers/rpc\";\nimport { useConfig } from \"providers/server/http\";\n\nfunction ClusterModal() {\n  _s();\n\n  const [show, setShow] = useClusterModal();\n\n  const onClose = () => setShow(false);\n\n  const {\n    server\n  } = useServer();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `modal fade fixed-right${show ? \" show\" : \"\"}`,\n      onClick: onClose,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog modal-dialog-vertical\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-body\",\n            onClick: e => e.stopPropagation(),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"c-pointer\",\n              onClick: onClose,\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-center mb-4 mt-4\",\n              children: \"Choose a Cluster\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ClusterToggle, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-center mb-4 mt-5\",\n              children: [\"Override \", serverName(server), \" RPC\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CustomRpcInput, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ClusterModal, \"cOBzxZOlm0Ey4tUwWyGDbNt5ngU=\", false, function () {\n  return [useClusterModal, useServer];\n});\n\n_c = ClusterModal;\n\nfunction CustomRpcInput() {\n  _s2();\n\n  var _useConfig;\n\n  const [rpcUrl, setRpcUrl] = useRpcUrlState();\n  const [editing, setEditing] = React.useState(false);\n  const configRpcUrl = (_useConfig = useConfig()) === null || _useConfig === void 0 ? void 0 : _useConfig.rpcUrl;\n  const active = configRpcUrl !== rpcUrl;\n\n  const customClass = prefix => active ? `${prefix}-info` : \"\";\n\n  const onUrlInput = useDebounceCallback(url => {\n    if (url.length > 0) {\n      setRpcUrl(url);\n    } else if (configRpcUrl) {\n      setRpcUrl(configRpcUrl);\n    }\n  }, 500);\n  const defaultValue = active ? rpcUrl : \"\";\n  const inputTextClass = editing ? \"\" : \"text-muted\";\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    defaultValue: defaultValue,\n    placeholder: \"http://127.0.0.1:8899\",\n    className: `form-control form-control-prepended b-black ${inputTextClass} ${customClass(\"border\")}`,\n    onFocus: () => setEditing(true),\n    onBlur: () => setEditing(false),\n    onInput: e => onUrlInput(e.currentTarget.value)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(CustomRpcInput, \"CQ3OGgqYfWvCQn/GrtBwd5ve2FU=\", false, function () {\n  return [useRpcUrlState, useConfig, useDebounceCallback];\n});\n\n_c2 = CustomRpcInput;\n\nfunction CustomClusterInput() {\n  _s3();\n\n  const [customUrl, setCustomUrl] = useCustomUrl();\n  const [editing, setEditing] = React.useState(false);\n  const onUrlInput = useDebounceCallback(url => {\n    setCustomUrl(url);\n  }, 500);\n  const inputTextClass = editing ? \"\" : \"text-muted\";\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    defaultValue: customUrl,\n    className: `form-control form-control-prepended b-black ${inputTextClass}`,\n    onFocus: () => setEditing(true),\n    onBlur: () => setEditing(false),\n    onInput: e => onUrlInput(e.currentTarget.value)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(CustomClusterInput, \"aXmoRkgSQPu2zSmGTQE9eJdQ8wc=\", false, function () {\n  return [useCustomUrl, useDebounceCallback];\n});\n\n_c3 = CustomClusterInput;\n\nfunction ClusterToggle() {\n  _s4();\n\n  const {\n    server\n  } = useServer();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group-toggle d-flex flex-wrap mb-4\",\n      children: SERVERS.map(next => {\n        const active = next === server;\n        const btnClass = active ? `active btn-dark border-info text-white` : \"btn-dark\";\n\n        const clusterLocation = location => {\n          const params = new URLSearchParams(location.search);\n\n          if (next !== DEFAULT_SERVER) {\n            params.set(\"cluster\", next);\n          } else {\n            params.delete(\"cluster\");\n          }\n\n          return { ...location,\n            search: params.toString()\n          };\n        };\n\n        return /*#__PURE__*/_jsxDEV(Link, {\n          className: `btn text-center col-12 mb-3 ${btnClass}`,\n          to: clusterLocation,\n          children: serverName(next)\n        }, next, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), server === \"custom\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4 mt-4\",\n        children: \"Break Server URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CustomClusterInput, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n\n_s4(ClusterToggle, \"50OoDgBd22bUGZV8KnVb0m9hHiY=\", false, function () {\n  return [useServer];\n});\n\n_c4 = ClusterToggle;\nexport default ClusterModal;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ClusterModal\");\n$RefreshReg$(_c2, \"CustomRpcInput\");\n$RefreshReg$(_c3, \"CustomClusterInput\");\n$RefreshReg$(_c4, \"ClusterToggle\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/components/ClusterModal.tsx"],"names":["React","Link","useDebounceCallback","useServer","serverName","useClusterModal","SERVERS","DEFAULT_SERVER","useCustomUrl","useRpcUrlState","useConfig","ClusterModal","show","setShow","onClose","server","e","stopPropagation","CustomRpcInput","rpcUrl","setRpcUrl","editing","setEditing","useState","configRpcUrl","active","customClass","prefix","onUrlInput","url","length","defaultValue","inputTextClass","currentTarget","value","CustomClusterInput","customUrl","setCustomUrl","ClusterToggle","map","next","btnClass","clusterLocation","location","params","URLSearchParams","search","set","delete","toString"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDebounceCallback } from \"@react-hook/debounce\";\nimport { Location } from \"history\";\nimport {\n  useServer,\n  serverName,\n  useClusterModal,\n  SERVERS,\n  DEFAULT_SERVER,\n  useCustomUrl,\n} from \"../providers/server\";\nimport { useRpcUrlState } from \"providers/rpc\";\nimport { useConfig } from \"providers/server/http\";\n\nfunction ClusterModal() {\n  const [show, setShow] = useClusterModal();\n  const onClose = () => setShow(false);\n  const { server } = useServer();\n  return (\n    <>\n      <div\n        className={`modal fade fixed-right${show ? \" show\" : \"\"}`}\n        onClick={onClose}\n      >\n        <div className=\"modal-dialog modal-dialog-vertical\">\n          <div className=\"modal-content\">\n            <div className=\"modal-body\" onClick={(e) => e.stopPropagation()}>\n              <span className=\"c-pointer\" onClick={onClose}>\n                &times;\n              </span>\n\n              <h2 className=\"text-center mb-4 mt-4\">Choose a Cluster</h2>\n\n              <ClusterToggle />\n\n              <h2 className=\"text-center mb-4 mt-5\">\n                Override {serverName(server)} RPC\n              </h2>\n\n              <CustomRpcInput />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction CustomRpcInput() {\n  const [rpcUrl, setRpcUrl] = useRpcUrlState();\n  const [editing, setEditing] = React.useState(false);\n  const configRpcUrl = useConfig()?.rpcUrl;\n  const active = configRpcUrl !== rpcUrl;\n\n  const customClass = (prefix: string) => (active ? `${prefix}-info` : \"\");\n  const onUrlInput = useDebounceCallback((url: string) => {\n    if (url.length > 0) {\n      setRpcUrl(url);\n    } else if (configRpcUrl) {\n      setRpcUrl(configRpcUrl);\n    }\n  }, 500);\n\n  const defaultValue = active ? rpcUrl : \"\";\n  const inputTextClass = editing ? \"\" : \"text-muted\";\n  return (\n    <input\n      type=\"text\"\n      defaultValue={defaultValue}\n      placeholder=\"http://127.0.0.1:8899\"\n      className={`form-control form-control-prepended b-black ${inputTextClass} ${customClass(\n        \"border\"\n      )}`}\n      onFocus={() => setEditing(true)}\n      onBlur={() => setEditing(false)}\n      onInput={(e) => onUrlInput(e.currentTarget.value)}\n    />\n  );\n}\n\nfunction CustomClusterInput() {\n  const [customUrl, setCustomUrl] = useCustomUrl();\n  const [editing, setEditing] = React.useState(false);\n\n  const onUrlInput = useDebounceCallback((url: string) => {\n    setCustomUrl(url);\n  }, 500);\n\n  const inputTextClass = editing ? \"\" : \"text-muted\";\n  return (\n    <input\n      type=\"text\"\n      defaultValue={customUrl}\n      className={`form-control form-control-prepended b-black ${inputTextClass}`}\n      onFocus={() => setEditing(true)}\n      onBlur={() => setEditing(false)}\n      onInput={(e) => onUrlInput(e.currentTarget.value)}\n    />\n  );\n}\n\nfunction ClusterToggle() {\n  const { server } = useServer();\n\n  return (\n    <>\n      <div className=\"btn-group-toggle d-flex flex-wrap mb-4\">\n        {SERVERS.map((next) => {\n          const active = next === server;\n          const btnClass = active\n            ? `active btn-dark border-info text-white`\n            : \"btn-dark\";\n\n          const clusterLocation = (location: Location) => {\n            const params = new URLSearchParams(location.search);\n            if (next !== DEFAULT_SERVER) {\n              params.set(\"cluster\", next);\n            } else {\n              params.delete(\"cluster\");\n            }\n            return {\n              ...location,\n              search: params.toString(),\n            };\n          };\n\n          return (\n            <Link\n              key={next}\n              className={`btn text-center col-12 mb-3 ${btnClass}`}\n              to={clusterLocation}\n            >\n              {serverName(next)}\n            </Link>\n          );\n        })}\n      </div>\n      {server === \"custom\" && (\n        <>\n          <h2 className=\"text-center mb-4 mt-4\">Break Server URL</h2>\n          <CustomClusterInput />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default ClusterModal;\n"]},"metadata":{},"sourceType":"module"}