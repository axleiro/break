{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import React from\"react\";import{useConnection}from\"./rpc\";var SlotContext=/*#__PURE__*/React.createContext(undefined);var SlotMetricsContext=/*#__PURE__*/React.createContext(undefined);export function useTargetSlotRef(){var slotRef=React.useContext(SlotContext);if(!slotRef){throw new Error(\"useTargetSlotRef must be used within a SlotProvider\");}return slotRef;}export function SlotProvider(_ref){var children=_ref.children;var connection=useConnection();var targetSlot=React.useRef();var slotMetrics=React.useRef(new Map());React.useEffect(function(){if(connection===undefined)return;var disabledSlotSubscription=false;var slotSubscription=connection.onSlotChange(function(_ref2){var slot=_ref2.slot;targetSlot.current=slot;});var interval=setInterval(function(){console.log(\"SLOT METRICS\",slotMetrics.current);},5000);var slotUpdateSubscription=connection.onSlotUpdate(function(_ref3){var type=_ref3.type,slot=_ref3.slot,timestamp=_ref3.timestamp;console.log(\"YO\",type,slot,timestamp);// Remove if slot update api is active\nif(!disabledSlotSubscription){connection.removeSlotChangeListener(slotSubscription);disabledSlotSubscription=true;}if(type===\"firstShredReceived\"){slotMetrics.current.set(slot,{firstShred:timestamp});return;}var slotTiming=slotMetrics.current.get(slot);if(!slotTiming)return;if(type===\"optimisticConfirmation\"){slotTiming.confirmed=timestamp;}else if(type===\"frozen\"){slotTiming.frozen=timestamp;}});return function(){clearInterval(interval);if(!disabledSlotSubscription){connection.removeSlotChangeListener(slotSubscription);}connection.removeSlotUpdateListener(slotUpdateSubscription);};},[connection]);return/*#__PURE__*/_jsx(SlotContext.Provider,{value:targetSlot,children:/*#__PURE__*/_jsx(SlotMetricsContext.Provider,{value:slotMetrics,children:children})});}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/slot.tsx"],"names":["React","useConnection","SlotContext","createContext","undefined","SlotMetricsContext","useTargetSlotRef","slotRef","useContext","Error","SlotProvider","children","connection","targetSlot","useRef","slotMetrics","Map","useEffect","disabledSlotSubscription","slotSubscription","onSlotChange","slot","current","interval","setInterval","console","log","slotUpdateSubscription","onSlotUpdate","type","timestamp","removeSlotChangeListener","set","firstShred","slotTiming","get","confirmed","frozen","clearInterval","removeSlotUpdateListener"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useConnection } from \"./rpc\";\n\nconst SlotContext = React.createContext<\n  React.MutableRefObject<number | undefined> | undefined\n>(undefined);\n\nconst SlotMetricsContext = React.createContext<\n  React.MutableRefObject<Map<number, SlotTiming>> | undefined\n>(undefined);\n\ntype SlotTiming = {\n  firstShred: number;\n  frozen?: number;\n  confirmed?: number;\n};\n\nexport function useTargetSlotRef() {\n  const slotRef = React.useContext(SlotContext);\n  if (!slotRef) {\n    throw new Error(`useTargetSlotRef must be used within a SlotProvider`);\n  }\n\n  return slotRef;\n}\n\ntype ProviderProps = { children: React.ReactNode };\nexport function SlotProvider({ children }: ProviderProps) {\n  const connection = useConnection();\n  const targetSlot = React.useRef<number>();\n  const slotMetrics = React.useRef(new Map<number, SlotTiming>());\n\n  React.useEffect(() => {\n    if (connection === undefined) return;\n\n    let disabledSlotSubscription = false;\n    const slotSubscription = connection.onSlotChange(({ slot }) => {\n      targetSlot.current = slot;\n    });\n\n    const interval = setInterval(() => {\n      console.log(\"SLOT METRICS\", slotMetrics.current);\n    }, 5000);\n\n    const slotUpdateSubscription = connection.onSlotUpdate(\n      ({ type, slot, timestamp }) => {\n        console.log(\"YO\", type, slot, timestamp);\n        // Remove if slot update api is active\n        if (!disabledSlotSubscription) {\n          connection.removeSlotChangeListener(slotSubscription);\n          disabledSlotSubscription = true;\n        }\n\n        if (type === \"firstShredReceived\") {\n          slotMetrics.current.set(slot, {\n            firstShred: timestamp,\n          });\n          return;\n        }\n\n        const slotTiming = slotMetrics.current.get(slot);\n        if (!slotTiming) return;\n\n        if (type === \"optimisticConfirmation\") {\n          slotTiming.confirmed = timestamp;\n        } else if (type === \"frozen\") {\n          slotTiming.frozen = timestamp;\n        }\n      }\n    );\n\n    return () => {\n      clearInterval(interval);\n      if (!disabledSlotSubscription) {\n        connection.removeSlotChangeListener(slotSubscription);\n      }\n      connection.removeSlotUpdateListener(slotUpdateSubscription);\n    };\n  }, [connection]);\n\n  return (\n    <SlotContext.Provider value={targetSlot}>\n      <SlotMetricsContext.Provider value={slotMetrics}>\n        {children}\n      </SlotMetricsContext.Provider>\n    </SlotContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}