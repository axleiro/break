{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/selected.tsx\";\nimport * as React from \"react\";\nimport { useTransactions } from \"./index\";\nexport const SelectedContext = React.createContext(undefined);\nexport function SelectedTxProvider({\n  children\n}) {\n  const transactions = useTransactions();\n  const [signature, selectSignature] = React.useState(undefined);\n  const [transaction, selectTransaction] = React.useState(undefined);\n  React.useEffect(() => {\n    selectTransaction(transactions.find(tx => tx.details.signature === signature));\n  }, [transactions, signature]);\n  const selectedState = React.useMemo(() => {\n    return [transaction, selectSignature];\n  }, [transaction]);\n  return /*#__PURE__*/React.createElement(SelectedContext.Provider, {\n    value: selectedState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport function useSelectedTransaction() {\n  const state = React.useContext(SelectedContext);\n\n  if (!state) {\n    throw new Error(`useSelectedTx must be used within a TransactionsProvider`);\n  }\n\n  return state[0];\n}\nexport function useSelectTransaction() {\n  const state = React.useContext(SelectedContext);\n\n  if (!state) {\n    throw new Error(`useSelectTx must be used within a TransactionsProvider`);\n  }\n\n  return state[1];\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/selected.tsx"],"names":["React","useTransactions","SelectedContext","createContext","undefined","SelectedTxProvider","children","transactions","signature","selectSignature","useState","transaction","selectTransaction","useEffect","find","tx","details","selectedState","useMemo","useSelectedTransaction","state","useContext","Error","useSelectTransaction"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,eAAT,QAAkD,SAAlD;AAIA,OAAO,MAAMC,eAAe,GAAGF,KAAK,CAACG,aAAN,CAE7BC,SAF6B,CAAxB;AAIP,OAAO,SAASC,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAyD;AAC9D,QAAMC,YAAY,GAAGN,eAAe,EAApC;AACA,QAAM,CAACO,SAAD,EAAYC,eAAZ,IAA+BT,KAAK,CAACU,QAAN,CACnCN,SADmC,CAArC;AAGA,QAAM,CAACO,WAAD,EAAcC,iBAAd,IAAmCZ,KAAK,CAACU,QAAN,CAEvCN,SAFuC,CAAzC;AAIAJ,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAM;AACpBD,IAAAA,iBAAiB,CACfL,YAAY,CAACO,IAAb,CAAmBC,EAAD,IAAQA,EAAE,CAACC,OAAH,CAAWR,SAAX,KAAyBA,SAAnD,CADe,CAAjB;AAGD,GAJD,EAIG,CAACD,YAAD,EAAeC,SAAf,CAJH;AAMA,QAAMS,aAA4B,GAAGjB,KAAK,CAACkB,OAAN,CAAc,MAAM;AACvD,WAAO,CAACP,WAAD,EAAcF,eAAd,CAAP;AACD,GAFoC,EAElC,CAACE,WAAD,CAFkC,CAArC;AAIA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEM,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,QADH,CADF;AAKD;AAED,OAAO,SAASa,sBAAT,GAAkC;AACvC,QAAMC,KAAK,GAAGpB,KAAK,CAACqB,UAAN,CAAiBnB,eAAjB,CAAd;;AACA,MAAI,CAACkB,KAAL,EAAY;AACV,UAAM,IAAIE,KAAJ,CAAW,0DAAX,CAAN;AACD;;AACD,SAAOF,KAAK,CAAC,CAAD,CAAZ;AACD;AAED,OAAO,SAASG,oBAAT,GAAgC;AACrC,QAAMH,KAAK,GAAGpB,KAAK,CAACqB,UAAN,CAAiBnB,eAAjB,CAAd;;AACA,MAAI,CAACkB,KAAL,EAAY;AACV,UAAM,IAAIE,KAAJ,CAAW,wDAAX,CAAN;AACD;;AACD,SAAOF,KAAK,CAAC,CAAD,CAAZ;AACD","sourcesContent":["import * as React from \"react\";\nimport { useTransactions, TransactionState } from \"./index\";\n\ntype SetSelected = React.Dispatch<React.SetStateAction<string | undefined>>;\ntype SelectedState = [TransactionState | undefined, SetSelected];\nexport const SelectedContext = React.createContext<\n  SelectedState | undefined\n>(undefined);\ntype ProviderProps = { children: React.ReactNode };\nexport function SelectedTxProvider({ children }: ProviderProps) {\n  const transactions = useTransactions();\n  const [signature, selectSignature] = React.useState<string | undefined>(\n    undefined\n  );\n  const [transaction, selectTransaction] = React.useState<\n    TransactionState | undefined\n  >(undefined);\n\n  React.useEffect(() => {\n    selectTransaction(\n      transactions.find((tx) => tx.details.signature === signature)\n    );\n  }, [transactions, signature]);\n\n  const selectedState: SelectedState = React.useMemo(() => {\n    return [transaction, selectSignature];\n  }, [transaction]);\n\n  return (\n    <SelectedContext.Provider value={selectedState}>\n      {children}\n    </SelectedContext.Provider>\n  );\n}\n\nexport function useSelectedTransaction() {\n  const state = React.useContext(SelectedContext);\n  if (!state) {\n    throw new Error(`useSelectedTx must be used within a TransactionsProvider`);\n  }\n  return state[0];\n}\n\nexport function useSelectTransaction() {\n  const state = React.useContext(SelectedContext);\n  if (!state) {\n    throw new Error(`useSelectTx must be used within a TransactionsProvider`);\n  }\n  return state[1];\n}\n"]},"metadata":{},"sourceType":"module"}