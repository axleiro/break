{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/slot.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useConnection } from \"./rpc\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SlotContext = /*#__PURE__*/React.createContext(undefined);\nconst SlotMetricsContext = /*#__PURE__*/React.createContext(undefined);\nconst SlotMetricsCounter = /*#__PURE__*/React.createContext(undefined);\nexport function useTargetSlotRef() {\n  _s();\n\n  const slotRef = React.useContext(SlotContext);\n\n  if (!slotRef) {\n    throw new Error(`useTargetSlotRef must be used within a SlotProvider`);\n  }\n\n  return slotRef;\n}\n\n_s(useTargetSlotRef, \"PN7Vj/hJqELMIz6F8CkyosKs+t8=\");\n\nexport function useSlotTiming() {\n  _s2();\n\n  React.useContext(SlotMetricsCounter);\n  const ref = React.useContext(SlotMetricsContext);\n\n  if (!ref) {\n    throw new Error(`useSlotMetricsRef must be used within a SlotProvider`);\n  }\n\n  return ref;\n}\n\n_s2(useSlotTiming, \"/dNZ7M2gGTEBzdfRiP9LrSnjAVo=\");\n\nexport function SlotProvider({\n  children\n}) {\n  _s3();\n\n  const connection = useConnection();\n  const targetSlot = React.useRef();\n  const slotMetrics = React.useRef(new Map());\n  const [metricsCounter, setCounter] = React.useState(0);\n  React.useEffect(() => {\n    if (connection === undefined) return;\n    let disabledSlotSubscription = false;\n    const slotSubscription = connection.onSlotChange(({\n      slot\n    }) => {\n      targetSlot.current = slot;\n    });\n    const interval = setInterval(() => {\n      setCounter(c => c + 1);\n    }, 1000);\n    const slotUpdateSubscription = connection.onSlotUpdate(notification => {\n      // Remove if slot update api is active\n      if (!disabledSlotSubscription) {\n        connection.removeSlotChangeListener(slotSubscription);\n        disabledSlotSubscription = true;\n      }\n\n      const {\n        type,\n        slot,\n        timestamp\n      } = notification;\n\n      if (type === \"firstShredReceived\") {\n        targetSlot.current = Math.max(slot, targetSlot.current || 0);\n        slotMetrics.current.set(slot, {\n          firstShred: timestamp\n        });\n        return;\n      }\n\n      const slotTiming = slotMetrics.current.get(slot);\n\n      if (!slotTiming) {\n        console.log(\"slot missing for notification\", slot, type);\n        return;\n      }\n\n      switch (type) {\n        case \"allShredsReceived\":\n          {\n            slotTiming.fullSlot = timestamp;\n            break;\n          }\n\n        case \"startReplay\":\n          {\n            slotTiming.replayStart = timestamp;\n            break;\n          }\n\n        case \"frozen\":\n          {\n            slotTiming.frozen = timestamp;\n            const entryStats = notification.entry_stats;\n            slotTiming.numEntries = entryStats.numEntries;\n            slotTiming.numTransactions = entryStats.numTransactions;\n            slotTiming.maxTpe = entryStats.maxTxPerEntry;\n            break;\n          }\n\n        case \"voted\":\n          {\n            slotTiming.voted = timestamp;\n            break;\n          }\n\n        case \"optimisticConfirmation\":\n          {\n            slotTiming.confirmed = timestamp;\n            break;\n          }\n\n        case \"root\":\n          {\n            slotTiming.rooted = timestamp;\n            break;\n          }\n      }\n    });\n    return () => {\n      clearInterval(interval);\n\n      if (!disabledSlotSubscription) {\n        connection.removeSlotChangeListener(slotSubscription);\n      }\n\n      connection.removeSlotUpdateListener(slotUpdateSubscription);\n    };\n  }, [connection]);\n  return /*#__PURE__*/_jsxDEV(SlotContext.Provider, {\n    value: targetSlot,\n    children: /*#__PURE__*/_jsxDEV(SlotMetricsContext.Provider, {\n      value: slotMetrics,\n      children: /*#__PURE__*/_jsxDEV(SlotMetricsCounter.Provider, {\n        value: metricsCounter,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(SlotProvider, \"SbI/sG3+gJe6rKMYZmzNU7qEQa4=\", false, function () {\n  return [useConnection];\n});\n\n_c = SlotProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SlotProvider\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/slot.tsx"],"names":["React","useConnection","SlotContext","createContext","undefined","SlotMetricsContext","SlotMetricsCounter","useTargetSlotRef","slotRef","useContext","Error","useSlotTiming","ref","SlotProvider","children","connection","targetSlot","useRef","slotMetrics","Map","metricsCounter","setCounter","useState","useEffect","disabledSlotSubscription","slotSubscription","onSlotChange","slot","current","interval","setInterval","c","slotUpdateSubscription","onSlotUpdate","notification","removeSlotChangeListener","type","timestamp","Math","max","set","firstShred","slotTiming","get","console","log","fullSlot","replayStart","frozen","entryStats","entry_stats","numEntries","numTransactions","maxTpe","maxTxPerEntry","voted","confirmed","rooted","clearInterval","removeSlotUpdateListener"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useConnection } from \"./rpc\";\n\nconst SlotContext = React.createContext<\n  React.MutableRefObject<number | undefined> | undefined\n>(undefined);\n\nconst SlotMetricsContext = React.createContext<\n  React.MutableRefObject<Map<number, SlotTiming>> | undefined\n>(undefined);\n\nconst SlotMetricsCounter = React.createContext<number | undefined>(undefined);\n\nexport type SlotTiming = {\n  firstShred: number;\n  fullSlot?: number;\n  replayStart?: number;\n  frozen?: number;\n  numEntries?: number;\n  numTransactions?: number;\n  maxTpe?: number;\n  voted?: number;\n  confirmed?: number;\n  rooted?: number;\n};\n\nexport function useTargetSlotRef() {\n  const slotRef = React.useContext(SlotContext);\n  if (!slotRef) {\n    throw new Error(`useTargetSlotRef must be used within a SlotProvider`);\n  }\n\n  return slotRef;\n}\n\nexport function useSlotTiming() {\n  React.useContext(SlotMetricsCounter);\n  const ref = React.useContext(SlotMetricsContext);\n  if (!ref) {\n    throw new Error(`useSlotMetricsRef must be used within a SlotProvider`);\n  }\n\n  return ref;\n}\n\ntype ProviderProps = { children: React.ReactNode };\nexport function SlotProvider({ children }: ProviderProps) {\n  const connection = useConnection();\n  const targetSlot = React.useRef<number>();\n  const slotMetrics = React.useRef(new Map<number, SlotTiming>());\n  const [metricsCounter, setCounter] = React.useState(0);\n\n  React.useEffect(() => {\n    if (connection === undefined) return;\n\n    let disabledSlotSubscription = false;\n    const slotSubscription = connection.onSlotChange(({ slot }) => {\n      targetSlot.current = slot;\n    });\n\n    const interval = setInterval(() => {\n      setCounter((c) => c + 1);\n    }, 1000);\n\n    const slotUpdateSubscription = connection.onSlotUpdate((notification) => {\n      // Remove if slot update api is active\n      if (!disabledSlotSubscription) {\n        connection.removeSlotChangeListener(slotSubscription);\n        disabledSlotSubscription = true;\n      }\n\n      const { type, slot, timestamp } = notification;\n      if (type === \"firstShredReceived\") {\n        targetSlot.current = Math.max(slot, targetSlot.current || 0);\n        slotMetrics.current.set(slot, {\n          firstShred: timestamp,\n        });\n        return;\n      }\n\n      const slotTiming = slotMetrics.current.get(slot);\n      if (!slotTiming) {\n        console.log(\"slot missing for notification\", slot, type);\n        return;\n      }\n\n      switch (type) {\n        case \"allShredsReceived\": {\n          slotTiming.fullSlot = timestamp;\n          break;\n        }\n        case \"startReplay\": {\n          slotTiming.replayStart = timestamp;\n          break;\n        }\n        case \"frozen\": {\n          slotTiming.frozen = timestamp;\n          const entryStats = (notification as any).entry_stats;\n          slotTiming.numEntries = entryStats.numEntries;\n          slotTiming.numTransactions = entryStats.numTransactions;\n          slotTiming.maxTpe = entryStats.maxTxPerEntry;\n          break;\n        }\n        case \"voted\": {\n          slotTiming.voted = timestamp;\n          break;\n        }\n        case \"optimisticConfirmation\": {\n          slotTiming.confirmed = timestamp;\n          break;\n        }\n        case \"root\": {\n          slotTiming.rooted = timestamp;\n          break;\n        }\n      }\n    });\n\n    return () => {\n      clearInterval(interval);\n      if (!disabledSlotSubscription) {\n        connection.removeSlotChangeListener(slotSubscription);\n      }\n      connection.removeSlotUpdateListener(slotUpdateSubscription);\n    };\n  }, [connection]);\n\n  return (\n    <SlotContext.Provider value={targetSlot}>\n      <SlotMetricsContext.Provider value={slotMetrics}>\n        <SlotMetricsCounter.Provider value={metricsCounter}>\n          {children}\n        </SlotMetricsCounter.Provider>\n      </SlotMetricsContext.Provider>\n    </SlotContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}