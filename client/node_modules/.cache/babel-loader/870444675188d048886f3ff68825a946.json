{"ast":null,"code":"var _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/index.tsx\";\nimport * as React from \"react\";\nimport { useConfig, useAccounts, useConnection } from \"../api\";\nimport { useBlockhash } from \"../blockhash\";\nimport { ConfirmedHelper } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { createTransaction } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useSocket } from \"../socket\";\nimport { reportError } from \"utils\";\nexport let ActionType;\n\n(function (ActionType) {\n  ActionType[ActionType[\"NewTransaction\"] = 0] = \"NewTransaction\";\n  ActionType[ActionType[\"UpdateIds\"] = 1] = \"UpdateIds\";\n  ActionType[ActionType[\"TimeoutTransaction\"] = 2] = \"TimeoutTransaction\";\n  ActionType[ActionType[\"ResetState\"] = 3] = \"ResetState\";\n  ActionType[ActionType[\"RecordRoot\"] = 4] = \"RecordRoot\";\n})(ActionType || (ActionType = {}));\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ActionType.NewTransaction:\n      {\n        const {\n          details,\n          pendingTransaction\n        } = action;\n        return [...state, {\n          details,\n          status: \"pending\",\n          pending: pendingTransaction\n        }];\n      }\n\n    case ActionType.TimeoutTransaction:\n      {\n        const trackingId = action.trackingId;\n        if (trackingId >= state.length) return state;\n        const timeout = state[trackingId];\n        if (timeout.status !== \"pending\") return state;\n        clearInterval(timeout.pending.retryId);\n        return state.map(tx => {\n          if (tx.details.signature === timeout.details.signature) {\n            return {\n              status: \"timeout\",\n              details: tx.details\n            };\n          } else {\n            return tx;\n          }\n        });\n      }\n\n    case ActionType.UpdateIds:\n      {\n        const {\n          ids,\n          partition,\n          partitionCount\n        } = action.activeIdPartition;\n        return state.map((tx, trackingId) => {\n          if (trackingId % partitionCount !== partition) return tx;\n          const id = Math.floor(trackingId / partitionCount);\n\n          if (tx.status === \"pending\" && ids.has(id)) {\n            const confirmationTime = timeElapsed(tx.pending.sentAt);\n            const retryUntil = new URLSearchParams(window.location.search).get(\"retry_until\");\n            if (retryUntil === \"confirmed\") clearInterval(tx.pending.retryId);\n            return {\n              status: \"success\",\n              details: tx.details,\n              slot: action.slot,\n              confirmationTime,\n              pending: { ...tx.pending\n              }\n            };\n          } else if (tx.status === \"success\" && tx.pending && !ids.has(id)) {\n            return {\n              status: \"pending\",\n              details: tx.details,\n              pending: { ...tx.pending\n              }\n            };\n          }\n\n          return tx;\n        });\n      }\n\n    case ActionType.ResetState:\n      {\n        state.forEach(tx => {\n          if (tx.status === \"pending\") {\n            clearTimeout(tx.pending.timeoutId);\n            clearInterval(tx.pending.retryId);\n          } else if (tx.status === \"success\" && tx.pending) {\n            clearTimeout(tx.pending.timeoutId);\n            clearInterval(tx.pending.retryId);\n          }\n        });\n        return [];\n      }\n\n    case ActionType.RecordRoot:\n      {\n        const foundRooted = state.find(tx => {\n          return tx.status === \"success\" && tx.pending && tx.slot === action.root;\n        });\n        if (!foundRooted) return state;\n        return state.map(tx => {\n          if (tx.status === \"success\" && tx.pending && tx.slot === action.root) {\n            clearInterval(tx.pending.retryId);\n            clearTimeout(tx.pending.timeoutId);\n            return { ...tx,\n              pending: undefined\n            };\n          } else {\n            return tx;\n          }\n        });\n      }\n  }\n}\n\nconst StateContext = React.createContext(undefined);\nconst DispatchContext = React.createContext(undefined);\nexport function TransactionsProvider({\n  children\n}) {\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n  React.useEffect(() => {\n    dispatch({\n      type: ActionType.ResetState\n    });\n    if (connection === undefined) return;\n    const rootSubscription = connection.onRootChange(root => dispatch({\n      type: ActionType.RecordRoot,\n      root\n    }));\n    return () => {\n      connection.removeRootChangeListener(rootSubscription);\n    };\n  }, [connection]);\n  return /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DispatchContext.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SelectedTxProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConfirmedHelper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TpsProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }, children)))));\n}\n\nfunction timeElapsed(sentAt) {\n  const now = performance.now();\n  return parseFloat(((now - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  const dispatch = React.useContext(DispatchContext);\n\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\nexport function useTransactions() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useTransactions must be used within a TransactionsProvider`);\n  }\n\n  return state;\n}\nexport function useConfirmedCount() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useConfirmedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.filter(({\n    status\n  }) => status === \"success\").length;\n}\nexport function useDroppedCount() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useDroppedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.filter(({\n    status\n  }) => status === \"timeout\").length;\n}\nexport function useAvgConfirmationTime() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useAvgConfirmationTime must be used within a TransactionsProvider`);\n  }\n\n  const confirmed = state.reduce((confirmed, tx) => {\n    if (tx.status === \"success\") {\n      confirmed.push(tx.confirmationTime);\n    }\n\n    return confirmed;\n  }, []);\n  const count = confirmed.length;\n  if (count === 0) return 0;\n  const sum = confirmed.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\nexport function useCreatedCount() {\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useCreatedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.length;\n}\nexport function useTps() {\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined) throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\nexport function useCreateTx() {\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef(0);\n  const programDataAccount = accounts === null || accounts === void 0 ? void 0 : accounts.programAccounts[0].toBase58(); // Reset counter when program data accounts are refreshed\n\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n  const blockhash = useBlockhash();\n  const dispatch = useDispatch();\n  const socket = useSocket();\n  return React.useCallback(() => {\n    if (!blockhash || !socket || !config || !accounts) return;\n    const id = idCounter.current;\n\n    if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n      idCounter.current++;\n      createTransaction(blockhash, config.programId, accounts, id, dispatch, socket);\n    } else {\n      reportError(new Error(\"Account capacity exceeded\"), \"failed to create transaction\");\n    }\n  }, [blockhash, socket, config, accounts, dispatch]);\n}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/index.tsx"],"names":["React","useConfig","useAccounts","useConnection","useBlockhash","ConfirmedHelper","TpsProvider","TpsContext","createTransaction","SelectedTxProvider","useSocket","reportError","ActionType","reducer","state","action","type","NewTransaction","details","pendingTransaction","status","pending","TimeoutTransaction","trackingId","length","timeout","clearInterval","retryId","map","tx","signature","UpdateIds","ids","partition","partitionCount","activeIdPartition","id","Math","floor","has","confirmationTime","timeElapsed","sentAt","retryUntil","URLSearchParams","window","location","search","get","slot","ResetState","forEach","clearTimeout","timeoutId","RecordRoot","foundRooted","find","root","undefined","StateContext","createContext","DispatchContext","TransactionsProvider","children","dispatch","useReducer","connection","useEffect","rootSubscription","onRootChange","removeRootChangeListener","now","performance","parseFloat","toFixed","useDispatch","useContext","Error","useTransactions","useConfirmedCount","filter","useDroppedCount","useAvgConfirmationTime","confirmed","reduce","push","count","sum","time","useCreatedCount","useTps","tps","useCreateTx","config","accounts","idCounter","useRef","programDataAccount","programAccounts","toBase58","current","blockhash","socket","useCallback","accountCapacity","programId"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { TransactionSignature, PublicKey, Commitment } from \"@solana/web3.js\";\nimport { useConfig, useAccounts, useConnection } from \"../api\";\nimport { useBlockhash } from \"../blockhash\";\nimport { ConfirmedHelper } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { createTransaction } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useSocket } from \"../socket\";\nimport { reportError } from \"utils\";\n\nexport type PendingTransaction = {\n  sentAt: number;\n  targetSlot: number;\n  retryId?: number;\n  timeoutId?: number;\n};\n\nexport type TransactionDetails = {\n  id: number;\n  feeAccount: PublicKey;\n  programAccount: PublicKey;\n  signature: TransactionSignature;\n};\n\ntype SuccessState = {\n  status: \"success\";\n  details: TransactionDetails;\n  slot: {\n    target: number;\n    landed: number;\n    estimated: number;\n  },\n  confirmationTime: {\n    recent?: number;\n    single?: number;\n    singleGossip?: number;\n  },\n  pending?: PendingTransaction;\n};\n\ntype TimeoutState = {\n  status: \"timeout\";\n  details: TransactionDetails;\n};\n\ntype PendingState = {\n  status: \"pending\";\n  pending: PendingTransaction;\n  details: TransactionDetails;\n};\n\nexport type TransactionStatus = \"success\" | \"timeout\" | \"pending\";\n\nexport type TransactionState = SuccessState | TimeoutState | PendingState;\n\nexport enum ActionType {\n  NewTransaction,\n  UpdateIds,\n  TimeoutTransaction,\n  ResetState,\n  RecordRoot,\n}\n\ntype UpdateIds = {\n  type: ActionType.UpdateIds;\n  activeIdPartition: {\n    ids: Set<number>;\n    partition: number;\n    partitionCount: number;\n  };\n  commitment: Commitment;\n  estimatedSlot: number;\n};\n\ntype NewTransaction = {\n  type: ActionType.NewTransaction;\n  trackingId: number;\n  details: TransactionDetails;\n  pendingTransaction: PendingTransaction;\n};\n\ntype TimeoutTransaction = {\n  type: ActionType.TimeoutTransaction;\n  trackingId: number;\n};\n\ntype ResetState = {\n  type: ActionType.ResetState;\n};\n\ntype RecordRoot = {\n  type: ActionType.RecordRoot;\n  root: number;\n};\n\ntype Action =\n  | NewTransaction\n  | UpdateIds\n  | TimeoutTransaction\n  | ResetState\n  | RecordRoot;\n\ntype State = TransactionState[];\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case ActionType.NewTransaction: {\n      const { details, pendingTransaction } = action;\n      return [\n        ...state,\n        {\n          details,\n          status: \"pending\",\n          pending: pendingTransaction,\n        },\n      ];\n    }\n\n    case ActionType.TimeoutTransaction: {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const timeout = state[trackingId];\n      if (timeout.status !== \"pending\") return state;\n      clearInterval(timeout.pending.retryId);\n\n      return state.map((tx) => {\n        if (tx.details.signature === timeout.details.signature) {\n          return {\n            status: \"timeout\",\n            details: tx.details,\n          };\n        } else {\n          return tx;\n        }\n      });\n    }\n\n    case ActionType.UpdateIds: {\n      const { ids, partition, partitionCount } = action.activeIdPartition;\n      return state.map((tx, trackingId) => {\n        if (trackingId % partitionCount !== partition) return tx;\n        const id = Math.floor(trackingId / partitionCount);\n        if (tx.status === \"pending\" && ids.has(id)) {\n          const confirmationTime = timeElapsed(tx.pending.sentAt);\n          const retryUntil = new URLSearchParams(window.location.search).get(\n            \"retry_until\"\n          );\n          if (retryUntil === \"confirmed\") clearInterval(tx.pending.retryId);\n          return {\n            status: \"success\",\n            details: tx.details,\n            slot: action.slot,\n            confirmationTime,\n            pending: { ...tx.pending },\n          };\n        } else if (tx.status === \"success\" && tx.pending && !ids.has(id)) {\n          return {\n            status: \"pending\",\n            details: tx.details,\n            pending: { ...tx.pending },\n          };\n        }\n        return tx;\n      });\n    }\n\n    case ActionType.ResetState: {\n      state.forEach((tx) => {\n        if (tx.status === \"pending\") {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        } else if (tx.status === \"success\" && tx.pending) {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        }\n      });\n      return [];\n    }\n\n    case ActionType.RecordRoot: {\n      const foundRooted = state.find((tx) => {\n        return tx.status === \"success\" && tx.pending && tx.slot === action.root;\n      });\n      if (!foundRooted) return state;\n\n      return state.map((tx) => {\n        if (tx.status === \"success\" && tx.pending && tx.slot === action.root) {\n          clearInterval(tx.pending.retryId);\n          clearTimeout(tx.pending.timeoutId);\n          return {\n            ...tx,\n            pending: undefined,\n          };\n        } else {\n          return tx;\n        }\n      });\n    }\n  }\n}\n\nexport type Dispatch = (action: Action) => void;\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function TransactionsProvider({ children }: ProviderProps) {\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n\n  React.useEffect(() => {\n    dispatch({\n      type: ActionType.ResetState,\n    });\n\n    if (connection === undefined) return;\n    const rootSubscription = connection.onRootChange((root: number) =>\n      dispatch({ type: ActionType.RecordRoot, root })\n    );\n\n    return () => {\n      connection.removeRootChangeListener(rootSubscription);\n    };\n  }, [connection]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <SelectedTxProvider>\n          <ConfirmedHelper>\n            <TpsProvider>{children}</TpsProvider>\n          </ConfirmedHelper>\n        </SelectedTxProvider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nfunction timeElapsed(sentAt: number): number {\n  const now = performance.now();\n  return parseFloat(((now - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\n\nexport function useTransactions() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useTransactions must be used within a TransactionsProvider`\n    );\n  }\n\n  return state;\n}\n\nexport function useConfirmedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useConfirmedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"success\").length;\n}\n\nexport function useDroppedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useDroppedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"timeout\").length;\n}\n\nexport function useAvgConfirmationTime() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useAvgConfirmationTime must be used within a TransactionsProvider`\n    );\n  }\n\n  const confirmed = state.reduce((confirmed: number[], tx) => {\n    if (tx.status === \"success\") {\n      confirmed.push(tx.confirmationTime);\n    }\n    return confirmed;\n  }, []);\n\n  const count = confirmed.length;\n  if (count === 0) return 0;\n  const sum = confirmed.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\n\nexport function useCreatedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useCreatedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.length;\n}\n\nexport function useTps() {\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined)\n    throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\n\nexport function useCreateTx() {\n  const config = useConfig();\n  const accounts = useAccounts();\n  const idCounter = React.useRef<number>(0);\n  const programDataAccount = accounts?.programAccounts[0].toBase58();\n\n  // Reset counter when program data accounts are refreshed\n  React.useEffect(() => {\n    idCounter.current = 0;\n  }, [programDataAccount]);\n\n  const blockhash = useBlockhash();\n  const dispatch = useDispatch();\n  const socket = useSocket();\n  return React.useCallback(() => {\n    if (!blockhash || !socket || !config || !accounts) return;\n    const id = idCounter.current;\n    if (id < accounts.accountCapacity * accounts.programAccounts.length) {\n      idCounter.current++;\n      createTransaction(\n        blockhash,\n        config.programId,\n        accounts,\n        id,\n        dispatch,\n        socket\n      );\n    } else {\n      reportError(\n        new Error(\"Account capacity exceeded\"),\n        \"failed to create transaction\"\n      );\n    }\n  }, [blockhash, socket, config, accounts, dispatch]);\n}\n"]},"metadata":{},"sourceType":"module"}