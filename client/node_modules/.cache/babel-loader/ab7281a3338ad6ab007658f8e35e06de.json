{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useThrottle } from \"@react-hook/throttle\";\nimport { ConfirmedHelper, DEBUG_MODE } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { CreateTxContext, CreateTxProvider } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useConnection } from \"providers/rpc\";\nexport const COMMITMENT_PARAM = (() => {\n  const commitment = new URLSearchParams(window.location.search).get(\"commitment\");\n\n  switch (commitment) {\n    case \"recent\":\n    case \"single\":\n      {\n        return commitment;\n      }\n\n    default:\n      {\n        return \"singleGossip\";\n      }\n  }\n})();\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"new\":\n      {\n        const {\n          details,\n          pendingTransaction\n        } = action;\n        return [...state, {\n          details,\n          status: \"pending\",\n          received: [],\n          pending: pendingTransaction\n        }];\n      }\n\n    case \"signature\":\n      {\n        const trackingId = action.trackingId;\n        if (trackingId >= state.length) return state;\n        const transaction = state[trackingId];\n        return state.map(tx => {\n          if (tx.details.signature === transaction.details.signature) {\n            if (tx.status === \"pending\") {\n              return {\n                status: \"success\",\n                details: tx.details,\n                received: tx.received,\n                slot: {\n                  target: tx.pending.targetSlot,\n                  estimated: action.estimatedSlot\n                },\n                timing: {\n                  sentAt: tx.pending.sentAt,\n                  gossipSignature: timeElapsed(tx.pending.sentAt, action.receivedAt)\n                },\n                pending: tx.pending\n              };\n            } else if (tx.status === \"success\") {\n              return { ...tx,\n                timing: { ...tx.timing,\n                  gossipSignature: timeElapsed(tx.timing.sentAt, action.receivedAt)\n                }\n              };\n            }\n          }\n\n          return tx;\n        });\n      }\n\n    case \"timeout\":\n      {\n        const trackingId = action.trackingId;\n        if (trackingId >= state.length) return state;\n        const timeout = state[trackingId];\n        if (timeout.status !== \"pending\") return state;\n        clearInterval(timeout.pending.retryId);\n        return state.map(tx => {\n          if (tx.details.signature === timeout.details.signature) {\n            return {\n              status: \"timeout\",\n              details: tx.details\n            };\n          } else {\n            return tx;\n          }\n        });\n      }\n\n    case \"update\":\n      {\n        const {\n          ids,\n          partition,\n          partitionCount\n        } = action.activeIdPartition;\n        return state.map((tx, trackingId) => {\n          if (trackingId % partitionCount !== partition) return tx;\n          const id = Math.floor(trackingId / partitionCount);\n\n          if (tx.status === \"pending\" && ids.has(id)) {\n            let receivedAt; // Optimistically confirmed, no need to continue retry\n\n            if (action.commitment === \"singleGossip\" || action.commitment === \"single\") {\n              const record = tx.pending.received.find(record => record.slot === action.estimatedSlot);\n\n              if (record) {\n                receivedAt = record.receivedAt;\n              }\n\n              clearInterval(tx.pending.retryId);\n              clearTimeout(tx.pending.timeoutId);\n            }\n\n            return {\n              status: \"success\",\n              details: tx.details,\n              slot: {\n                target: tx.pending.targetSlot,\n                estimated: action.estimatedSlot\n              },\n              timing: {\n                sentAt: tx.pending.sentAt,\n                receivedAt,\n                [action.commitment]: timeElapsed(tx.pending.sentAt, action.receivedAt)\n              },\n              pending: tx.pending\n            };\n          } else if (tx.status === \"success\") {\n            if (ids.has(id)) {\n              // Already recorded conf time\n              if (tx.timing[action.commitment] !== undefined) {\n                return tx;\n              } // Optimistically confirmed, no need to continue retry\n\n\n              if (tx.pending && (action.commitment === \"singleGossip\" || action.commitment === \"single\")) {\n                clearInterval(tx.pending.retryId);\n                clearTimeout(tx.pending.timeoutId);\n              }\n\n              return { ...tx,\n                timing: { ...tx.timing,\n                  [action.commitment]: timeElapsed(tx.timing.sentAt, action.receivedAt)\n                }\n              };\n            } else if (action.commitment === \"recent\" && tx.pending && !ids.has(id)) {\n              // Don't revert to pending state if we already received timing info for other commitments\n              if (tx.timing[\"single\"] !== undefined || tx.timing[\"singleGossip\"] !== undefined) {\n                return { ...tx,\n                  timing: { ...tx.timing,\n                    recent: undefined\n                  }\n                };\n              } // Revert to pending state because the previous notification likely came from a fork\n\n\n              return {\n                status: \"pending\",\n                details: tx.details,\n                pending: { ...tx.pending\n                }\n              };\n            }\n          }\n\n          return tx;\n        });\n      }\n\n    case \"reset\":\n      {\n        state.forEach(tx => {\n          if (tx.status === \"pending\") {\n            clearTimeout(tx.pending.timeoutId);\n            clearInterval(tx.pending.retryId);\n          } else if (tx.status === \"success\" && tx.pending) {\n            clearTimeout(tx.pending.timeoutId);\n            clearInterval(tx.pending.retryId);\n          }\n        });\n        return [];\n      }\n\n    case \"root\":\n      {\n        const foundRooted = state.find(tx => {\n          if (tx.status === \"success\" && tx.pending) {\n            const landedSlot = !DEBUG_MODE ? tx.slot.estimated : tx.slot.landed;\n            return landedSlot === action.root;\n          } else {\n            return false;\n          }\n        }); // Avoid re-allocating state map\n\n        if (!foundRooted) return state;\n        return state.map(tx => {\n          if (tx.status === \"success\" && tx.pending) {\n            const landedSlot = !DEBUG_MODE ? tx.slot.estimated : tx.slot.landed;\n\n            if (landedSlot === action.root) {\n              clearInterval(tx.pending.retryId);\n              clearTimeout(tx.pending.timeoutId);\n              return { ...tx,\n                pending: undefined\n              };\n            }\n          }\n\n          return tx;\n        });\n      }\n\n    case \"landed\":\n      {\n        return state.map(tx => {\n          if (tx.status === \"success\") {\n            const index = action.signatures.findIndex(val => val === tx.details.signature);\n\n            if (index >= 0) {\n              return { ...tx,\n                slot: { ...tx.slot,\n                  landed: action.slots[index]\n                }\n              };\n            }\n          }\n\n          return tx;\n        });\n      }\n  }\n}\n\nconst SlotContext = /*#__PURE__*/React.createContext(undefined);\nconst StateContext = /*#__PURE__*/React.createContext(undefined);\nconst DispatchContext = /*#__PURE__*/React.createContext(undefined);\nexport function TransactionsProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n  const targetSlot = React.useRef();\n  const stateRef = React.useRef(state);\n  React.useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n  React.useEffect(() => {\n    dispatch({\n      type: \"reset\"\n    });\n    if (connection === undefined) return;\n    const slotSubscription = connection.onSlotChange(({\n      slot\n    }) => {\n      targetSlot.current = slot;\n    });\n    const rootSubscription = connection.onRootChange(root => {\n      dispatch({\n        type: \"root\",\n        root\n      });\n    }); // Poll for signature statuses to determine which slot a tx landed in\n\n    const intervalId = DEBUG_MODE ? setInterval(async () => {\n      const fetchStatuses = [];\n      stateRef.current.forEach(tx => {\n        if (tx.status === \"success\" && tx.slot.landed === undefined) {\n          fetchStatuses.push(tx.details.signature);\n        }\n      });\n      if (fetchStatuses.length === 0) return;\n      const slots = [];\n      const signatures = [];\n      const statuses = (await connection.getSignatureStatuses(fetchStatuses)).value;\n\n      for (var i = 0; i < statuses.length; i++) {\n        const status = statuses[i];\n\n        if (status !== null) {\n          slots.push(status.slot);\n          signatures.push(fetchStatuses[i]);\n        }\n      }\n\n      if (slots.length === 0) return;\n      dispatch({\n        type: \"landed\",\n        slots,\n        signatures\n      });\n    }, 2000) : undefined;\n    return () => {\n      connection.removeSlotChangeListener(slotSubscription);\n      connection.removeRootChangeListener(rootSubscription);\n      intervalId !== undefined && clearInterval(intervalId);\n    };\n  }, [connection]);\n  const [throttledState, setThrottledState] = useThrottle(state, 10);\n  React.useEffect(() => {\n    setThrottledState(state);\n  }, [state, setThrottledState]);\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: throttledState,\n    children: /*#__PURE__*/_jsxDEV(DispatchContext.Provider, {\n      value: dispatch,\n      children: /*#__PURE__*/_jsxDEV(SlotContext.Provider, {\n        value: targetSlot,\n        children: /*#__PURE__*/_jsxDEV(SelectedTxProvider, {\n          children: /*#__PURE__*/_jsxDEV(CreateTxProvider, {\n            children: /*#__PURE__*/_jsxDEV(ConfirmedHelper, {\n              children: /*#__PURE__*/_jsxDEV(TpsProvider, {\n                children: children\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TransactionsProvider, \"XAkcLCQctDYMrZ3UqND0sB3Tio0=\", false, function () {\n  return [useConnection, useThrottle];\n});\n\n_c = TransactionsProvider;\n\nfunction timeElapsed(sentAt, receivedAt = performance.now()) {\n  return parseFloat(((receivedAt - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  _s2();\n\n  const dispatch = React.useContext(DispatchContext);\n\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\n\n_s2(useDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nexport function useTargetSlotRef() {\n  _s3();\n\n  const dispatch = React.useContext(SlotContext);\n\n  if (!dispatch) {\n    throw new Error(`useTargetSlotRef must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\n\n_s3(useTargetSlotRef, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nexport function useTransactions() {\n  _s4();\n\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useTransactions must be used within a TransactionsProvider`);\n  }\n\n  return state;\n}\n\n_s4(useTransactions, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useConfirmedCount() {\n  _s5();\n\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useConfirmedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.filter(({\n    status\n  }) => status === \"success\").length;\n}\n\n_s5(useConfirmedCount, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useDroppedCount() {\n  _s6();\n\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useDroppedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.filter(({\n    status\n  }) => status === \"timeout\").length;\n}\n\n_s6(useDroppedCount, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useAvgConfirmationTime() {\n  _s7();\n\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useAvgConfirmationTime must be used within a TransactionsProvider`);\n  }\n\n  const confirmed = state.reduce((confirmed, tx) => {\n    if (tx.status === \"success\") {\n      const confTime = tx.timing[COMMITMENT_PARAM];\n      if (confTime !== undefined) confirmed.push(confTime);\n    }\n\n    return confirmed;\n  }, []);\n  const count = confirmed.length;\n  if (count === 0) return 0;\n  const sum = confirmed.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\n\n_s7(useAvgConfirmationTime, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useCreatedCount() {\n  _s8();\n\n  const state = React.useContext(StateContext);\n\n  if (!state) {\n    throw new Error(`useCreatedCount must be used within a TransactionsProvider`);\n  }\n\n  return state.length;\n}\n\n_s8(useCreatedCount, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useTps() {\n  _s9();\n\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined) throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\n\n_s9(useTps, \"um4YmFADYRtDWh7h95z2iPyy8yY=\");\n\nexport function useCreateTxRef() {\n  _s10();\n\n  const createTxRef = React.useContext(CreateTxContext);\n  if (createTxRef === undefined) throw new Error(`useCreateTxRef must be used within a TransactionsProvider`);\n  return createTxRef;\n}\n\n_s10(useCreateTxRef, \"Rf9hHOrtp3nEo8/2nyrvk4Uhlv8=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/transactions/index.tsx"],"names":["React","useThrottle","ConfirmedHelper","DEBUG_MODE","TpsProvider","TpsContext","CreateTxContext","CreateTxProvider","SelectedTxProvider","useConnection","COMMITMENT_PARAM","commitment","URLSearchParams","window","location","search","get","reducer","state","action","type","details","pendingTransaction","status","received","pending","trackingId","length","transaction","map","tx","signature","slot","target","targetSlot","estimated","estimatedSlot","timing","sentAt","gossipSignature","timeElapsed","receivedAt","timeout","clearInterval","retryId","ids","partition","partitionCount","activeIdPartition","id","Math","floor","has","record","find","clearTimeout","timeoutId","undefined","recent","forEach","foundRooted","landedSlot","landed","root","index","signatures","findIndex","val","slots","SlotContext","createContext","StateContext","DispatchContext","TransactionsProvider","children","dispatch","useReducer","connection","useRef","stateRef","useEffect","current","slotSubscription","onSlotChange","rootSubscription","onRootChange","intervalId","setInterval","fetchStatuses","push","statuses","getSignatureStatuses","value","i","removeSlotChangeListener","removeRootChangeListener","throttledState","setThrottledState","performance","now","parseFloat","toFixed","useDispatch","useContext","Error","useTargetSlotRef","useTransactions","useConfirmedCount","filter","useDroppedCount","useAvgConfirmationTime","confirmed","reduce","confTime","count","sum","time","useCreatedCount","useTps","tps","useCreateTxRef","createTxRef"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,aAA5C;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,UAAlD;AACA,SAASC,kBAAT,QAAmC,YAAnC;AACA,SAASC,aAAT,QAA8B,eAA9B;AA4CA,OAAO,MAAMC,gBAAgB,GAAG,CAAC,MAAyB;AACxD,QAAMC,UAAU,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,EAA4CC,GAA5C,CACjB,YADiB,CAAnB;;AAGA,UAAQL,UAAR;AACE,SAAK,QAAL;AACA,SAAK,QAAL;AAAe;AACb,eAAOA,UAAP;AACD;;AACD;AAAS;AACP,eAAO,cAAP;AACD;AAPH;AASD,CAb+B,GAAzB;;AAyGP,SAASM,OAAT,CAAiBC,KAAjB,EAA+BC,MAA/B,EAAsD;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AAAY;AACV,cAAM;AAAEC,UAAAA,OAAF;AAAWC,UAAAA;AAAX,YAAkCH,MAAxC;AACA,eAAO,CACL,GAAGD,KADE,EAEL;AACEG,UAAAA,OADF;AAEEE,UAAAA,MAAM,EAAE,SAFV;AAGEC,UAAAA,QAAQ,EAAE,EAHZ;AAIEC,UAAAA,OAAO,EAAEH;AAJX,SAFK,CAAP;AASD;;AAED,SAAK,WAAL;AAAkB;AAChB,cAAMI,UAAU,GAAGP,MAAM,CAACO,UAA1B;AACA,YAAIA,UAAU,IAAIR,KAAK,CAACS,MAAxB,EAAgC,OAAOT,KAAP;AAChC,cAAMU,WAAW,GAAGV,KAAK,CAACQ,UAAD,CAAzB;AAEA,eAAOR,KAAK,CAACW,GAAN,CAAWC,EAAD,IAAQ;AACvB,cAAIA,EAAE,CAACT,OAAH,CAAWU,SAAX,KAAyBH,WAAW,CAACP,OAAZ,CAAoBU,SAAjD,EAA4D;AAC1D,gBAAID,EAAE,CAACP,MAAH,KAAc,SAAlB,EAA6B;AAC3B,qBAAO;AACLA,gBAAAA,MAAM,EAAE,SADH;AAELF,gBAAAA,OAAO,EAAES,EAAE,CAACT,OAFP;AAGLG,gBAAAA,QAAQ,EAAEM,EAAE,CAACN,QAHR;AAILQ,gBAAAA,IAAI,EAAE;AACJC,kBAAAA,MAAM,EAAEH,EAAE,CAACL,OAAH,CAAWS,UADf;AAEJC,kBAAAA,SAAS,EAAEhB,MAAM,CAACiB;AAFd,iBAJD;AAQLC,gBAAAA,MAAM,EAAE;AACNC,kBAAAA,MAAM,EAAER,EAAE,CAACL,OAAH,CAAWa,MADb;AAENC,kBAAAA,eAAe,EAAEC,WAAW,CAC1BV,EAAE,CAACL,OAAH,CAAWa,MADe,EAE1BnB,MAAM,CAACsB,UAFmB;AAFtB,iBARH;AAeLhB,gBAAAA,OAAO,EAAEK,EAAE,CAACL;AAfP,eAAP;AAkBD,aAnBD,MAmBO,IAAIK,EAAE,CAACP,MAAH,KAAc,SAAlB,EAA6B;AAClC,qBAAO,EACL,GAAGO,EADE;AAELO,gBAAAA,MAAM,EAAE,EACN,GAAGP,EAAE,CAACO,MADA;AAENE,kBAAAA,eAAe,EAAEC,WAAW,CAC1BV,EAAE,CAACO,MAAH,CAAUC,MADgB,EAE1BnB,MAAM,CAACsB,UAFmB;AAFtB;AAFH,eAAP;AAUD;AACF;;AACD,iBAAOX,EAAP;AACD,SAnCM,CAAP;AAoCD;;AAED,SAAK,SAAL;AAAgB;AACd,cAAMJ,UAAU,GAAGP,MAAM,CAACO,UAA1B;AACA,YAAIA,UAAU,IAAIR,KAAK,CAACS,MAAxB,EAAgC,OAAOT,KAAP;AAChC,cAAMwB,OAAO,GAAGxB,KAAK,CAACQ,UAAD,CAArB;AACA,YAAIgB,OAAO,CAACnB,MAAR,KAAmB,SAAvB,EAAkC,OAAOL,KAAP;AAClCyB,QAAAA,aAAa,CAACD,OAAO,CAACjB,OAAR,CAAgBmB,OAAjB,CAAb;AAEA,eAAO1B,KAAK,CAACW,GAAN,CAAWC,EAAD,IAAQ;AACvB,cAAIA,EAAE,CAACT,OAAH,CAAWU,SAAX,KAAyBW,OAAO,CAACrB,OAAR,CAAgBU,SAA7C,EAAwD;AACtD,mBAAO;AACLR,cAAAA,MAAM,EAAE,SADH;AAELF,cAAAA,OAAO,EAAES,EAAE,CAACT;AAFP,aAAP;AAID,WALD,MAKO;AACL,mBAAOS,EAAP;AACD;AACF,SATM,CAAP;AAUD;;AAED,SAAK,QAAL;AAAe;AACb,cAAM;AAAEe,UAAAA,GAAF;AAAOC,UAAAA,SAAP;AAAkBC,UAAAA;AAAlB,YAAqC5B,MAAM,CAAC6B,iBAAlD;AACA,eAAO9B,KAAK,CAACW,GAAN,CAAU,CAACC,EAAD,EAAKJ,UAAL,KAAoB;AACnC,cAAIA,UAAU,GAAGqB,cAAb,KAAgCD,SAApC,EAA+C,OAAOhB,EAAP;AAC/C,gBAAMmB,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWzB,UAAU,GAAGqB,cAAxB,CAAX;;AACA,cAAIjB,EAAE,CAACP,MAAH,KAAc,SAAd,IAA2BsB,GAAG,CAACO,GAAJ,CAAQH,EAAR,CAA/B,EAA4C;AAC1C,gBAAIR,UAAJ,CAD0C,CAG1C;;AACA,gBACEtB,MAAM,CAACR,UAAP,KAAsB,cAAtB,IACAQ,MAAM,CAACR,UAAP,KAAsB,QAFxB,EAGE;AACA,oBAAM0C,MAAM,GAAGvB,EAAE,CAACL,OAAH,CAAWD,QAAX,CAAoB8B,IAApB,CAAyBD,MAAM,IAAIA,MAAM,CAACrB,IAAP,KAAgBb,MAAM,CAACiB,aAA1D,CAAf;;AACA,kBAAIiB,MAAJ,EAAY;AACVZ,gBAAAA,UAAU,GAAGY,MAAM,CAACZ,UAApB;AACD;;AACDE,cAAAA,aAAa,CAACb,EAAE,CAACL,OAAH,CAAWmB,OAAZ,CAAb;AACAW,cAAAA,YAAY,CAACzB,EAAE,CAACL,OAAH,CAAW+B,SAAZ,CAAZ;AACD;;AAED,mBAAO;AACLjC,cAAAA,MAAM,EAAE,SADH;AAELF,cAAAA,OAAO,EAAES,EAAE,CAACT,OAFP;AAGLW,cAAAA,IAAI,EAAE;AACJC,gBAAAA,MAAM,EAAEH,EAAE,CAACL,OAAH,CAAWS,UADf;AAEJC,gBAAAA,SAAS,EAAEhB,MAAM,CAACiB;AAFd,eAHD;AAOLC,cAAAA,MAAM,EAAE;AACNC,gBAAAA,MAAM,EAAER,EAAE,CAACL,OAAH,CAAWa,MADb;AAENG,gBAAAA,UAFM;AAGN,iBAACtB,MAAM,CAACR,UAAR,GAAqB6B,WAAW,CAC9BV,EAAE,CAACL,OAAH,CAAWa,MADmB,EAE9BnB,MAAM,CAACsB,UAFuB;AAH1B,eAPH;AAeLhB,cAAAA,OAAO,EAAEK,EAAE,CAACL;AAfP,aAAP;AAiBD,WAjCD,MAiCO,IAAIK,EAAE,CAACP,MAAH,KAAc,SAAlB,EAA6B;AAClC,gBAAIsB,GAAG,CAACO,GAAJ,CAAQH,EAAR,CAAJ,EAAiB;AACf;AACA,kBAAInB,EAAE,CAACO,MAAH,CAAUlB,MAAM,CAACR,UAAjB,MAAiC8C,SAArC,EAAgD;AAC9C,uBAAO3B,EAAP;AACD,eAJc,CAMf;;;AACA,kBACEA,EAAE,CAACL,OAAH,KACCN,MAAM,CAACR,UAAP,KAAsB,cAAtB,IACCQ,MAAM,CAACR,UAAP,KAAsB,QAFxB,CADF,EAIE;AACAgC,gBAAAA,aAAa,CAACb,EAAE,CAACL,OAAH,CAAWmB,OAAZ,CAAb;AACAW,gBAAAA,YAAY,CAACzB,EAAE,CAACL,OAAH,CAAW+B,SAAZ,CAAZ;AACD;;AAED,qBAAO,EACL,GAAG1B,EADE;AAELO,gBAAAA,MAAM,EAAE,EACN,GAAGP,EAAE,CAACO,MADA;AAEN,mBAAClB,MAAM,CAACR,UAAR,GAAqB6B,WAAW,CAC9BV,EAAE,CAACO,MAAH,CAAUC,MADoB,EAE9BnB,MAAM,CAACsB,UAFuB;AAF1B;AAFH,eAAP;AAUD,aA1BD,MA0BO,IACLtB,MAAM,CAACR,UAAP,KAAsB,QAAtB,IACAmB,EAAE,CAACL,OADH,IAEA,CAACoB,GAAG,CAACO,GAAJ,CAAQH,EAAR,CAHI,EAIL;AACA;AACA,kBACEnB,EAAE,CAACO,MAAH,CAAU,QAAV,MAAwBoB,SAAxB,IACA3B,EAAE,CAACO,MAAH,CAAU,cAAV,MAA8BoB,SAFhC,EAGE;AACA,uBAAO,EACL,GAAG3B,EADE;AAELO,kBAAAA,MAAM,EAAE,EACN,GAAGP,EAAE,CAACO,MADA;AAENqB,oBAAAA,MAAM,EAAED;AAFF;AAFH,iBAAP;AAOD,eAbD,CAeA;;;AACA,qBAAO;AACLlC,gBAAAA,MAAM,EAAE,SADH;AAELF,gBAAAA,OAAO,EAAES,EAAE,CAACT,OAFP;AAGLI,gBAAAA,OAAO,EAAE,EAAE,GAAGK,EAAE,CAACL;AAAR;AAHJ,eAAP;AAKD;AACF;;AACD,iBAAOK,EAAP;AACD,SA3FM,CAAP;AA4FD;;AAED,SAAK,OAAL;AAAc;AACZZ,QAAAA,KAAK,CAACyC,OAAN,CAAe7B,EAAD,IAAQ;AACpB,cAAIA,EAAE,CAACP,MAAH,KAAc,SAAlB,EAA6B;AAC3BgC,YAAAA,YAAY,CAACzB,EAAE,CAACL,OAAH,CAAW+B,SAAZ,CAAZ;AACAb,YAAAA,aAAa,CAACb,EAAE,CAACL,OAAH,CAAWmB,OAAZ,CAAb;AACD,WAHD,MAGO,IAAId,EAAE,CAACP,MAAH,KAAc,SAAd,IAA2BO,EAAE,CAACL,OAAlC,EAA2C;AAChD8B,YAAAA,YAAY,CAACzB,EAAE,CAACL,OAAH,CAAW+B,SAAZ,CAAZ;AACAb,YAAAA,aAAa,CAACb,EAAE,CAACL,OAAH,CAAWmB,OAAZ,CAAb;AACD;AACF,SARD;AASA,eAAO,EAAP;AACD;;AAED,SAAK,MAAL;AAAa;AACX,cAAMgB,WAAW,GAAG1C,KAAK,CAACoC,IAAN,CAAYxB,EAAD,IAAQ;AACrC,cAAIA,EAAE,CAACP,MAAH,KAAc,SAAd,IAA2BO,EAAE,CAACL,OAAlC,EAA2C;AACzC,kBAAMoC,UAAU,GAAG,CAAC1D,UAAD,GAAc2B,EAAE,CAACE,IAAH,CAAQG,SAAtB,GAAkCL,EAAE,CAACE,IAAH,CAAQ8B,MAA7D;AACA,mBAAOD,UAAU,KAAK1C,MAAM,CAAC4C,IAA7B;AACD,WAHD,MAGO;AACL,mBAAO,KAAP;AACD;AACF,SAPmB,CAApB,CADW,CAUX;;AACA,YAAI,CAACH,WAAL,EAAkB,OAAO1C,KAAP;AAElB,eAAOA,KAAK,CAACW,GAAN,CAAWC,EAAD,IAAQ;AACvB,cAAIA,EAAE,CAACP,MAAH,KAAc,SAAd,IAA2BO,EAAE,CAACL,OAAlC,EAA2C;AACzC,kBAAMoC,UAAU,GAAG,CAAC1D,UAAD,GAAc2B,EAAE,CAACE,IAAH,CAAQG,SAAtB,GAAkCL,EAAE,CAACE,IAAH,CAAQ8B,MAA7D;;AACA,gBAAID,UAAU,KAAK1C,MAAM,CAAC4C,IAA1B,EAAgC;AAC9BpB,cAAAA,aAAa,CAACb,EAAE,CAACL,OAAH,CAAWmB,OAAZ,CAAb;AACAW,cAAAA,YAAY,CAACzB,EAAE,CAACL,OAAH,CAAW+B,SAAZ,CAAZ;AACA,qBAAO,EACL,GAAG1B,EADE;AAELL,gBAAAA,OAAO,EAAEgC;AAFJ,eAAP;AAID;AACF;;AACD,iBAAO3B,EAAP;AACD,SAbM,CAAP;AAcD;;AAED,SAAK,QAAL;AAAe;AACb,eAAOZ,KAAK,CAACW,GAAN,CAAWC,EAAD,IAAQ;AACvB,cAAIA,EAAE,CAACP,MAAH,KAAc,SAAlB,EAA6B;AAC3B,kBAAMyC,KAAK,GAAG7C,MAAM,CAAC8C,UAAP,CAAkBC,SAAlB,CACXC,GAAD,IAASA,GAAG,KAAKrC,EAAE,CAACT,OAAH,CAAWU,SADhB,CAAd;;AAGA,gBAAIiC,KAAK,IAAI,CAAb,EAAgB;AACd,qBAAO,EACL,GAAGlC,EADE;AAELE,gBAAAA,IAAI,EAAE,EACJ,GAAGF,EAAE,CAACE,IADF;AAEJ8B,kBAAAA,MAAM,EAAE3C,MAAM,CAACiD,KAAP,CAAaJ,KAAb;AAFJ;AAFD,eAAP;AAOD;AACF;;AACD,iBAAOlC,EAAP;AACD,SAhBM,CAAP;AAiBD;AAxOH;AA0OD;;AAGD,MAAMuC,WAAW,gBAAGrE,KAAK,CAACsE,aAAN,CAElBb,SAFkB,CAApB;AAGA,MAAMc,YAAY,gBAAGvE,KAAK,CAACsE,aAAN,CAAuCb,SAAvC,CAArB;AACA,MAAMe,eAAe,gBAAGxE,KAAK,CAACsE,aAAN,CAA0Cb,SAA1C,CAAxB;AAGA,OAAO,SAASgB,oBAAT,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA2D;AAAA;;AAChE,QAAM,CAACxD,KAAD,EAAQyD,QAAR,IAAoB3E,KAAK,CAAC4E,UAAN,CAAiB3D,OAAjB,EAA0B,EAA1B,CAA1B;AACA,QAAM4D,UAAU,GAAGpE,aAAa,EAAhC;AACA,QAAMyB,UAAU,GAAGlC,KAAK,CAAC8E,MAAN,EAAnB;AACA,QAAMC,QAAQ,GAAG/E,KAAK,CAAC8E,MAAN,CAAa5D,KAAb,CAAjB;AAEAlB,EAAAA,KAAK,CAACgF,SAAN,CAAgB,MAAM;AACpBD,IAAAA,QAAQ,CAACE,OAAT,GAAmB/D,KAAnB;AACD,GAFD,EAEG,CAACA,KAAD,CAFH;AAIAlB,EAAAA,KAAK,CAACgF,SAAN,CAAgB,MAAM;AACpBL,IAAAA,QAAQ,CAAC;AACPvD,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAIA,QAAIyD,UAAU,KAAKpB,SAAnB,EAA8B;AAC9B,UAAMyB,gBAAgB,GAAGL,UAAU,CAACM,YAAX,CAAwB,CAAC;AAAEnD,MAAAA;AAAF,KAAD,KAAc;AAC7DE,MAAAA,UAAU,CAAC+C,OAAX,GAAqBjD,IAArB;AACD,KAFwB,CAAzB;AAGA,UAAMoD,gBAAgB,GAAGP,UAAU,CAACQ,YAAX,CAAyBtB,IAAD,IAAU;AACzDY,MAAAA,QAAQ,CAAC;AAAEvD,QAAAA,IAAI,EAAE,MAAR;AAAgB2C,QAAAA;AAAhB,OAAD,CAAR;AACD,KAFwB,CAAzB,CAToB,CAapB;;AACA,UAAMuB,UAAU,GAAGnF,UAAU,GACzBoF,WAAW,CAAC,YAAY;AACtB,YAAMC,aAAuB,GAAG,EAAhC;AACAT,MAAAA,QAAQ,CAACE,OAAT,CAAiBtB,OAAjB,CAA0B7B,EAAD,IAAQ;AAC/B,YAAIA,EAAE,CAACP,MAAH,KAAc,SAAd,IAA2BO,EAAE,CAACE,IAAH,CAAQ8B,MAAR,KAAmBL,SAAlD,EAA6D;AAC3D+B,UAAAA,aAAa,CAACC,IAAd,CAAmB3D,EAAE,CAACT,OAAH,CAAWU,SAA9B;AACD;AACF,OAJD;AAMA,UAAIyD,aAAa,CAAC7D,MAAd,KAAyB,CAA7B,EAAgC;AAEhC,YAAMyC,KAAe,GAAG,EAAxB;AACA,YAAMH,UAAkC,GAAG,EAA3C;AACA,YAAMyB,QAAQ,GAAG,CACf,MAAMb,UAAU,CAACc,oBAAX,CAAgCH,aAAhC,CADS,EAEfI,KAFF;;AAGA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAAC/D,MAA7B,EAAqCkE,CAAC,EAAtC,EAA0C;AACxC,cAAMtE,MAAM,GAAGmE,QAAQ,CAACG,CAAD,CAAvB;;AACA,YAAItE,MAAM,KAAK,IAAf,EAAqB;AACnB6C,UAAAA,KAAK,CAACqB,IAAN,CAAWlE,MAAM,CAACS,IAAlB;AACAiC,UAAAA,UAAU,CAACwB,IAAX,CAAgBD,aAAa,CAACK,CAAD,CAA7B;AACD;AACF;;AACD,UAAIzB,KAAK,CAACzC,MAAN,KAAiB,CAArB,EAAwB;AACxBgD,MAAAA,QAAQ,CAAC;AAAEvD,QAAAA,IAAI,EAAE,QAAR;AAAkBgD,QAAAA,KAAlB;AAAyBH,QAAAA;AAAzB,OAAD,CAAR;AACD,KAxBU,EAwBR,IAxBQ,CADc,GA0BzBR,SA1BJ;AA4BA,WAAO,MAAM;AACXoB,MAAAA,UAAU,CAACiB,wBAAX,CAAoCZ,gBAApC;AACAL,MAAAA,UAAU,CAACkB,wBAAX,CAAoCX,gBAApC;AACAE,MAAAA,UAAU,KAAK7B,SAAf,IAA4Bd,aAAa,CAAC2C,UAAD,CAAzC;AACD,KAJD;AAKD,GA/CD,EA+CG,CAACT,UAAD,CA/CH;AAiDA,QAAM,CAACmB,cAAD,EAAiBC,iBAAjB,IAAsChG,WAAW,CAACiB,KAAD,EAAQ,EAAR,CAAvD;AACAlB,EAAAA,KAAK,CAACgF,SAAN,CAAgB,MAAM;AACpBiB,IAAAA,iBAAiB,CAAC/E,KAAD,CAAjB;AACD,GAFD,EAEG,CAACA,KAAD,EAAQ+E,iBAAR,CAFH;AAIA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAED,cAA9B;AAAA,2BACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,MAAA,KAAK,EAAErB,QAAjC;AAAA,6BACE,QAAC,WAAD,CAAa,QAAb;AAAsB,QAAA,KAAK,EAAEzC,UAA7B;AAAA,+BACE,QAAC,kBAAD;AAAA,iCACE,QAAC,gBAAD;AAAA,mCACE,QAAC,eAAD;AAAA,qCACE,QAAC,WAAD;AAAA,0BAAcwC;AAAd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA/EeD,oB;UAEKhE,a,EAyDyBR,W;;;KA3D9BwE,oB;;AAiFhB,SAASjC,WAAT,CACEF,MADF,EAEEG,UAAkB,GAAGyD,WAAW,CAACC,GAAZ,EAFvB,EAGU;AACR,SAAOC,UAAU,CAAC,CAAC,CAAC3D,UAAU,GAAGH,MAAd,IAAwB,IAAzB,EAA+B+D,OAA/B,CAAuC,CAAvC,CAAD,CAAjB;AACD;;AAED,OAAO,SAASC,WAAT,GAAuB;AAAA;;AAC5B,QAAM3B,QAAQ,GAAG3E,KAAK,CAACuG,UAAN,CAAiB/B,eAAjB,CAAjB;;AACA,MAAI,CAACG,QAAL,EAAe;AACb,UAAM,IAAI6B,KAAJ,CAAW,wDAAX,CAAN;AACD;;AAED,SAAO7B,QAAP;AACD;;IAPe2B,W;;AAShB,OAAO,SAASG,gBAAT,GAA4B;AAAA;;AACjC,QAAM9B,QAAQ,GAAG3E,KAAK,CAACuG,UAAN,CAAiBlC,WAAjB,CAAjB;;AACA,MAAI,CAACM,QAAL,EAAe;AACb,UAAM,IAAI6B,KAAJ,CACH,6DADG,CAAN;AAGD;;AAED,SAAO7B,QAAP;AACD;;IATe8B,gB;;AAWhB,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAChC,QAAMxF,KAAK,GAAGlB,KAAK,CAACuG,UAAN,CAAiBhC,YAAjB,CAAd;;AACA,MAAI,CAACrD,KAAL,EAAY;AACV,UAAM,IAAIsF,KAAJ,CACH,4DADG,CAAN;AAGD;;AAED,SAAOtF,KAAP;AACD;;IATewF,e;;AAWhB,OAAO,SAASC,iBAAT,GAA6B;AAAA;;AAClC,QAAMzF,KAAK,GAAGlB,KAAK,CAACuG,UAAN,CAAiBhC,YAAjB,CAAd;;AACA,MAAI,CAACrD,KAAL,EAAY;AACV,UAAM,IAAIsF,KAAJ,CACH,8DADG,CAAN;AAGD;;AACD,SAAOtF,KAAK,CAAC0F,MAAN,CAAa,CAAC;AAAErF,IAAAA;AAAF,GAAD,KAAgBA,MAAM,KAAK,SAAxC,EAAmDI,MAA1D;AACD;;IARegF,iB;;AAUhB,OAAO,SAASE,eAAT,GAA2B;AAAA;;AAChC,QAAM3F,KAAK,GAAGlB,KAAK,CAACuG,UAAN,CAAiBhC,YAAjB,CAAd;;AACA,MAAI,CAACrD,KAAL,EAAY;AACV,UAAM,IAAIsF,KAAJ,CACH,4DADG,CAAN;AAGD;;AACD,SAAOtF,KAAK,CAAC0F,MAAN,CAAa,CAAC;AAAErF,IAAAA;AAAF,GAAD,KAAgBA,MAAM,KAAK,SAAxC,EAAmDI,MAA1D;AACD;;IARekF,e;;AAUhB,OAAO,SAASC,sBAAT,GAAkC;AAAA;;AACvC,QAAM5F,KAAK,GAAGlB,KAAK,CAACuG,UAAN,CAAiBhC,YAAjB,CAAd;;AACA,MAAI,CAACrD,KAAL,EAAY;AACV,UAAM,IAAIsF,KAAJ,CACH,mEADG,CAAN;AAGD;;AAED,QAAMO,SAAS,GAAG7F,KAAK,CAAC8F,MAAN,CAAa,CAACD,SAAD,EAAsBjF,EAAtB,KAA6B;AAC1D,QAAIA,EAAE,CAACP,MAAH,KAAc,SAAlB,EAA6B;AAC3B,YAAM0F,QAAQ,GAAGnF,EAAE,CAACO,MAAH,CAAU3B,gBAAV,CAAjB;AACA,UAAIuG,QAAQ,KAAKxD,SAAjB,EAA4BsD,SAAS,CAACtB,IAAV,CAAewB,QAAf;AAC7B;;AACD,WAAOF,SAAP;AACD,GANiB,EAMf,EANe,CAAlB;AAQA,QAAMG,KAAK,GAAGH,SAAS,CAACpF,MAAxB;AACA,MAAIuF,KAAK,KAAK,CAAd,EAAiB,OAAO,CAAP;AACjB,QAAMC,GAAG,GAAGJ,SAAS,CAACC,MAAV,CAAiB,CAACG,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAtC,EAA4C,CAA5C,CAAZ;AACA,SAAOD,GAAG,GAAGD,KAAb;AACD;;IApBeJ,sB;;AAsBhB,OAAO,SAASO,eAAT,GAA2B;AAAA;;AAChC,QAAMnG,KAAK,GAAGlB,KAAK,CAACuG,UAAN,CAAiBhC,YAAjB,CAAd;;AACA,MAAI,CAACrD,KAAL,EAAY;AACV,UAAM,IAAIsF,KAAJ,CACH,4DADG,CAAN;AAGD;;AACD,SAAOtF,KAAK,CAACS,MAAb;AACD;;IARe0F,e;;AAUhB,OAAO,SAASC,MAAT,GAAkB;AAAA;;AACvB,QAAMC,GAAG,GAAGvH,KAAK,CAACuG,UAAN,CAAiBlG,UAAjB,CAAZ;AACA,MAAIkH,GAAG,KAAK9D,SAAZ,EACE,MAAM,IAAI+C,KAAJ,CAAW,mDAAX,CAAN;AACF,SAAOe,GAAP;AACD;;IALeD,M;;AAOhB,OAAO,SAASE,cAAT,GAA0B;AAAA;;AAC/B,QAAMC,WAAW,GAAGzH,KAAK,CAACuG,UAAN,CAAiBjG,eAAjB,CAApB;AACA,MAAImH,WAAW,KAAKhE,SAApB,EACE,MAAM,IAAI+C,KAAJ,CACH,2DADG,CAAN;AAGF,SAAOiB,WAAP;AACD;;KAPeD,c","sourcesContent":["import * as React from \"react\";\nimport { useThrottle } from \"@react-hook/throttle\";\nimport { TransactionSignature, PublicKey } from \"@solana/web3.js\";\nimport { ConfirmedHelper, DEBUG_MODE } from \"./confirmed\";\nimport { TpsProvider, TpsContext } from \"./tps\";\nimport { CreateTxContext, CreateTxProvider } from \"./create\";\nimport { SelectedTxProvider } from \"./selected\";\nimport { useConnection } from \"providers/rpc\";\nimport { _addTracingExtensions } from \"@sentry/tracing/dist/hubextensions\";\n\nexport type ReceivedRecord = {\n  receivedAt: number;\n  slot: number;\n};\n\nexport type PendingTransaction = {\n  sentAt: number;\n  targetSlot: number;\n  retryId?: number;\n  timeoutId?: number;\n};\n\nexport type TransactionDetails = {\n  id: number;\n  feeAccount: PublicKey;\n  programAccount: PublicKey;\n  signature: TransactionSignature;\n};\n\ntype Timing = {\n  sentAt: number;\n  receivedAt?: number;\n  recent?: number;\n  single?: number;\n  singleGossip?: number;\n  gossipSignature?: number;\n};\n\ntype SuccessState = {\n  status: \"success\";\n  details: TransactionDetails;\n  received: Array<ReceivedRecord>;\n  slot: {\n    target: number;\n    landed?: number;\n    estimated: number;\n  };\n  timing: Timing;\n  pending?: PendingTransaction;\n};\n\nexport const COMMITMENT_PARAM = ((): TrackedCommitment => {\n  const commitment = new URLSearchParams(window.location.search).get(\n    \"commitment\"\n  );\n  switch (commitment) {\n    case \"recent\":\n    case \"single\": {\n      return commitment;\n    }\n    default: {\n      return \"singleGossip\";\n    }\n  }\n})();\n\nexport type TrackedCommitment = \"single\" | \"singleGossip\" | \"recent\";\n\ntype TimeoutState = {\n  status: \"timeout\";\n  details: TransactionDetails;\n};\n\ntype PendingState = {\n  status: \"pending\";\n  received: Array<ReceivedRecord>;\n  pending: PendingTransaction;\n  details: TransactionDetails;\n};\n\nexport type TransactionStatus = \"success\" | \"timeout\" | \"pending\";\n\nexport type TransactionState = SuccessState | TimeoutState | PendingState;\n\nexport type ActionType =\n  | \"new\"\n  | \"update\"\n  | \"timeout\"\n  | \"reset\"\n  | \"root\"\n  | \"landed\";\n\ntype UpdateIds = {\n  type: \"update\";\n  activeIdPartition: {\n    ids: Set<number>;\n    partition: number;\n    partitionCount: number;\n  };\n  commitment: TrackedCommitment;\n  receivedAt: number;\n  estimatedSlot: number;\n};\n\ntype SignatureConfirmed = {\n  type: \"signature\";\n  trackingId: number;\n  estimatedSlot: number;\n  receivedAt: number;\n};\n\ntype LandedTxs = {\n  type: \"landed\";\n  signatures: TransactionSignature[];\n  slots: number[];\n};\n\ntype NewTransaction = {\n  type: \"new\";\n  trackingId: number;\n  details: TransactionDetails;\n  pendingTransaction: PendingTransaction;\n};\n\ntype TimeoutTransaction = {\n  type: \"timeout\";\n  trackingId: number;\n};\n\ntype ResetState = {\n  type: \"reset\";\n};\n\ntype RecordRoot = {\n  type: \"root\";\n  root: number;\n};\n\ntype SignatureReceived = {\n  type: \"received\";\n  trackingId: number;\n  slot: number;\n  receivedAt: number;\n};\n\ntype Action =\n  | NewTransaction\n  | UpdateIds\n  | TimeoutTransaction\n  | ResetState\n  | RecordRoot\n  | LandedTxs\n  | SignatureConfirmed\n  | SignatureReceived;\n\ntype State = TransactionState[];\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"new\": {\n      const { details, pendingTransaction } = action;\n      return [\n        ...state,\n        {\n          details,\n          status: \"pending\",\n          received: [],\n          pending: pendingTransaction,\n        },\n      ];\n    }\n\n    case \"signature\": {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const transaction = state[trackingId];\n\n      return state.map((tx) => {\n        if (tx.details.signature === transaction.details.signature) {\n          if (tx.status === \"pending\") {\n            return {\n              status: \"success\",\n              details: tx.details,\n              received: tx.received,\n              slot: {\n                target: tx.pending.targetSlot,\n                estimated: action.estimatedSlot,\n              },\n              timing: {\n                sentAt: tx.pending.sentAt,\n                gossipSignature: timeElapsed(\n                  tx.pending.sentAt,\n                  action.receivedAt\n                ),\n              },\n              pending: tx.pending,\n            };\n\n          } else if (tx.status === \"success\") {\n            return {\n              ...tx,\n              timing: {\n                ...tx.timing,\n                gossipSignature: timeElapsed(\n                  tx.timing.sentAt,\n                  action.receivedAt\n                ),\n              },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"timeout\": {\n      const trackingId = action.trackingId;\n      if (trackingId >= state.length) return state;\n      const timeout = state[trackingId];\n      if (timeout.status !== \"pending\") return state;\n      clearInterval(timeout.pending.retryId);\n\n      return state.map((tx) => {\n        if (tx.details.signature === timeout.details.signature) {\n          return {\n            status: \"timeout\",\n            details: tx.details,\n          };\n        } else {\n          return tx;\n        }\n      });\n    }\n\n    case \"update\": {\n      const { ids, partition, partitionCount } = action.activeIdPartition;\n      return state.map((tx, trackingId) => {\n        if (trackingId % partitionCount !== partition) return tx;\n        const id = Math.floor(trackingId / partitionCount);\n        if (tx.status === \"pending\" && ids.has(id)) {\n          let receivedAt;\n\n          // Optimistically confirmed, no need to continue retry\n          if (\n            action.commitment === \"singleGossip\" ||\n            action.commitment === \"single\"\n          ) {\n            const record = tx.pending.received.find(record => record.slot === action.estimatedSlot);\n            if (record) {\n              receivedAt = record.receivedAt;\n            }\n            clearInterval(tx.pending.retryId);\n            clearTimeout(tx.pending.timeoutId);\n          }\n\n          return {\n            status: \"success\",\n            details: tx.details,\n            slot: {\n              target: tx.pending.targetSlot,\n              estimated: action.estimatedSlot,\n            },\n            timing: {\n              sentAt: tx.pending.sentAt,\n              receivedAt,\n              [action.commitment]: timeElapsed(\n                tx.pending.sentAt,\n                action.receivedAt\n              ),\n            },\n            pending: tx.pending,\n          };\n        } else if (tx.status === \"success\") {\n          if (ids.has(id)) {\n            // Already recorded conf time\n            if (tx.timing[action.commitment] !== undefined) {\n              return tx;\n            }\n\n            // Optimistically confirmed, no need to continue retry\n            if (\n              tx.pending &&\n              (action.commitment === \"singleGossip\" ||\n                action.commitment === \"single\")\n            ) {\n              clearInterval(tx.pending.retryId);\n              clearTimeout(tx.pending.timeoutId);\n            }\n\n            return {\n              ...tx,\n              timing: {\n                ...tx.timing,\n                [action.commitment]: timeElapsed(\n                  tx.timing.sentAt,\n                  action.receivedAt\n                ),\n              },\n            };\n          } else if (\n            action.commitment === \"recent\" &&\n            tx.pending &&\n            !ids.has(id)\n          ) {\n            // Don't revert to pending state if we already received timing info for other commitments\n            if (\n              tx.timing[\"single\"] !== undefined ||\n              tx.timing[\"singleGossip\"] !== undefined\n            ) {\n              return {\n                ...tx,\n                timing: {\n                  ...tx.timing,\n                  recent: undefined,\n                },\n              };\n            }\n\n            // Revert to pending state because the previous notification likely came from a fork\n            return {\n              status: \"pending\",\n              details: tx.details,\n              pending: { ...tx.pending },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"reset\": {\n      state.forEach((tx) => {\n        if (tx.status === \"pending\") {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        } else if (tx.status === \"success\" && tx.pending) {\n          clearTimeout(tx.pending.timeoutId);\n          clearInterval(tx.pending.retryId);\n        }\n      });\n      return [];\n    }\n\n    case \"root\": {\n      const foundRooted = state.find((tx) => {\n        if (tx.status === \"success\" && tx.pending) {\n          const landedSlot = !DEBUG_MODE ? tx.slot.estimated : tx.slot.landed;\n          return landedSlot === action.root;\n        } else {\n          return false;\n        }\n      });\n\n      // Avoid re-allocating state map\n      if (!foundRooted) return state;\n\n      return state.map((tx) => {\n        if (tx.status === \"success\" && tx.pending) {\n          const landedSlot = !DEBUG_MODE ? tx.slot.estimated : tx.slot.landed;\n          if (landedSlot === action.root) {\n            clearInterval(tx.pending.retryId);\n            clearTimeout(tx.pending.timeoutId);\n            return {\n              ...tx,\n              pending: undefined,\n            };\n          }\n        }\n        return tx;\n      });\n    }\n\n    case \"landed\": {\n      return state.map((tx) => {\n        if (tx.status === \"success\") {\n          const index = action.signatures.findIndex(\n            (val) => val === tx.details.signature\n          );\n          if (index >= 0) {\n            return {\n              ...tx,\n              slot: {\n                ...tx.slot,\n                landed: action.slots[index],\n              },\n            };\n          }\n        }\n        return tx;\n      });\n    }\n  }\n}\n\nexport type Dispatch = (action: Action) => void;\nconst SlotContext = React.createContext<\n  React.MutableRefObject<number | undefined> | undefined\n>(undefined);\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function TransactionsProvider({ children }: ProviderProps) {\n  const [state, dispatch] = React.useReducer(reducer, []);\n  const connection = useConnection();\n  const targetSlot = React.useRef<number>();\n  const stateRef = React.useRef(state);\n\n  React.useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n\n  React.useEffect(() => {\n    dispatch({\n      type: \"reset\",\n    });\n\n    if (connection === undefined) return;\n    const slotSubscription = connection.onSlotChange(({ slot }) => {\n      targetSlot.current = slot;\n    });\n    const rootSubscription = connection.onRootChange((root) => {\n      dispatch({ type: \"root\", root });\n    });\n\n    // Poll for signature statuses to determine which slot a tx landed in\n    const intervalId = DEBUG_MODE\n      ? setInterval(async () => {\n          const fetchStatuses: string[] = [];\n          stateRef.current.forEach((tx) => {\n            if (tx.status === \"success\" && tx.slot.landed === undefined) {\n              fetchStatuses.push(tx.details.signature);\n            }\n          });\n\n          if (fetchStatuses.length === 0) return;\n\n          const slots: number[] = [];\n          const signatures: TransactionSignature[] = [];\n          const statuses = (\n            await connection.getSignatureStatuses(fetchStatuses)\n          ).value;\n          for (var i = 0; i < statuses.length; i++) {\n            const status = statuses[i];\n            if (status !== null) {\n              slots.push(status.slot);\n              signatures.push(fetchStatuses[i]);\n            }\n          }\n          if (slots.length === 0) return;\n          dispatch({ type: \"landed\", slots, signatures });\n        }, 2000)\n      : undefined;\n\n    return () => {\n      connection.removeSlotChangeListener(slotSubscription);\n      connection.removeRootChangeListener(rootSubscription);\n      intervalId !== undefined && clearInterval(intervalId);\n    };\n  }, [connection]);\n\n  const [throttledState, setThrottledState] = useThrottle(state, 10);\n  React.useEffect(() => {\n    setThrottledState(state);\n  }, [state, setThrottledState]);\n\n  return (\n    <StateContext.Provider value={throttledState}>\n      <DispatchContext.Provider value={dispatch}>\n        <SlotContext.Provider value={targetSlot}>\n          <SelectedTxProvider>\n            <CreateTxProvider>\n              <ConfirmedHelper>\n                <TpsProvider>{children}</TpsProvider>\n              </ConfirmedHelper>\n            </CreateTxProvider>\n          </SelectedTxProvider>\n        </SlotContext.Provider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nfunction timeElapsed(\n  sentAt: number,\n  receivedAt: number = performance.now()\n): number {\n  return parseFloat(((receivedAt - sentAt) / 1000).toFixed(3));\n}\n\nexport function useDispatch() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useDispatch must be used within a TransactionsProvider`);\n  }\n\n  return dispatch;\n}\n\nexport function useTargetSlotRef() {\n  const dispatch = React.useContext(SlotContext);\n  if (!dispatch) {\n    throw new Error(\n      `useTargetSlotRef must be used within a TransactionsProvider`\n    );\n  }\n\n  return dispatch;\n}\n\nexport function useTransactions() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useTransactions must be used within a TransactionsProvider`\n    );\n  }\n\n  return state;\n}\n\nexport function useConfirmedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useConfirmedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"success\").length;\n}\n\nexport function useDroppedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useDroppedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.filter(({ status }) => status === \"timeout\").length;\n}\n\nexport function useAvgConfirmationTime() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useAvgConfirmationTime must be used within a TransactionsProvider`\n    );\n  }\n\n  const confirmed = state.reduce((confirmed: number[], tx) => {\n    if (tx.status === \"success\") {\n      const confTime = tx.timing[COMMITMENT_PARAM];\n      if (confTime !== undefined) confirmed.push(confTime);\n    }\n    return confirmed;\n  }, []);\n\n  const count = confirmed.length;\n  if (count === 0) return 0;\n  const sum = confirmed.reduce((sum, time) => sum + time, 0);\n  return sum / count;\n}\n\nexport function useCreatedCount() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(\n      `useCreatedCount must be used within a TransactionsProvider`\n    );\n  }\n  return state.length;\n}\n\nexport function useTps() {\n  const tps = React.useContext(TpsContext);\n  if (tps === undefined)\n    throw new Error(`useTps must be used within a TransactionsProvider`);\n  return tps;\n}\n\nexport function useCreateTxRef() {\n  const createTxRef = React.useContext(CreateTxContext);\n  if (createTxRef === undefined)\n    throw new Error(\n      `useCreateTxRef must be used within a TransactionsProvider`\n    );\n  return createTxRef;\n}\n"]},"metadata":{},"sourceType":"module"}