{"ast":null,"code":"import _slicedToArray from\"/Users/jstarry/Workspace/solana/break/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import*as React from\"react\";import{CreateTransactionRPC}from\"workers/create-transaction-rpc\";import{useConfig,useAccounts}from\"./api\";import{useBlockhash}from\"./blockhash\";var StateContext=React.createContext(undefined);export var WORKER=new CreateTransactionRPC();export function WorkerProvider(_ref){var children=_ref.children;var _React$useState=React.useState(\"loading\"),_React$useState2=_slicedToArray(_React$useState,2),state=_React$useState2[0],setState=_React$useState2[1];var blockhash=useBlockhash();React.useEffect(function(){if(blockhash)WORKER.send({type:\"blockhash\",blockhash:blockhash});},[blockhash]);var accounts=useAccounts();React.useEffect(function(){if(accounts)WORKER.send({type:\"accounts\",feeAccounts:accounts.feeAccounts.map(function(a){return a.secretKey;}),programAccounts:accounts.programAccounts.map(function(a){return a.toBase58();})});},[accounts]);var config=useConfig();var programId=config===null||config===void 0?void 0:config.programId;var clusterUrl=config===null||config===void 0?void 0:config.clusterUrl;React.useEffect(function(){if(programId&&clusterUrl){WORKER.send({type:\"init\",programId:programId.toBase58(),clusterUrl:clusterUrl});}},[programId,clusterUrl]);React.useEffect(function(){WORKER.setReadyListener(function(){setState(\"ready\");});},[]);return/*#__PURE__*/React.createElement(StateContext.Provider,{value:state},children);}export function useWorkerState(){var state=React.useContext(StateContext);if(!state){throw new Error(\"useWorkerState must be used within a WorkerProvider\");}return state;}","map":{"version":3,"sources":["/Users/jstarry/Workspace/solana/break/client/src/providers/worker.tsx"],"names":["React","CreateTransactionRPC","useConfig","useAccounts","useBlockhash","StateContext","createContext","undefined","WORKER","WorkerProvider","children","useState","state","setState","blockhash","useEffect","send","type","accounts","feeAccounts","map","a","secretKey","programAccounts","toBase58","config","programId","clusterUrl","setReadyListener","useWorkerState","useContext","Error"],"mappings":"mKAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,oBAAT,KAAqC,gCAArC,CACA,OAASC,SAAT,CAAoBC,WAApB,KAAuC,OAAvC,CACA,OAASC,YAAT,KAA6B,aAA7B,CAGA,GAAMC,CAAAA,YAAY,CAAGL,KAAK,CAACM,aAAN,CAAuCC,SAAvC,CAArB,CAEA,MAAO,IAAMC,CAAAA,MAAM,CAAG,GAAIP,CAAAA,oBAAJ,EAAf,CAGP,MAAO,SAASQ,CAAAA,cAAT,MAAqD,IAA3BC,CAAAA,QAA2B,MAA3BA,QAA2B,qBAChCV,KAAK,CAACW,QAAN,CAAsB,SAAtB,CADgC,oDACnDC,KADmD,qBAC5CC,QAD4C,qBAG1D,GAAMC,CAAAA,SAAS,CAAGV,YAAY,EAA9B,CACAJ,KAAK,CAACe,SAAN,CAAgB,UAAM,CAClB,GAAID,SAAJ,CAAeN,MAAM,CAACQ,IAAP,CAAY,CAACC,IAAI,CAAE,WAAP,CAAoBH,SAAS,CAATA,SAApB,CAAZ,EAClB,CAFD,CAEG,CAACA,SAAD,CAFH,EAIA,GAAMI,CAAAA,QAAQ,CAAGf,WAAW,EAA5B,CACAH,KAAK,CAACe,SAAN,CAAgB,UAAM,CAClB,GAAIG,QAAJ,CAAcV,MAAM,CAACQ,IAAP,CAAY,CAACC,IAAI,CAAE,UAAP,CAC1BE,WAAW,CAAED,QAAQ,CAACC,WAAT,CAAqBC,GAArB,CAAyB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,SAAN,EAA1B,CADa,CAE1BC,eAAe,CAAEL,QAAQ,CAACK,eAAT,CAAyBH,GAAzB,CAA6B,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACG,QAAF,EAAJ,EAA9B,CAFS,CAAZ,EAIjB,CALD,CAKG,CAACN,QAAD,CALH,EAOA,GAAMO,CAAAA,MAAM,CAAGvB,SAAS,EAAxB,CACA,GAAMwB,CAAAA,SAAS,CAAGD,MAAH,SAAGA,MAAH,iBAAGA,MAAM,CAAEC,SAA1B,CACA,GAAMC,CAAAA,UAAU,CAAGF,MAAH,SAAGA,MAAH,iBAAGA,MAAM,CAAEE,UAA3B,CACA3B,KAAK,CAACe,SAAN,CAAgB,UAAM,CAClB,GAAIW,SAAS,EAAIC,UAAjB,CAA6B,CAC3BnB,MAAM,CAACQ,IAAP,CAAY,CAAEC,IAAI,CAAE,MAAR,CAAgBS,SAAS,CAAEA,SAAS,CAACF,QAAV,EAA3B,CAAiDG,UAAU,CAAVA,UAAjD,CAAZ,EACD,CACJ,CAJD,CAIG,CAACD,SAAD,CAAYC,UAAZ,CAJH,EAMA3B,KAAK,CAACe,SAAN,CAAgB,UAAM,CAClBP,MAAM,CAACoB,gBAAP,CAAwB,UAAM,CAC5Bf,QAAQ,CAAC,OAAD,CAAR,CACD,CAFD,EAGH,CAJD,CAIG,EAJH,EAMA,mBACE,oBAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAED,KAA9B,EACKF,QADL,CADF,CAKD,CAED,MAAO,SAASmB,CAAAA,cAAT,EAA0B,CAC/B,GAAMjB,CAAAA,KAAK,CAAGZ,KAAK,CAAC8B,UAAN,CAAiBzB,YAAjB,CAAd,CACA,GAAI,CAACO,KAAL,CAAY,CACV,KAAM,IAAImB,CAAAA,KAAJ,uDAAN,CACD,CAED,MAAOnB,CAAAA,KAAP,CACD","sourcesContent":["import * as React from \"react\";\nimport { CreateTransactionRPC } from \"workers/create-transaction-rpc\";\nimport { useConfig, useAccounts } from \"./api\";\nimport { useBlockhash } from \"./blockhash\";\n\ntype State = \"loading\" | \"ready\";\nconst StateContext = React.createContext<State | undefined>(undefined);\n\nexport const WORKER = new CreateTransactionRPC();\n\ntype ProviderProps = { children: React.ReactNode };\nexport function WorkerProvider({ children }: ProviderProps) {\n  const [state, setState] = React.useState<State>(\"loading\");\n\n  const blockhash = useBlockhash();\n  React.useEffect(() => {\n      if (blockhash) WORKER.send({type: \"blockhash\", blockhash});\n  }, [blockhash]);\n\n  const accounts = useAccounts();\n  React.useEffect(() => {\n      if (accounts) WORKER.send({type: \"accounts\",\n      feeAccounts: accounts.feeAccounts.map(a => a.secretKey),\n      programAccounts: accounts.programAccounts.map(a => a.toBase58())\n    });\n  }, [accounts]);\n\n  const config = useConfig();\n  const programId = config?.programId;\n  const clusterUrl = config?.clusterUrl;\n  React.useEffect(() => {\n      if (programId && clusterUrl) {\n        WORKER.send({ type: \"init\", programId: programId.toBase58(), clusterUrl });\n      }\n  }, [programId, clusterUrl]);\n\n  React.useEffect(() => {\n      WORKER.setReadyListener(() => {\n        setState(\"ready\");\n      })\n  }, []);\n\n  return (\n    <StateContext.Provider value={state}>\n        {children}\n    </StateContext.Provider>\n  );\n}\n\nexport function useWorkerState() {\n  const state = React.useContext(StateContext);\n  if (!state) {\n    throw new Error(`useWorkerState must be used within a WorkerProvider`);\n  }\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}